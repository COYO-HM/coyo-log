{"pageProps":{"posts":[{"frontMatter":{"date":"2023-01-26T00:00:00","title":"TypeSript에서 Redux-ToolKit 사용하기","tags":["React","TypeScript","Redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true},"body":"# 설치\r\n\r\n```bash\r\nnpm install @reduxjs/toolkit\r\n\r\nyarn add @reduxjs/toolkit\r\n\r\n```\r\n\r\n# Store\r\n\r\n```TypeScript\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nexport const store = configureStore({\r\n  reducer: {},\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n```\r\n\r\n`index.tsx`\r\n\r\n```TypeScript\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n```\r\n\r\n# `UseDispatch`, `UseSelector`\r\n\r\n```TypeScript\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { AppDispatch, RootState } from '../Store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n```\r\n\r\n# CreateSlice\r\n\r\n`ExampleReducer.ts`\r\n\r\n```TypeScript\r\ninterface IExampleState {\r\n\t// reducer type들 표시\r\n\tuserInfo: {name: string, id: string} | null\r\n}\r\n\r\nconst initialState: IExampleState = {\r\n\t// 초기 상태 설정\r\n\tuserInfo: null\r\n}\r\n\r\nexport const ExampleSlice = createSlice({\r\n\tname: 'EXAMPLE',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tupdateName: (state, action) => {\r\n\t\t\tstate.userInfo: {\r\n\t\t\t\t...state.userInfo,\r\n\t\t\t\taction.payload\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\r\n\t\t\tstate.userInfo = payload\r\n\t\t})\r\n\t}\r\n})\r\n\r\nexport const { updateName } = ExampleSlice.actions\r\nexport const ExampleReducer = {\r\n\texample: ExampleSlice.reducer\r\n}\r\n```\r\n\r\n# CreateAsyncThunk\r\n\r\n```TypeScript\r\nexport const getUserInfoAsync = createAsyncThunk<\r\n  {\r\n    /*성공시에 출력될 data의 type*/\r\n  },\r\n  {\r\n    /*param의 type*/\r\n  }\r\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\r\n```\r\n\r\n# 참조\r\n\r\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\r\n","fields":{"slug":"blog/redux/RTK-with-ts"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/redux/RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-11-14T00:00:00","title":"쿠키와 세션","tags":["Network"],"description":"쿠키와 세션의 각각 특징과 비교","published":true},"body":"[HTTP](https://coyo-hm.github.io/blog/network/http) 환경은 <span className=\"yellow\">connectionless, stateless</span>한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매변 확인하는 작업이 필요하다.\r\n\r\n또한 사이트가 커짐에 따라 장바구니, 위시리스트 등 클라이언트가 정보를 유지하는 stateful한 성격의 서비스가 점차 증가하였다.\r\n\r\n이러한 배경과 HTTP의 특징을 보완하고 하기 위해 쿠키와 세션을 하게 되었다.\r\n\r\n# 쿠키(Cookie)\r\n\r\n---\r\n\r\n> 쿠키\r\n> 클라이언트(브라우저)의 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일로 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.\r\n\r\n- 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다.\r\n- 클라이언트에 300개까지 쿠키 저장이 가능하다. 하나의 도메인당 20개의 값만 가질 수 있다. 하나의 쿠키값은 4KB까지 저장한다.\r\n- Response Header에 Set-Cookie 속성을 사용하면 클라이언트에 쿠키를 만들 수 있다.\r\n- 쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송\r\n\r\n## 쿠키의 구성 요소\r\n\r\n| 이름     | 각각의 쿠키를 구별하는 데 사용되는 이름 |\r\n| -------- | --------------------------------------- |\r\n| 값       | 쿠키의 이름과 관련된 값                 |\r\n| 유효시간 | 쿠키의 유지시간                         |\r\n| 도메인   | 쿠키를 전송할 도메인                    |\r\n| 경로     | 쿠키를 전송할 요청 경로                 |\r\n\r\n## 쿠키의 동작 방식\r\n\r\n1. 클라이언트가 페이지를 요청\r\n2. 서버에서 쿠키를 생성\r\n3. HTTP Header에 쿠키를 포함 시켜 응답\r\n4. 브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음\r\n5. 같은 요청을 할 경우 HTTP Header에 쿠키를 함꼐 보냄\r\n6. 서버에서 쿠키를 읽어 이전 상태 정보를 변경할 필요가 있을 때 쿠키를 업데이트하여 변경된 쿠키를 HTTP Header에 포함시켜 응답\r\n\r\n## 쿠키의 사용예시\r\n\r\n- 방문 사이트에서 로그인 시, \"아이디와 비밀번호를 저장하시겠습니까?\"\r\n- 쇼핑몰의 장바구니 기능\r\n- 자동로그인, 팝업에서 \"오늘 더 이상 이 창을 보지 않음\" 체크, 쇼핑몰의 장바구니\r\n\r\n# 세션(Session)\r\n\r\n---\r\n\r\n> 쿠키에 기반하지만 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 서버 측에서 관리\r\n\r\n- 서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지\r\n- 물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능\r\n- 사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.\r\n  → 즉 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인\r\n- 클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션 ID\r\n\r\n## 세션의 동작 방식\r\n\r\n1. 클라이언트가 서버에 접속 시 세션 ID를 발급 받음\r\n2. 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음\r\n3. 클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청\r\n4. 서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용\r\n5. 클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답\r\n\r\n## 세션의 특징\r\n\r\n- 각 클라이언트에게 고유 ID를 부여\r\n- 세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공\r\n- 보안 면에서 쿠키보다 우수\r\n- 사용자가 많아질수록 서버 메모리를 많이 차지하게 됨\r\n\r\n## 세션의 사용 예시\r\n\r\n- 로그인 같이 보안상 중요한 작업을 수행할 때 사용\r\n\r\n# 쿠키VS세션\r\n\r\n- 가장 큰 차이점은 사용자의 정보가 저장되는 위치입니다. 때문에 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용합니다.\r\n- 보안 면에서 세션이 더 우수하며, 요청 속도는 쿠키가 세션보다 더 빠릅니다. 그 이유는 세션은 서버의 처리가 필요하기 때문입니다.\r\n- 보안, 쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서 sessionid 만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 비교적 보안성이 좋습니다.\r\n- 라이프 사이클, 쿠키도 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아 있을 수 있다. 또한 만료기간을 넉넉하게 잡아두면 쿠키삭제를 할 때 까지 유지될 수도 있습니다.\r\n- 반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제됩니다. 예를 들어, 크롬에서 다른 탭을 사용해도 세션을 공유됩니다. 다른 브라우저를 사용하게 되면 다른 세션을 사용할 수 있습니다.\r\n- 속도, 쿠키에 정보가 있기 때문에 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 가집니다.\r\n\r\n<aside>\r\n❓ 세션을 사용하면 좋은데 왜 쿠키를 사용할까?\r\n\r\n세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문에 쿠키가 유리한 경우가 있다.\r\n\r\n</aside>\r\n","fields":{"slug":"blog/network/cookie-session"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/cookie-session.mdx"},{"frontMatter":{"date":"2022-10-23T00:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["React","TypeScript","Emotion","Gatsby"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"./add_table_of_contents_in_post.png","published":true},"body":"# 목차 생성하기\r\n\r\n## tableOfContents\r\n\r\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\r\n\r\n```graphql\r\n{\r\n  allMarkdownRemark {\r\n    nodes {\r\n      tableOfContents\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```plaintext\r\n{\r\n  \"data\": {\r\n    \"allMarkdownRemark\": {\r\n      \"nodes\": [\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        ...\r\n        ]\r\n    }\r\n  },\r\n  \"extensions\": {}\r\n}\r\n\r\n```\r\n\r\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\r\n\r\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\r\n\r\n```typescript\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n```\r\n\r\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\r\n\r\n`PostTableOfContents.tsx`\r\n\r\n```typescript\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface IPostTableOfContentsProps {\r\n  tableOfContents: string;\r\n}\r\n\r\nconst TableofContents = styled.div``;\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n  return (\r\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n  );\r\n};\r\n\r\nexport default PostTableOfContents;\r\n```\r\n\r\n`post_template.tsx`\r\n\r\n```typescript\r\nconst PostTemplate = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: IPostTemplateProps) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0];\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <PostTableOfContents tableOfContents={tableOfContents} />\r\n      <CommentWidget />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n```\r\n\r\n## 링크 동작시키기\r\n\r\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\r\n\r\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\r\n\r\n```shell\r\nyarn add gatsby-remark-autolink-headers\r\n\r\nnpm i gatsby-remark-autolink-headers\r\n```\r\n\r\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\r\n\r\n```javascript\r\n...\r\n{\r\n  resolve: `gatsby-transformer-remark`,\r\n    options\r\n:\r\n  {\r\n    plugins: [\r\n      ...\r\n        `gatsby-remark-autolink-headers`,\r\n    ],\r\n  }\r\n}\r\n,\r\n...\r\n```\r\n\r\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\r\n\r\n# 목차 CSS 적용하기\r\n\r\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n`;\r\n```\r\n\r\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\r\n씩 추가하였다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n\r\n  * {\r\n    list-style: none;\r\n    padding-bottom: 5px;\r\n\r\n    &:last-child {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n\r\n  * > ul > li {\r\n    padding-left: 5px;\r\n  }\r\n`;\r\n```\r\n\r\n# 페이지 맨 위/아래로 가기 버튼 추가하기\r\n\r\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\r\n\r\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\r\n\r\n```typescript\r\nimport styled from '@emotion/styled'\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n...\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n    const onClickUpButton = useCallback(() => {\r\n    window?.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const onClickDownButton = useCallback(() => {\r\n    window?.scrollTo(0, document.body.scrollHeight)\r\n  }, [])\r\n  return (\r\n    <TableofContentsWrapper>\r\n      <UpButton>\r\n        <FontAwesomeIcon icon={faAngleUp} />\r\n      </UpButton>\r\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n      <DownButton>\r\n        <FontAwesomeIcon icon={faAngleDown} />\r\n      </DownButton>\r\n    </TableofContentsWrapper>\r\n  )\r\n}\r\n```\r\n\r\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\r\n","fields":{"slug":"blog/gatsby/add_table_of_contents_in_gatsby"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/gatsby/add_table_of_contents_in_gatsby.mdx"},{"frontMatter":{"date":"2022-09-18T00:00:00","title":"HTTP 통신","tags":["Network"],"description":"HTML 파일을 전송하는 프로토콜","published":true},"body":"# 개념\r\n\r\n> <strong>HTTP(HyperText Transfer Protocol)</strong>\r\n>\r\n> HTML 파일을 전송하는 프로토콜으로 초기에는 HTML 파일 전송을 목적으로 만들어졌으나 현재는 JSON, image 파일 등도 전송한다.\r\n> 클라이언트에서 서버로 요청을 보내고 서버가 클라이언트의 요청에 응답하는 방식으로 통신이 이루어진다.\r\n> 클라이언트 요청이 있을 때 서버가 응답하는 단방향 통신이다.\r\n\r\n<aside>\r\n\r\n초기에 서버는 응답 후 클라이언트의 Connection을 곧바로 끊어버렸으나, 현재는 성능상의 이유로 Keep Alive 옵션을 통해 일정 기간 동안 클라이언트와 Connection을 유지하는 방식으로 통신이 가능해졌다.\r\n\r\n</aside>\r\n\r\n- 보통 브라우저인 클라이언트에 의해 전송되는 메세지를 요청(requests)라고 부르며, 그에 대한 서버에서 응답으로 전송되는 메시지를 응답(responses)라고 부른다.\r\n- 무상태성(Stateless): HTTP는 state를 저장하지 않늗다. 동시에 통신이 끝나면 상태를 유지하지 않는 특징\r\n- 비연결성(Connectionless): 클라이언트의 요청에 서버가 응답하고, 그 응답을 클라이언트가 받으면 연결을 끊어버리는 특징\r\n\r\n# 참조\r\n\r\n- [https://developer.mozilla.org/ko/docs/Web/HTTP](https://developer.mozilla.org/ko/docs/Web/HTTP)\r\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\r\n","fields":{"slug":"blog/network/http"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/http.mdx"},{"frontMatter":{"date":"2022-09-13T00:00:00","title":"Socket 통신","tags":["Network"],"description":" 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체","published":true},"body":"# 개념\r\n\r\n> <strong>Socket</strong>\r\n>\r\n> 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체이다.\r\n> 소켓을 통해 데이터 통로가 생성된다.\r\n>\r\n> - 소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.\r\n\r\n> **소켓 통신**\r\n> 클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식으리 양방향 통신\r\n> 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 서버 또한 클라이언트에게 요청을 보낼 수 있다.\r\n\r\n- 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓 통신이 더 적합하다.\r\n- 소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 자원이 소모된다.\r\n\r\n# 참조\r\n\r\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\r\n- [https://helloworld-88.tistory.com/215](https://helloworld-88.tistory.com/215)\r\n- [https://itstudy402.tistory.com/13](https://itstudy402.tistory.com/13)\r\n","fields":{"slug":"blog/network/socket"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/socket.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\r\n\r\n## `uniq`\r\n\r\n> 배열 원소 중복 제거\r\n>\r\n> ```tsx\r\n> uniq<T>(array: List<T> | null | undefined): T[];\r\n> // arg: array\r\n> // return: array\r\n> ```\r\n\r\n```tsx\r\nconst siteList = [0, 1, 1, 2];\r\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\r\n```\r\n\r\n# Collection 관련 함수\r\n\r\n## `sortby`\r\n\r\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\r\n>\r\n> ```tsx\r\n> sortBy(collection, [(iteratees = [_.identity])]);\r\n>\r\n> //collection: 정렬 대상\r\n> //[iteratees=[_.identity]] 정렬 기준\r\n>\r\n> // => return 정렬된 새로운 array\r\n> ```\r\n\r\n- 여러 개의 필드값으로도 정렬 가능\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\r\n```\r\n\r\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\r\n```\r\n\r\n```tsx\r\nconst users = [\r\n  { user: \"fred\", age: 48 },\r\n  { user: \"barney\", age: 36 },\r\n  { user: \"fred\", age: 40 },\r\n  { user: \"barney\", age: 34 },\r\n];\r\n\r\nconst sortByFunc = sortBy(users, [\r\n  function (o) {\r\n    return o.user;\r\n  },\r\n]);\r\nconsole.log(sortByFunc);\r\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\r\n\r\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\r\nconsole.log(sortByTwoArg);\r\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\r\n```\r\n\r\n# Lang 관련 함수\r\n\r\n## `clonedeep`\r\n\r\n> 객체 복사\r\n\r\n# Object 관련 함수\r\n\r\n## `get`\r\n\r\n> 객체에서 원하는 값 찾기\r\n\r\n```javascript\r\nget(찾을 장소, 가져올 키, 기본 값);\r\n```\r\n\r\n# 참조\r\n\r\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\r\n","fields":{"slug":"blog/react/lodash"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/lodash.mdx"},{"frontMatter":{"date":"2021-07-12T00:00:00","title":"React Class Component Life Cycle","tags":["React","JavaScript"],"description":"React Class Component 의 Life Cycle 정리","published":true},"body":"<aside>\r\n본 포스트는 <a href=\"https://ko.reactjs.org/docs/react-component.html#componentdidupdate\">리액트 공식 홈페이지</a>를 읽고 공부한 기록입니다.\r\n</aside>\r\n\r\n# LifeCycle\r\n\r\n> 모든 컴포넌트를 여러 종류의 생명 주기 메소드를 가지며 생명 주기 메소드를 통해서 원하는 시점에 특정 함수가 실행하도록 할 수 있다.\r\n\r\n- React v_16.4 이상 LifeCycle\r\n  ![[https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)](/static/images/blog/react_class_render_01.png)\r\n\r\n- React v_16.3 이하 LifeCycle\r\n  ![https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](/static/images/blog/react_class_render_02.png)\r\n\r\n## Mount\r\n\r\n> DOM에 element를 집어넣는것\r\n\r\n컴포넌트의 인스턴스가 생성되어 DOM 상에 삽입될 때에 순서대로 호출\r\n\r\n1. [`constructor()`](#constructor)\r\n2. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\r\n3. [`render()`](#render)\r\n4. ~~[`componentDidMount()`](#componentdidmount)~~\r\n\r\n## Update\r\n\r\nprops 또는 state가 변경되면 다음과 같은 순서로 re-render 발생.\r\n\r\n1. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\r\n2. [`shouldComponentUpdate()`](#shouldComponentUpdate)\r\n3. [`render()`](#render)\r\n4. [`getSnapshotBeforeUpdate()`](#getSnapshotBeforeUpdate)\r\n5. ~~[`componentDidUpdate()`](#componentDidMount)~~\r\n\r\n## Unmount\r\n\r\nComponent가 DOM 상에서 제거될 때에 호출됨\r\n\r\n- [`componentWillUnmount`](#componentWillMount)\r\n\r\n## Handle Error\r\n\r\n아래 메서드들은 자식 컴포넌트를 렌더링하거나, 자식 컴포넌트가 생명주기 메서드를 호출하거나, 자식 컴포넌트가 생성자 메서드를 호출하는 과정에서 오류가 발생했을 때에 호출된다.\r\n\r\n- [`static getDerivedStateFromError()`](#getDerivedStateFromProps)\r\n- [`componentDidCatch()`](#componentDidCatch)\r\n\r\n# Life Cycle Method\r\n\r\n## `constructor`\r\n\r\n> 컴포넌트가 새롭게 생성될 때 마다 호출되는 컴포넌트 생성자 메소드로 보통 `this.state`에 객체를 할당하여 local state를 초기화하거나 인스턴스에 이벤트 처리 메서드를 바인딩하기 위해 사용된다.\r\n\r\n- 해당 컴포넌트가 마운트되기 전에 호출되는 함수, 컴포넌트 생성시에 가장 먼저 실행되는 메소드\r\n- 메서드를 바인딩하거나 state를 초기화하는 작업이 없다면 생성자(`constructor`) 생략 가능\r\n- React.Component를 상속한 컴포넌트의 생성자를 구현할 때에는 다른 구문에 앞서 `super(props);`를 호출해야 한다. 그렇지 않으면 this.props가 생성자 내에서 정의되지 않는 오류 발생\r\n- `constructor()` 내부에서 `setState()`를 호출하면 안된다. 만일 컴포넌트에 local state가 필요하다면 생성자 내에서 `this.state`에 초기 state 값을 할당하면 된다.\r\n- 생성자는 `this.state`를 직접 할당할 수 있는 유일한 곳으로 `constructor()` 이 외의 메서드에서는 `this.setState()`를 사용해야 함\r\n- 생성자 내에서는 부수 효과를 발생시키거나 구독 작업(subscription)을 수행 XXX => `componentDidMount()`에서 실행하기\r\n\r\n```javascript\r\nconstructor(props);\r\n{\r\n  super(props);\r\n  // 여기서 this.setState()를 호출 X\r\n  this.state = { counter: 0 };\r\n  this.handleClick = this.handleClick.bind(this);\r\n}\r\n```\r\n\r\n> !! `state`에 props 복사하지 않기 => `props` 복사는 `getDerivedStateFromProps`에서 하기\r\n>\r\n> ```javascript\r\n> constructor(props) {\r\n> super(props);\r\n> // 이렇게 하지 마세요!\r\n> this.state = { color: props.color };\r\n> }\r\n> ```\r\n>\r\n> 이런식으로 props를 state로 설정할 경우 props의 값의 변경 사항이 반영되지 않는다.\r\n>\r\n> `props`의 갱신을 의도적으로 무시해야 할 때만 `props`를 `state`로 따로 설정\r\n\r\n## `componentWillMount`\r\n\r\n```plain text\r\n`componentWillMount()` => UNSAFE_componentWillMount()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillMount()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n> 마운트가 발생하기 전에 호출된다. `render()`가 실행되기 전에 호출되므로, 이 메서드 내에서 `setState()`를 동기적으로 호출하더라도 추가적인 렌더링이 발생하지 않는다.\r\n\r\n- state 초기화의 경우 `constructor()` 사용하는 것이 좋다.\r\n- 이 메서드 내에서 부수 효과를 발생시키거나 구독 작업(subscription)을 수행하면 안 된다. (해당 경우에는 `componentDidMount()`를 대신 사용)\r\n- 이 메서드는 서버 렌더링에서 호출되는 유일한 생명주기 메서드\r\n\r\n## `getDerivedStateFromProps`\r\n\r\n> 최초 마운트 시와 갱신 시 모두(랜더링 될 때마다 호출된다.)에서 `render` 메서드 호출 직전에 호출하여 주로 state를 갱신하기 위한 객체를 반환하거나, `null`을 반환하여 아무 것도 갱신하지 않을\r\n> 수도 있다.\r\n\r\n- 시간의 흐름에 따라 변하는 `props`에 `state`가 의존하는 경우(변화하는 offset prop에따라 현재 scroll direction을 기록하거나 source props에 따라 외부 데이터를 로딩하는\r\n  경우, `props`로 받아온 것을 `state`에 넣어주고 싶을 때 등)에 사용.\r\n- !! 다른 생명주기 메소드와 달리 앞에 `static`을 필요로하고, this 롤 조회를 할 수 없다.\r\n- !! state보다는 prop 사용\r\n- 이 메서드는 컴포넌트 인스턴스에 접근할 수 없습니다. 인스턴스 접근이 필요하다면, class 정의 외부에서 컴포넌트의 props와 state에 대한 순수 함수를\r\n  추출하여 `getDerivedStateFromProps()`와 다른 클래스 메서드 간에 코드를 공유 및 재사용할 수 있다.\r\n- [`componentWillReceiveProps`](#componentWillReceiveProps)와 달리 이 메소드의 경우 부모 컴포넌트가 다시 렌더링을 발생시켰을 때에만 실행되고, 해당 컴포넌트 내에서\r\n  지역적인 `setState`가 발생한 경우에는 실행되지 않는다.\r\n\r\n```javascript\r\nstatic getDerivedStateFromProps(props, state)\r\n{\r\n\r\n}\r\n```\r\n\r\n## `render`\r\n\r\n- **<span className=\"red\">클래스 컴포넌트에서 반드시 구현되어야 하는 유일한 메소드이다.</span>**\r\n\r\n## `getSnapshotBeforeUpdate`\r\n\r\n> 가장 마지막으로 렌더링된 결과가 DOM 등에 반영되기 전에 호출되는 메서드로 컴포넌트가 DOM으로부터 스크롤 위치 등과 같은 정보를 이후 변경되기 전에 얻을 수 있다.\r\n\r\n- 이 생명주기 메서드가 반환하는 값은 `componentDidUpdate()`에서 세번째 인자로 전달됨\r\n- 잘 사용되지는 않지만 함수형 컴포넌트 + Hooke을 사용할때에는 해당 메서드를 대체할 수 있는 기능이 아직 없다.\r\n- 발생 시점: `render()` / `getSnapshotBeforeUpdate()` / 실제 DOM에 변화 발생 / `compoenetDidUpdate`\r\n\r\n```javascript\r\ngetSnapshotBeforeUpdate(prevProps, prevState);\r\n{\r\n}\r\n```\r\n\r\n## `componentDidMount`\r\n\r\n> - 컴포넌트가 화면에 나타났을 때 호출, 컴포넌트의 첫번째 렌더링이 완료된후 호출되는 메서드\r\n>\r\n> - 주로 D3, masonry 처럼 DOM을 사용해야하는 외부 라이브러리 연동을 하거나, 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch 등을 통하여 ajax 요청을 하거나, DOM 의\r\n>   속성을 읽거나 직접 변경하는 작업을 진행\r\n\r\n- 이미 `props`와 `state`가 바뀐 상태로 매개변수로 `prevProps`와 `prevState`를 받아 조회할 수 있다.\r\n\r\n## `componentWillReceiveProps`\r\n\r\n> 컴포넌트가 새로운 props를 받게 되었을 때 호출된다.\r\n\r\n- 주로 state가 props에 따라 변해야 하는 로직을 작성한다.\r\n- 새로 받게된 props는 nextProps로 조회할 수 있다.\r\n\r\n```plain text\r\n`componentWillReceiveProps()` => UNSAFE_componentWillReceiveProps()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillReceiveProps()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n## `shouldComponentUpdate`\r\n\r\n> `props` 또는 `state`가 새로운 값으로 갱신되어서 렌더링에 발생하기 직전에 호출\r\n>\r\n> 기본 값은 `true`로 초기 렌더링과 `forceUpdate()`가 사용될 때에는 호출되지 않는다.\r\n\r\n- 현재 `state` 또는 `props`의 변화가 컴포넌트의 출력 결과에 영향을 미치는지의 여부를 React에 알려주는 역할을 한다.\r\n- 기본 동작은 매 `state` 변화마다 다시 렌더링을 수행하는 것이며, 대부분의 경우 기본 동작에 따라야 한다.\r\n- 오직 성능 최적화를 목적으로 두고 있음 => <span className=\"red\">렌더링을 방지하는 목적으로 사용할 경우 버그로 이어질 수 있다.</span>\r\n- <span className=\"red\">내용을 직접 작성하는 대신에 <a href=\"https://ko.reactjs.org/docs/react-api.html#reactpurecomponent\">PureComponent</a>를 사용하는 것이 좋다. PureComponent는 props와 state에 대히여 얕은 비교를 수행하고, 해야 할 갱신 작업을 건너뛸 확률을 낮춰준다.</span>\r\n  > PureComponent\r\n  >\r\n  > React Component의 render() 함수가 동일한 `props`와 `state`에 대하여 동일한 결과를 렌더링한다면, React.PureComponent를 사용하여 경우에 따라 성능 향상을 누릴 수 있다.\r\n  >\r\n  > - <span className=\"yellow\"> `props`와 `state`가 간단할 것으로 예상될 때에만 PureComponent를 상속해야한다.</span>\r\n  > - `props`와 `state`가 복잡하다면 pureComponent 말고 `forceUpdate()` 활용하기\r\n  > - `React.PureComponent`의 `shouldComponentUpdate()`는 컴포넌트의 하위 트리에 대한 `props` 갱신 작업을 수행하지 않는다.\r\n- 만일 직접 작성하고 싶다면, `this.props`와 `nextProps`, `this.state`와 `nextState`를 비교한 뒤 `false`를 반환하는 것으로 React가 갱신 작업을 건너뛰게 할 수 있다.\r\n  <span className=\"red\">건너뛰다고 해서 자식 컴포넌트들이 각자가 가진 state의 변화에 따라 가시 렌더링을 수행하는 것을 막는 것은 아니다.</span>\r\n-\r\n\r\n```javascript\r\nshouldComponentUpdate(nextProps, nextState){}\r\n```\r\n\r\n## `componentWillUpdate`\r\n\r\n```plain text\r\n`componentWillUpdate()` => UNSAFE_componentWillUpdate()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillUpdate()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n> 새로운 `props` 또는 `state`가 전달되어서 렌더링이 이루어지기 전에 호출\r\n\r\n- React component가 없데이트 되기 전에 미리 준비할 수 있는 단계\r\n- 초기 렌더링 시에는 호출 X\r\n- !! 이 메서드 내에서는 `this.setState()` 호출할 수 없으며 React Component가 갱신되도록 만드는 그 어떤 작업(Redux Action dispatch)\r\n  도 `componentWillUpdate()`가 결과값을 반환하지 건에 이루어지면 안됨\r\n- 통상적으로 이 메서드는 `componentDidUpdate()`로 대체 가능\r\n- 이 메서드 내에서 DOM에 대한 정보를 얻는다면 (예를 들어, 스크롤 위치 저장하기), 해당 코드를 `getSnapshotBeforeUpdate()`로 이전하는 것이 가능\r\n\r\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\r\n\r\n## `componentDidUpdate`\r\n\r\n> 업데이트 직후에 호출되며 최초 렌더링(초기 렌더링) 시에는 호출 X\r\n\r\n- 컴포넌트가 갱신되었을 때 DOM을 조작하기 위해 아 메소드 활용에 용이\r\n\r\n- 이전과 현재의 `props`를 비교하여 네트워크 요청을 보내는 작업도 이 메소드를 사용하면 된다.\r\n\r\n- 컴포넌트에서 `getSnapshotBeforeUpdate()`를 구현한다면, 해당 메서드가 반환하는 값은 `componentDidUpdate()`에 `snapshot` 인자로 넘겨집니다. 반환값이 없다면 해당\r\n  인자는 `undefined`를 가집니다.\r\n\r\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\r\n\r\n```javascript\r\ncomponentDidUpdate(prevProps, prevState, snapshot);\r\n{\r\n}\r\n```\r\n\r\n- `componentDidUpdate()`에서 `setState()`를 즉시 호출할 수도 있지만, 조건문으로 감싸지 않으면 무한 반복이 발생할 수 있다.\r\n\r\n> 상위에서 내려온 prop을 그대로 `state`에 저장하는 것은 좋지 않으며, 그 대신 `prop`을 직접 사용하는 것이 좋다.\r\n\r\n```javascript\r\ncomponentDidUpdate(prevProps);\r\n{\r\n  if (this.props.userID !== prevProps.userID) {\r\n    this.fetchData(this.props.userID);\r\n  }\r\n}\r\n```\r\n\r\n## `componentWillUnmount`\r\n\r\n> 컴포넌트가 마운트 해제되어 제거되기 직전에 호출\r\n\r\n- 이 메서드 내에서 타이머 제거, 네트워크 요청 취소, `componentDidMount()` 내에서 생성된 구독 해제 등 필요한 모든 정리 작업을 수행\r\n- 이제 컴포넌트는 다시 렌더링되지 않으므로, `componentWillUnmount()` 내에서 `setState()`를 호출하면 안 된다. 컴포넌트 인스턴스가 마운트 해제되고 나면, <span className=\"red\">절대로 다시 마운트되지 않는다</span>\r\n\r\n# 참조\r\n\r\n- [리액트 공식 홈페이지 업데이트 로그](https://ko.reactjs.org/blog/2018/03/27/update-on-async-rendering.html)\r\n- [리액트 공식 홈페이지 Doc](https://ko.reactjs.org/docs/react-component.html)\r\n- [Velopert React 튜토리얼](https://velopert.com/3631)\r\n- [W3schools: React Lifecycle](https://www.w3schools.com/react/react_lifecycle.asp)\r\n","fields":{"slug":"blog/react/react_class_render"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/react_class_render.md"}],"tags":[{"tag":"React","count":4},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"JavaScript","count":2},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}