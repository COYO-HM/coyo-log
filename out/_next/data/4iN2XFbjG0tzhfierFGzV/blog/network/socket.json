{"pageProps":{"post":{"frontMatter":{"date":"2022-09-13T00:00:00","title":"Socket 통신","tags":["Network"],"description":" 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체","published":true},"body":"# 개념\r\n\r\n> <strong>Socket</strong>\r\n>\r\n> 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체이다.\r\n> 소켓을 통해 데이터 통로가 생성된다.\r\n>\r\n> - 소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.\r\n\r\n> **소켓 통신**\r\n> 클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식으리 양방향 통신\r\n> 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 서버 또한 클라이언트에게 요청을 보낼 수 있다.\r\n\r\n- 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓 통신이 더 적합하다.\r\n- 소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 자원이 소모된다.\r\n\r\n# 참조\r\n\r\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\r\n- [https://helloworld-88.tistory.com/215](https://helloworld-88.tistory.com/215)\r\n- [https://itstudy402.tistory.com/13](https://itstudy402.tistory.com/13)\r\n","fields":{"slug":"blog/network/socket"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/socket.mdx"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"개념\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#개념\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"개념\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(\"strong\", {\n        children: \"Socket\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체이다.\\r\\n소켓을 통해 데이터 통로가 생성된다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"소켓 통신\"\n        }), \"\\r\\n클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식으리 양방향 통신\\r\\n서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 서버 또한 클라이언트에게 요청을 보낼 수 있다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓 통신이 더 적합하다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 자원이 소모된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"참조\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#참조\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"참조\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://kotlinworld.com/75\",\n          children: \"https://kotlinworld.com/75\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://helloworld-88.tistory.com/215\",\n          children: \"https://helloworld-88.tistory.com/215\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://itstudy402.tistory.com/13\",\n          children: \"https://itstudy402.tistory.com/13\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"React","count":3},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"JavaScript","count":2},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}