{"pageProps":{"posts":[{"frontMatter":{"date":"2022-07-03T15:00:00","title":"MVC 패턴","tags":["programming"],"description":"MVC 패턴에 대해 알아보기","published":true},"body":"![MVC Pattern](https://user-images.githubusercontent.com/56423604/272326674-3b9eef48-2b00-44a6-9414-4ad370485fb1.png)\n\n<aside>\n  💡 애플리케이션의 구성 요소를 세 가지 역할로 구분하여 개발 프로세스에서 각각의 구성 요소에만 집중해서 개발할 수 있다.\n\n</aside>\n\n✔️ 장점: 재사용성과 확장성이 용이하다\n\n✔️ 단점: 애플리케이션이 복잡해질수록 모델과 뷰의 관계가 복잡해진다.\n\n## 모델(Model)\n\n---\n\n<span className={\"yellow\"}>애플리케이션의 데이터인 데이터베이스, 상수, 변수 등을 의미</span>\n\n예를 들어 사각형 모양의 박스 안에 글자가 들어 있다면 그 사각형 모양의 박스 위치 정보, 글자 내용, 글자 위치, 글자 포맷(utf-8 등)에 관한 정보를 모두 가지고 있어야 한다. 뷰에서 데이터를 생성하거나 수정하면 컨트롤러를 통해 모델을 생성하거나 갱신한다.\n\n## 뷰(View)\n\n---\n\ninputbox, checkbox, textarea 등 사용자 인터페이스 요소를 나타낸다. 즉 <span className={\"yellow\"}>모델을 기반으로 사용자가 볼 수 있는 화면을 의미한다.</span>\n\n✔️ 모델이 가지고 있는 정보를 따로 저장하지 않아야 한다. 단순히 사각형 모양 등 화면에 표시하는 정보만 가지고 있어야 한다.\n\n✔️ 변경이 일어나면 컨트롤러에 이를 전달해야 한다.\n\n## 컨트롤러(Controller)\n\n---\n\n하나 이상의 모델과 하나 이상의 뷰를 잇는 <span className={\"yellow\"}>다리 역할</span>을 하며 <span className={\"yellow\"}>이벤트 로직을 담당</span>한다. 모델과 뷰의 생명주기도 관리하며, 모델이나 뷰의 변경 통지를 받으면 이를 해석하여 각각의 구성 요소에 해당 내용에 대해 알려준다.\n\n## 예시\n\n---\n\n- React","fields":{"slug":"blog/post/cs/mvc-pattern"},"path":"blog/cs/mvc-pattern.mdx"}],"allTags":[{"tag":"all","count":23},{"tag":"javascript","count":9},{"tag":"react","count":8},{"tag":"typescript","count":6},{"tag":"network","count":4},{"tag":"git","count":3},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"husky","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn_berry","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"lodash","count":1},{"tag":"python3","count":1},{"tag":"nextjs","count":1},{"tag":"commitlint","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"emotion","count":1},{"tag":"gatsby","count":1},{"tag":"programming","count":1}],"category":"programming","page":0},"__N_SSG":true}