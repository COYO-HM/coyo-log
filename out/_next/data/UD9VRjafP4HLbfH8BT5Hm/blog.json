{"pageProps":{"posts":[{"frontMatter":{"date":"2023-02-22T00:00:00","title":"Github Page로 React 프로젝트 무료로 배포해보기","tags":["JavaScript","React","GithubPage"],"description":"Github Page로 CRA로 만든 프로젝트를 무료로 배포해보자","published":true},"body":"> Github Page\r\n>\r\n> github repository에 올린 `javaScript` 프로젝트를 배포하여 정적 웹 사이트를 무료로 호스팅할 수 있게 하는 서비스이다.\r\n\r\n이전에 `react`로 만든 프로젝트를 한번 Github Page로 배포해보자.\r\n\r\n# Project Github page 라이브러리 설치\r\n\r\n```jsx\r\nnpm i gh-pages --dev\r\n```\r\n\r\n# Package.json 설정하기\r\n\r\n`package.json` 에 다음과 같이 홈페이지 주소를 추가해준다.\r\n\r\n```jsx\r\n \"homepage\": \"https://사용자 아이디.github.io/레포지토리 이름/\",\r\n```\r\n\r\n![homepage](/static/images/blog/github-page-publish-01.png)\r\n\r\n배포를 위해 `deploy`를 추가해준다.\r\n\r\n![deploy](/static/images/blog/github-page-publish-02.png)\r\n\r\n다음 명령어를 입력해 배포해준다.\r\n\r\n```bash\r\nnpm run deploy\r\n```\r\n\r\n# Github Page Repository에서 설정\r\n\r\n- Repository 메뉴에서 Settings 메뉴로 들어가준다.\r\n\r\n![Settings](/static/images/blog/github-page-publish-03.png)\r\n\r\n- Settings 메뉴 중에 Pages 메뉴로 들어가면 Branch가 none으로 설정되어 있다.\r\n\r\n![Pages](/static/images/blog/github-page-publish-04.png)\r\n\r\n- 생성된 gh-pages 브랜치로 설정해준다.\r\n\r\n![gh-pages](/static/images/blog/github-page-publish-05.png)\r\n\r\n다음과 같이 배포된 것을 확인할 수 있다.\r\n\r\n![complete](/static/images/blog/github-page-publish-06.png)\r\n\r\n# 참조\r\n\r\n- [Github Docs](https://docs.github.com/ko/pages)\r\n","fields":{"slug":"blog/git/github-page-publish"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/git/github-page-publish.mdx"},{"frontMatter":{"date":"2023-02-13T00:00:00","title":"Intersection Observer API","tags":["JavaScript"],"description":"Intersection Observer API 공식문서 읽고 정리해보기","published":true},"body":"> Intersection Observer API\r\n> 타겟 요소와 상위 요소 또는 최상위 document의 viewport 사이의 intersection(교차 범위) 내의 변화를 비동기적으로 관찰하는 방법\r\n>\r\n> Intersection Observer API 는 그들이 감시하고자 하는 요소가 다른 요소의 viewport에 들어가거나 나갈 때 또는 요청한 부분만큼 두 요소의 교차 부분이 변경될 때 마다 실행될 콜백 함수를 등록할 수 있게 한다.\r\n>\r\n> ✔️ 정확히 몇 픽셀 겹쳤는지 알려주는 것이 아닌 N% 정도로 상호작용일 일어났을 경우 발생\r\n\r\n```tsx\r\nconst observer = new IntersectionObserver(callback, options); // 관찰자 초기화\r\n// callback과 options 두 가지 인수를 전달 받는다.\r\n\r\nobserver.observe(element); // 관찰 대상(element) 등록\r\n```\r\n\r\n# Callback\r\n\r\n> Intersection Observer API Callback을 생성 조건\r\n>\r\n> - target 요소와 root 요소 (기기의 뷰포트나 설정 요소)가 교차할 경우\r\n> - observer가 최초로 타겟을 관측하도록 요청받을 때마다.\r\n\r\ncallback은 entries와 observer를 두가지 인자로 받는다.\r\n\r\n```tsx\r\nconst callback = (\r\n  entries: IntersectionObserverEntry[],\r\n  observer: IntersectionObserver\r\n) => {};\r\n```\r\n\r\n## entries\r\n\r\n: `IntersectionObserverEntry` 의 배열로 `IntersectionObserverEntry`은 다음과 같은 속성들을 포함하고 있다.\r\n\r\n```tsx\r\ninterface IntersectionObserverEntry {\r\n  readonly boundingClientRect: DOMRectReadOnly;\r\n  readonly intersectionRatio: number;\r\n  readonly intersectionRect: DOMRectReadOnly;\r\n  readonly isIntersecting: boolean;\r\n  readonly rootBounds: DOMRectReadOnly | null;\r\n  readonly target: Element;\r\n  readonly time: DOMHighResTimeStamp;\r\n}\r\n```\r\n\r\n![entries](/static/images/blog/intersection-observer-API-01.png)\r\n\r\n- `boundingClientRect` : target의 DOMReactReadOnly를 반환한다. target의 `Element.getBoundingClientRect()`과 같은 값을 얻을 수 있다.\r\n  ![boundingClientRect](/static/images/blog/intersection-observer-API-02.png)\r\n- `intersectionRatio` : target과 root의 교차 영역 비율로 0.0과 1.0 사이의 숫자를 반환한다. (아래 options의 threshold와 관련있다.)\r\n\r\n- `intersectionRect` : target과 viewport인 root의 교차 영역에 대한 DOMReactReadOnly를 반환한다.\r\n  ![intersectionRect](/static/images/blog/intersection-observer-API-03.png)\r\n- `isIntersecting` : target이 지정한 root 영역에 교차 상태로 들어가는지 여부를 나타내주는 `boolean`값이다.\r\n\r\n  `true`: root 내부에 포함\r\n\r\n  `false`: root 내부에 포함되지 않음\r\n\r\n- `rootBounds` : root 요소에 대한 DOMReactReadOnly를 반환한다. 이는 아래의 `rootMargin`이 반영된 값이며 별도의 root 값을 선언하지 않을 경우 `null`을 반환한다.\r\n  ![rootBounds](/static/images/blog/intersection-observer-API-04.png)\r\n- `target` : target의 Element를 반환한다.\r\n\r\n- `time` : 문서가 작성된 시간을 기준으로 교차 상태 변경이 발생한 시간을 나타내는 `DOMHighResTimeStamp`을 반환한다.\r\n\r\n## observer\r\n\r\n> callback을 호출하는 IntersectionObserver\r\n\r\n```tsx\r\ninterface IntersectionObserver {\r\n  readonly root: Element | Document | null;\r\n  readonly rootMargin: string;\r\n  readonly thresholds: ReadonlyArray<number>;\r\n  disconnect(): void;\r\n  observe(target: Element): void;\r\n  takeRecords(): IntersectionObserverEntry[];\r\n  unobserve(target: Element): void;\r\n}\r\n```\r\n\r\n![observer](/static/images/blog/intersection-observer-API-05.png)\r\n\r\n# Options\r\n\r\n> observer callback이 호출되는 상황을 조작할 수 있다.\r\n\r\n```tsx\r\nlet options = {\r\n  root: document.querySelector(\"#scrollArea\"),\r\n  rootMargin: \"0px\",\r\n  threshold: 1.0,\r\n};\r\n\r\nlet observer = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `root`\r\n\r\n- target의 가시성을 판단하기 위한 Element 혹은 viewport\r\n- target의 조상 요소야 한다.\r\n- 만일 `document`의 루트 요소(기본값)를 기준으로 하기 위해서는 `null` 값 선언\r\n\r\n## `rootMargin`\r\n\r\n- `root` 가 가지는 `margin`으로 root의 범위를 확장하거나 축소할 수 있다.\r\n- 기본값은 0px으로 px와 % 단위 사용이 가능하며 반드시 단위를 꼭 입력해주어야 한다(0일지라도).\r\n- 음수값일 경우 root 요소 축소, 양수값일 경우 root 요소 확장한다.\r\n\r\n## `threshold`\r\n\r\n- target이 얼만큼 보여졌을 때 observer가 콜백을 실행할 건지 설정하는 option, 기본값은 0이다.\r\n  만일 target이 50% 만큼 요소가 보여졌을때 탐지하고 싶다면, 값을 0.5로 설정한다. 혹은 25% 단위로 실행되게 하고 싶다면, `[0, 0.25, 0.5, 0.75, 1]` 과 같은 배열을 설정한다.\r\n- 기본값 0은 target이 1px이라도 보일때 콜백이 실행된다.\r\n\r\n# Method\r\n\r\n## `IntersectionObserver()`\r\n\r\n> options을 참조하여 callback을 호출하는 관찰자를 생성 및 초기화한다.\r\n\r\n```tsx\r\nobserver = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `observe()`\r\n\r\n> 관찰 대상인 target을 설정하고 관찰을 설정한다.\r\n\r\n```jsx\r\nconst element = document.getElementById(\"target\");\r\nobserver.observe(element);\r\n```\r\n\r\n## `unobserve()`\r\n\r\n> 넘겨준 target의 관찰을 종료한다.\r\n\r\n```jsx\r\nobserver.unobserve(element);\r\n```\r\n\r\n## `disconnect()`\r\n\r\n> 해당 관찰자의 관찰을 모두 종료한다.\r\n\r\n```jsx\r\nobserver.disconnect();\r\n```\r\n\r\n# 참조\r\n\r\n- [MDN Intersection Observer API](https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API)\r\n","fields":{"slug":"blog/javascript/intersection-observer-API"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/intersection-observer-API.mdx"},{"frontMatter":{"date":"2023-01-26T00:00:00","title":"TypeSript에서 Redux-ToolKit 사용하기","tags":["React","TypeScript","Redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true},"body":"# 설치\r\n\r\n```bash\r\nnpm install @reduxjs/toolkit\r\n\r\nyarn add @reduxjs/toolkit\r\n\r\n```\r\n\r\n# Store\r\n\r\n```TypeScript\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nexport const store = configureStore({\r\n  reducer: {},\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n```\r\n\r\n`index.tsx`\r\n\r\n```TypeScript\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n```\r\n\r\n# `UseDispatch`, `UseSelector`\r\n\r\n```TypeScript\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { AppDispatch, RootState } from '../Store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n```\r\n\r\n# CreateSlice\r\n\r\n`ExampleReducer.ts`\r\n\r\n```TypeScript\r\ninterface IExampleState {\r\n\t// reducer type들 표시\r\n\tuserInfo: {name: string, id: string} | null\r\n}\r\n\r\nconst initialState: IExampleState = {\r\n\t// 초기 상태 설정\r\n\tuserInfo: null\r\n}\r\n\r\nexport const ExampleSlice = createSlice({\r\n\tname: 'EXAMPLE',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tupdateName: (state, action) => {\r\n\t\t\tstate.userInfo: {\r\n\t\t\t\t...state.userInfo,\r\n\t\t\t\taction.payload\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\r\n\t\t\tstate.userInfo = payload\r\n\t\t})\r\n\t}\r\n})\r\n\r\nexport const { updateName } = ExampleSlice.actions\r\nexport const ExampleReducer = {\r\n\texample: ExampleSlice.reducer\r\n}\r\n```\r\n\r\n# CreateAsyncThunk\r\n\r\n```TypeScript\r\nexport const getUserInfoAsync = createAsyncThunk<\r\n  {\r\n    /*성공시에 출력될 data의 type*/\r\n  },\r\n  {\r\n    /*param의 type*/\r\n  }\r\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\r\n```\r\n\r\n# 참조\r\n\r\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\r\n","fields":{"slug":"blog/redux/RTK-with-ts"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/redux/RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-11-14T00:00:00","title":"쿠키와 세션","tags":["Network"],"description":"쿠키와 세션의 각각 특징과 비교","published":true},"body":"[HTTP](https://coyo-hm.github.io/blog/network/http) 환경은 <span className=\"yellow\">connectionless, stateless</span>한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매변 확인하는 작업이 필요하다.\r\n\r\n또한 사이트가 커짐에 따라 장바구니, 위시리스트 등 클라이언트가 정보를 유지하는 stateful한 성격의 서비스가 점차 증가하였다.\r\n\r\n이러한 배경과 HTTP의 특징을 보완하고 하기 위해 쿠키와 세션을 하게 되었다.\r\n\r\n# 쿠키(Cookie)\r\n\r\n---\r\n\r\n> 쿠키\r\n> 클라이언트(브라우저)의 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일로 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.\r\n\r\n- 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다.\r\n- 클라이언트에 300개까지 쿠키 저장이 가능하다. 하나의 도메인당 20개의 값만 가질 수 있다. 하나의 쿠키값은 4KB까지 저장한다.\r\n- Response Header에 Set-Cookie 속성을 사용하면 클라이언트에 쿠키를 만들 수 있다.\r\n- 쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송\r\n\r\n## 쿠키의 구성 요소\r\n\r\n| 이름     | 각각의 쿠키를 구별하는 데 사용되는 이름 |\r\n| -------- | --------------------------------------- |\r\n| 값       | 쿠키의 이름과 관련된 값                 |\r\n| 유효시간 | 쿠키의 유지시간                         |\r\n| 도메인   | 쿠키를 전송할 도메인                    |\r\n| 경로     | 쿠키를 전송할 요청 경로                 |\r\n\r\n## 쿠키의 동작 방식\r\n\r\n1. 클라이언트가 페이지를 요청\r\n2. 서버에서 쿠키를 생성\r\n3. HTTP Header에 쿠키를 포함 시켜 응답\r\n4. 브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음\r\n5. 같은 요청을 할 경우 HTTP Header에 쿠키를 함꼐 보냄\r\n6. 서버에서 쿠키를 읽어 이전 상태 정보를 변경할 필요가 있을 때 쿠키를 업데이트하여 변경된 쿠키를 HTTP Header에 포함시켜 응답\r\n\r\n## 쿠키의 사용예시\r\n\r\n- 방문 사이트에서 로그인 시, \"아이디와 비밀번호를 저장하시겠습니까?\"\r\n- 쇼핑몰의 장바구니 기능\r\n- 자동로그인, 팝업에서 \"오늘 더 이상 이 창을 보지 않음\" 체크, 쇼핑몰의 장바구니\r\n\r\n# 세션(Session)\r\n\r\n---\r\n\r\n> 쿠키에 기반하지만 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 서버 측에서 관리\r\n\r\n- 서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지\r\n- 물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능\r\n- 사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.\r\n  → 즉 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인\r\n- 클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션 ID\r\n\r\n## 세션의 동작 방식\r\n\r\n1. 클라이언트가 서버에 접속 시 세션 ID를 발급 받음\r\n2. 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음\r\n3. 클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청\r\n4. 서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용\r\n5. 클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답\r\n\r\n## 세션의 특징\r\n\r\n- 각 클라이언트에게 고유 ID를 부여\r\n- 세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공\r\n- 보안 면에서 쿠키보다 우수\r\n- 사용자가 많아질수록 서버 메모리를 많이 차지하게 됨\r\n\r\n## 세션의 사용 예시\r\n\r\n- 로그인 같이 보안상 중요한 작업을 수행할 때 사용\r\n\r\n# 쿠키VS세션\r\n\r\n- 가장 큰 차이점은 사용자의 정보가 저장되는 위치입니다. 때문에 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용합니다.\r\n- 보안 면에서 세션이 더 우수하며, 요청 속도는 쿠키가 세션보다 더 빠릅니다. 그 이유는 세션은 서버의 처리가 필요하기 때문입니다.\r\n- 보안, 쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서 sessionid 만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 비교적 보안성이 좋습니다.\r\n- 라이프 사이클, 쿠키도 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아 있을 수 있다. 또한 만료기간을 넉넉하게 잡아두면 쿠키삭제를 할 때 까지 유지될 수도 있습니다.\r\n- 반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제됩니다. 예를 들어, 크롬에서 다른 탭을 사용해도 세션을 공유됩니다. 다른 브라우저를 사용하게 되면 다른 세션을 사용할 수 있습니다.\r\n- 속도, 쿠키에 정보가 있기 때문에 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 가집니다.\r\n\r\n<aside>\r\n❓ 세션을 사용하면 좋은데 왜 쿠키를 사용할까?\r\n\r\n세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문에 쿠키가 유리한 경우가 있다.\r\n\r\n</aside>\r\n","fields":{"slug":"blog/network/cookie-session"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/cookie-session.mdx"},{"frontMatter":{"date":"2022-10-23T00:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["React","TypeScript","Emotion","Gatsby"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"./add_table_of_contents_in_post.png","published":true},"body":"# 목차 생성하기\r\n\r\n## tableOfContents\r\n\r\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\r\n\r\n```graphql\r\n{\r\n  allMarkdownRemark {\r\n    nodes {\r\n      tableOfContents\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```plaintext\r\n{\r\n  \"data\": {\r\n    \"allMarkdownRemark\": {\r\n      \"nodes\": [\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        ...\r\n        ]\r\n    }\r\n  },\r\n  \"extensions\": {}\r\n}\r\n\r\n```\r\n\r\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\r\n\r\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\r\n\r\n```typescript\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n```\r\n\r\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\r\n\r\n`PostTableOfContents.tsx`\r\n\r\n```typescript\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface IPostTableOfContentsProps {\r\n  tableOfContents: string;\r\n}\r\n\r\nconst TableofContents = styled.div``;\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n  return (\r\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n  );\r\n};\r\n\r\nexport default PostTableOfContents;\r\n```\r\n\r\n`post_template.tsx`\r\n\r\n```typescript\r\nconst PostTemplate = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: IPostTemplateProps) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0];\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <PostTableOfContents tableOfContents={tableOfContents} />\r\n      <CommentWidget />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n```\r\n\r\n## 링크 동작시키기\r\n\r\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\r\n\r\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\r\n\r\n```shell\r\nyarn add gatsby-remark-autolink-headers\r\n\r\nnpm i gatsby-remark-autolink-headers\r\n```\r\n\r\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\r\n\r\n```javascript\r\n...\r\n{\r\n  resolve: `gatsby-transformer-remark`,\r\n    options\r\n:\r\n  {\r\n    plugins: [\r\n      ...\r\n        `gatsby-remark-autolink-headers`,\r\n    ],\r\n  }\r\n}\r\n,\r\n...\r\n```\r\n\r\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\r\n\r\n# 목차 CSS 적용하기\r\n\r\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n`;\r\n```\r\n\r\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\r\n씩 추가하였다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n\r\n  * {\r\n    list-style: none;\r\n    padding-bottom: 5px;\r\n\r\n    &:last-child {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n\r\n  * > ul > li {\r\n    padding-left: 5px;\r\n  }\r\n`;\r\n```\r\n\r\n# 페이지 맨 위/아래로 가기 버튼 추가하기\r\n\r\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\r\n\r\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\r\n\r\n```typescript\r\nimport styled from '@emotion/styled'\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n...\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n    const onClickUpButton = useCallback(() => {\r\n    window?.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const onClickDownButton = useCallback(() => {\r\n    window?.scrollTo(0, document.body.scrollHeight)\r\n  }, [])\r\n  return (\r\n    <TableofContentsWrapper>\r\n      <UpButton>\r\n        <FontAwesomeIcon icon={faAngleUp} />\r\n      </UpButton>\r\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n      <DownButton>\r\n        <FontAwesomeIcon icon={faAngleDown} />\r\n      </DownButton>\r\n    </TableofContentsWrapper>\r\n  )\r\n}\r\n```\r\n\r\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\r\n","fields":{"slug":"blog/gatsby/add_table_of_contents_in_gatsby"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/gatsby/add_table_of_contents_in_gatsby.mdx"},{"frontMatter":{"date":"2022-09-18T00:00:00","title":"HTTP 통신","tags":["Network"],"description":"HTML 파일을 전송하는 프로토콜","published":true},"body":"# 개념\r\n\r\n> <strong>HTTP(HyperText Transfer Protocol)</strong>\r\n>\r\n> HTML 파일을 전송하는 프로토콜으로 초기에는 HTML 파일 전송을 목적으로 만들어졌으나 현재는 JSON, image 파일 등도 전송한다.\r\n> 클라이언트에서 서버로 요청을 보내고 서버가 클라이언트의 요청에 응답하는 방식으로 통신이 이루어진다.\r\n> 클라이언트 요청이 있을 때 서버가 응답하는 단방향 통신이다.\r\n\r\n<aside>\r\n\r\n초기에 서버는 응답 후 클라이언트의 Connection을 곧바로 끊어버렸으나, 현재는 성능상의 이유로 Keep Alive 옵션을 통해 일정 기간 동안 클라이언트와 Connection을 유지하는 방식으로 통신이 가능해졌다.\r\n\r\n</aside>\r\n\r\n- 보통 브라우저인 클라이언트에 의해 전송되는 메세지를 요청(requests)라고 부르며, 그에 대한 서버에서 응답으로 전송되는 메시지를 응답(responses)라고 부른다.\r\n- 무상태성(Stateless): HTTP는 state를 저장하지 않늗다. 동시에 통신이 끝나면 상태를 유지하지 않는 특징\r\n- 비연결성(Connectionless): 클라이언트의 요청에 서버가 응답하고, 그 응답을 클라이언트가 받으면 연결을 끊어버리는 특징\r\n\r\n# 참조\r\n\r\n- [https://developer.mozilla.org/ko/docs/Web/HTTP](https://developer.mozilla.org/ko/docs/Web/HTTP)\r\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\r\n","fields":{"slug":"blog/network/http"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/http.mdx"},{"frontMatter":{"date":"2022-09-13T00:00:00","title":"Socket 통신","tags":["Network"],"description":" 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체","published":true},"body":"# 개념\r\n\r\n> <strong>Socket</strong>\r\n>\r\n> 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체이다.\r\n> 소켓을 통해 데이터 통로가 생성된다.\r\n>\r\n> - 소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.\r\n\r\n> **소켓 통신**\r\n> 클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식으리 양방향 통신\r\n> 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 서버 또한 클라이언트에게 요청을 보낼 수 있다.\r\n\r\n- 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓 통신이 더 적합하다.\r\n- 소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 자원이 소모된다.\r\n\r\n# 참조\r\n\r\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\r\n- [https://helloworld-88.tistory.com/215](https://helloworld-88.tistory.com/215)\r\n- [https://itstudy402.tistory.com/13](https://itstudy402.tistory.com/13)\r\n","fields":{"slug":"blog/network/socket"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/network/socket.mdx"},{"frontMatter":{"date":"2022-09-05T00:00:00","title":"JavaScript map과 forEach 비교","tags":["JavaScript"],"description":"JavaScript map과 forEach 비교하기","published":true},"body":"<aside>\r\n💡\r\n\r\n`forEach` VS `map`\r\n\r\n- `forEach`: for문 대체 함수로 원본 배열을 변경하지 않고 항상 `return` 값은 `undefined`이다.\r\n- `map` : 콜백 함수의 `return` 값으로 구성된 새로운 배열을 반환한다.\r\n\r\n</aside>\r\n\r\n# **Array.prototype.forEach**\r\n\r\n---\r\n\r\n> `forEach()`\r\n> for문을 대체할 수 있는 함수로 `forEach` method는 자신의 내부에서 반복문을 실행한다.\r\n> 내부에서 반복문을 통해 자신을 호출한 배열을 순회하면서 수행해야할 처리를 콜백 함수로 전달받아 반복 호출한다.\r\n\r\n- `forEach` method는 원본 배열을 변경하지 않는다.\r\n- `forEach` method의 반환값은 언제나 `undefined`이다.\r\n\r\n```jsx\r\nconst num = [1, 2, 3];\r\nconst result = [];\r\n\r\nnum.forEach((n) => result.push(n + 10));\r\n\r\nconsole.log(result); // output: [11, 12, 13]\r\n```\r\n\r\n# **Array.prototype.map**\r\n\r\n---\r\n\r\n> `map()`\r\n> 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달받은 콜백 함수를 반복 호출한다.\r\n> 그리고 콜백 함수의 반환값들로 구성된 <span className=\"yellow\">새로운 배열을 반환</span>한다.\r\n\r\n- `map` method는 원본 배열을 변경하지 않는다. 단,`callback`함수에 의해서 변형될 수는 있다.\r\n\r\n  ```jsx\r\n  var kvArray = [\r\n    { key: 1, value: 10 },\r\n    { key: 2, value: 20 },\r\n    { key: 3, value: 30 },\r\n  ];\r\n\r\n  var reformattedArray = kvArray.map(function (obj) {\r\n    var rObj = {};\r\n    rObj[obj.key] = obj.value;\r\n    return rObj;\r\n  });\r\n  // reformattedArray는 [{1:10}, {2:20}, {3:30}]\r\n\r\n  // kvArray는 그대로\r\n  // [{key:1, value:10},\r\n  //  {key:2, value:20},\r\n  //  {key:3, value: 30}]\r\n  ```\r\n\r\n- `map` method에서는 원본 배열의 원소와 일대일 mapping이 진행되기 때문에 원본 배열과 mapping 후 배열의 길이는 항상 같다.\r\n- `map`은`callback`함수를 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열을 만든다.`callback`함수는 (`undefined`도 포함해서)배열 값이 들어있는 인덱스에\r\n  대해서만 호출된다.\r\n  즉, 값이 삭제되거나 아직 값이 할당/정의되지 않은 인덱스에 대해서는 호출되지 않는다.\r\n- String에도 사용 가능\r\n  ```jsx\r\n  var map = Array.prototype.map;\r\n  var a = map.call(\"Hello World\", function (x) {\r\n    return x.charCodeAt(0);\r\n  });\r\n  // a는 이제 [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r\n  ```\r\n\r\n# 참조\r\n\r\n- [MDN Array.prototype.map()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n- [MDN Array.prototype.forEach()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n","fields":{"slug":"blog/javascript/forEach-map"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/forEach-map.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\r\n\r\n## `uniq`\r\n\r\n> 배열 원소 중복 제거\r\n>\r\n> ```tsx\r\n> uniq<T>(array: List<T> | null | undefined): T[];\r\n> // arg: array\r\n> // return: array\r\n> ```\r\n\r\n```tsx\r\nconst siteList = [0, 1, 1, 2];\r\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\r\n```\r\n\r\n# Collection 관련 함수\r\n\r\n## `sortby`\r\n\r\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\r\n>\r\n> ```tsx\r\n> sortBy(collection, [(iteratees = [_.identity])]);\r\n>\r\n> //collection: 정렬 대상\r\n> //[iteratees=[_.identity]] 정렬 기준\r\n>\r\n> // => return 정렬된 새로운 array\r\n> ```\r\n\r\n- 여러 개의 필드값으로도 정렬 가능\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\r\n```\r\n\r\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\r\n```\r\n\r\n```tsx\r\nconst users = [\r\n  { user: \"Fred\", age: 48 },\r\n  { user: \"Barney\", age: 36 },\r\n  { user: \"Fred\", age: 40 },\r\n  { user: \"Barney\", age: 34 },\r\n];\r\n\r\nconst sortByFunc = sortBy(users, [\r\n  function (o) {\r\n    return o.user;\r\n  },\r\n]);\r\nconsole.log(sortByFunc);\r\n// => objects for [['Barney', 36], ['Barney', 34], ['Fred', 48], ['Fred', 40]]\r\n\r\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\r\nconsole.log(sortByTwoArg);\r\n// => objects for [['Barney', 34], ['Barney', 36], ['Fred', 40], ['Fred', 48]]\r\n```\r\n\r\n# Lang 관련 함수\r\n\r\n## `clonedeep`\r\n\r\n> 객체 복사\r\n\r\n# Object 관련 함수\r\n\r\n## `get`\r\n\r\n> 객체에서 원하는 값 찾기\r\n\r\n```javascript\r\nget(찾을 장소, 가져올 키, 기본 값);\r\n```\r\n\r\n# 참조\r\n\r\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\r\n","fields":{"slug":"blog/react/lodash"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/lodash.mdx"}],"tags":[{"tag":"JavaScript","count":4},{"tag":"React","count":4},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"GithubPage","count":1},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}