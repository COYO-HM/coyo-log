{"pageProps":{"posts":[{"frontMatter":{"date":"2022-09-05T00:00:00","title":"JavaScript map과 forEach 비교","tags":["JavaScript"],"description":"JavaScript map과 forEach 비교하기","published":true},"body":"<aside>\r\n💡\r\n\r\n`forEach` VS `map`\r\n\r\n- `forEach`: for문 대체 함수로 원본 배열을 변경하지 않고 항상 `return` 값은 `undefined`이다.\r\n- `map` : 콜백 함수의 `return` 값으로 구성된 새로운 배열을 반환한다.\r\n\r\n</aside>\r\n\r\n# **Array.prototype.forEach**\r\n\r\n---\r\n\r\n> `forEach()`\r\n> for문을 대체할 수 있는 함수로 `forEach` method는 자신의 내부에서 반복문을 실행한다.\r\n> 내부에서 반복문을 통해 자신을 호출한 배열을 순회하면서 수행해야할 처리를 콜백 함수로 전달받아 반복 호출한다.\r\n\r\n- `forEach` method는 원본 배열을 변경하지 않는다.\r\n- `forEach` method의 반환값은 언제나 `undefined`이다.\r\n\r\n```jsx\r\nconst num = [1, 2, 3];\r\nconst result = [];\r\n\r\nnum.forEach((n) => result.push(n + 10));\r\n\r\nconsole.log(result); // output: [11, 12, 13]\r\n```\r\n\r\n# **Array.prototype.map**\r\n\r\n---\r\n\r\n> `map()`\r\n> 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달받은 콜백 함수를 반복 호출한다.\r\n> 그리고 콜백 함수의 반환값들로 구성된 <span className=\"yellow\">새로운 배열을 반환</span>한다.\r\n\r\n- `map` method는 원본 배열을 변경하지 않는다. 단,`callback`함수에 의해서 변형될 수는 있다.\r\n\r\n  ```jsx\r\n  var kvArray = [\r\n    { key: 1, value: 10 },\r\n    { key: 2, value: 20 },\r\n    { key: 3, value: 30 },\r\n  ];\r\n\r\n  var reformattedArray = kvArray.map(function (obj) {\r\n    var rObj = {};\r\n    rObj[obj.key] = obj.value;\r\n    return rObj;\r\n  });\r\n  // reformattedArray는 [{1:10}, {2:20}, {3:30}]\r\n\r\n  // kvArray는 그대로\r\n  // [{key:1, value:10},\r\n  //  {key:2, value:20},\r\n  //  {key:3, value: 30}]\r\n  ```\r\n\r\n- `map` method에서는 원본 배열의 원소와 일대일 mapping이 진행되기 때문에 원본 배열과 mapping 후 배열의 길이는 항상 같다.\r\n- `map`은`callback`함수를 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열을 만든다.`callback`함수는 (`undefined`도 포함해서)배열 값이 들어있는 인덱스에\r\n  대해서만 호출된다.\r\n  즉, 값이 삭제되거나 아직 값이 할당/정의되지 않은 인덱스에 대해서는 호출되지 않는다.\r\n- String에도 사용 가능\r\n  ```jsx\r\n  var map = Array.prototype.map;\r\n  var a = map.call(\"Hello World\", function (x) {\r\n    return x.charCodeAt(0);\r\n  });\r\n  // a는 이제 [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r\n  ```\r\n\r\n# 참조\r\n\r\n- [MDN Array.prototype.map()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n- [MDN Array.prototype.forEach()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n","fields":{"slug":"blog/javascript/forEach-map"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/forEach-map.mdx"},{"frontMatter":{"date":"2022-02-13T00:00:00","title":"Intersection Observer API","tags":["JavaScript"],"description":"Intersection Observer API 공식문서 읽고 정리해보기","published":true},"body":"> Intersection Observer API\r\n> 타겟 요소와 상위 요소 또는 최상위 document의 viewport 사이의 intersection(교차 범위) 내의 변화를 비동기적으로 관찰하는 방법\r\n>\r\n> Intersection Observer API 는 그들이 감시하고자 하는 요소가 다른 요소의 viewport에 들어가거나 나갈 때 또는 요청한 부분만큼 두 요소의 교차 부분이 변경될 때 마다 실행될 콜백 함수를 등록할 수 있게 한다.\r\n>\r\n> ✔️ 정확히 몇 픽셀 겹쳤는지 알려주는 것이 아닌 N% 정도로 상호작용일 일어났을 경우 발생\r\n\r\n```tsx\r\nconst observer = new IntersectionObserver(callback, options); // 관찰자 초기화\r\n// callback과 options 두 가지 인수를 전달 받는다.\r\n\r\nobserver.observe(element); // 관찰 대상(element) 등록\r\n```\r\n\r\n# Callback\r\n\r\n> Intersection Observer API Callback을 생성 조건\r\n>\r\n> - target 요소와 root 요소 (기기의 뷰포트나 설정 요소)가 교차할 경우\r\n> - observer가 최초로 타겟을 관측하도록 요청받을 때마다.\r\n\r\ncallback은 entries와 observer를 두가지 인자로 받는다.\r\n\r\n```tsx\r\nconst callback = (\r\n  entries: IntersectionObserverEntry[],\r\n  observer: IntersectionObserver\r\n) => {};\r\n```\r\n\r\n## entries\r\n\r\n: `IntersectionObserverEntry` 의 배열로 `IntersectionObserverEntry`은 다음과 같은 속성들을 포함하고 있다.\r\n\r\n```tsx\r\ninterface IntersectionObserverEntry {\r\n  readonly boundingClientRect: DOMRectReadOnly;\r\n  readonly intersectionRatio: number;\r\n  readonly intersectionRect: DOMRectReadOnly;\r\n  readonly isIntersecting: boolean;\r\n  readonly rootBounds: DOMRectReadOnly | null;\r\n  readonly target: Element;\r\n  readonly time: DOMHighResTimeStamp;\r\n}\r\n```\r\n\r\n![entries](/static/images/blog/intersection-observer-API-01.png)\r\n\r\n- `boundingClientRect` : target의 DOMReactReadOnly를 반환한다. target의 `Element.getBoundingClientRect()`과 같은 값을 얻을 수 있다.\r\n  ![boundingClientRect](/static/images/blog/intersection-observer-API-02.png)\r\n- `intersectionRatio` : target과 root의 교차 영역 비율로 0.0과 1.0 사이의 숫자를 반환한다. (아래 options의 threshold와 관련있다.)\r\n\r\n- `intersectionRect` : target과 viewport인 root의 교차 영역에 대한 DOMReactReadOnly를 반환한다.\r\n  ![intersectionRect](/static/images/blog/intersection-observer-API-03.png)\r\n- `isIntersecting` : target이 지정한 root 영역에 교차 상태로 들어가는지 여부를 나타내주는 `boolean`값이다.\r\n\r\n  `true`: root 내부에 포함\r\n\r\n  `false`: root 내부에 포함되지 않음\r\n\r\n- `rootBounds` : root 요소에 대한 DOMReactReadOnly를 반환한다. 이는 아래의 `rootMargin`이 반영된 값이며 별도의 root 값을 선언하지 않을 경우 `null`을 반환한다.\r\n  ![rootBounds](/static/images/blog/intersection-observer-API-04.png)\r\n- `target` : target의 Element를 반환한다.\r\n\r\n- `time` : 문서가 작성된 시간을 기준으로 교차 상태 변경이 발생한 시간을 나타내는 `DOMHighResTimeStamp`을 반환한다.\r\n\r\n## observer\r\n\r\n> callback을 호출하는 IntersectionObserver\r\n\r\n```tsx\r\ninterface IntersectionObserver {\r\n  readonly root: Element | Document | null;\r\n  readonly rootMargin: string;\r\n  readonly thresholds: ReadonlyArray<number>;\r\n  disconnect(): void;\r\n  observe(target: Element): void;\r\n  takeRecords(): IntersectionObserverEntry[];\r\n  unobserve(target: Element): void;\r\n}\r\n```\r\n\r\n![observer](/static/images/blog/intersection-observer-API-05.png)\r\n\r\n# Options\r\n\r\n> observer callback이 호출되는 상황을 조작할 수 있다.\r\n\r\n```tsx\r\nlet options = {\r\n  root: document.querySelector(\"#scrollArea\"),\r\n  rootMargin: \"0px\",\r\n  threshold: 1.0,\r\n};\r\n\r\nlet observer = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `root`\r\n\r\n- target의 가시성을 판단하기 위한 Element 혹은 viewport\r\n- target의 조상 요소야 한다.\r\n- 만일 `document`의 루트 요소(기본값)를 기준으로 하기 위해서는 `null` 값 선언\r\n\r\n## `rootMargin`\r\n\r\n- `root` 가 가지는 `margin`으로 root의 범위를 확장하거나 축소할 수 있다.\r\n- 기본값은 0px으로 px와 % 단위 사용이 가능하며 반드시 단위를 꼭 입력해주어야 한다(0일지라도).\r\n- 음수값일 경우 root 요소 축소, 양수값일 경우 root 요소 확장한다.\r\n\r\n## `threshold`\r\n\r\n- target이 얼만큼 보여졌을 때 observer가 콜백을 실행할 건지 설정하는 option, 기본값은 0이다.\r\n  만일 target이 50% 만큼 요소가 보여졌을때 탐지하고 싶다면, 값을 0.5로 설정한다. 혹은 25% 단위로 실행되게 하고 싶다면, `[0, 0.25, 0.5, 0.75, 1]` 과 같은 배열을 설정한다.\r\n- 기본값 0은 target이 1px이라도 보일때 콜백이 실행된다.\r\n\r\n# Method\r\n\r\n## `IntersectionObserver()`\r\n\r\n> options을 참조하여 callback을 호출하는 관찰자를 생성 및 초기화한다.\r\n\r\n```tsx\r\nobserver = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `observe()`\r\n\r\n> 관찰 대상인 target을 설정하고 관찰을 설정한다.\r\n\r\n```jsx\r\nconst element = document.getElementById(\"target\");\r\nobserver.observe(element);\r\n```\r\n\r\n## `unobserve()`\r\n\r\n> 넘겨준 target의 관찰을 종료한다.\r\n\r\n```jsx\r\nobserver.unobserve(element);\r\n```\r\n\r\n## `disconnect()`\r\n\r\n> 해당 관찰자의 관찰을 모두 종료한다.\r\n\r\n```jsx\r\nobserver.disconnect();\r\n```\r\n\r\n# 참조\r\n\r\n- [MDN Intersection Observer API](https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API)\r\n","fields":{"slug":"blog/javascript/intersection-observer-API"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/intersection-observer-API.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\r\n\r\n## `uniq`\r\n\r\n> 배열 원소 중복 제거\r\n>\r\n> ```tsx\r\n> uniq<T>(array: List<T> | null | undefined): T[];\r\n> // arg: array\r\n> // return: array\r\n> ```\r\n\r\n```tsx\r\nconst siteList = [0, 1, 1, 2];\r\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\r\n```\r\n\r\n# Collection 관련 함수\r\n\r\n## `sortby`\r\n\r\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\r\n>\r\n> ```tsx\r\n> sortBy(collection, [(iteratees = [_.identity])]);\r\n>\r\n> //collection: 정렬 대상\r\n> //[iteratees=[_.identity]] 정렬 기준\r\n>\r\n> // => return 정렬된 새로운 array\r\n> ```\r\n\r\n- 여러 개의 필드값으로도 정렬 가능\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\r\n```\r\n\r\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\r\n```\r\n\r\n```tsx\r\nconst users = [\r\n  { user: \"Fred\", age: 48 },\r\n  { user: \"Barney\", age: 36 },\r\n  { user: \"Fred\", age: 40 },\r\n  { user: \"Barney\", age: 34 },\r\n];\r\n\r\nconst sortByFunc = sortBy(users, [\r\n  function (o) {\r\n    return o.user;\r\n  },\r\n]);\r\nconsole.log(sortByFunc);\r\n// => objects for [['Barney', 36], ['Barney', 34], ['Fred', 48], ['Fred', 40]]\r\n\r\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\r\nconsole.log(sortByTwoArg);\r\n// => objects for [['Barney', 34], ['Barney', 36], ['Fred', 40], ['Fred', 48]]\r\n```\r\n\r\n# Lang 관련 함수\r\n\r\n## `clonedeep`\r\n\r\n> 객체 복사\r\n\r\n# Object 관련 함수\r\n\r\n## `get`\r\n\r\n> 객체에서 원하는 값 찾기\r\n\r\n```javascript\r\nget(찾을 장소, 가져올 키, 기본 값);\r\n```\r\n\r\n# 참조\r\n\r\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\r\n","fields":{"slug":"blog/react/lodash"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/lodash.mdx"}],"tags":[{"tag":"React","count":3},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"JavaScript","count":3},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}],"tag":"JavaScript"},"__N_SSG":true}