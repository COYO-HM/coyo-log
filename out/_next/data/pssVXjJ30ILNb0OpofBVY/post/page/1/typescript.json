{"pageProps":{"posts":[{"frontMatter":{"date":"2022-09-19T00:00:00","title":"Axios Config 기본값 정리","tags":["react","typescript","axios","javascript"],"description":"Axios Config 기본값 정리","published":true,"path":"axios-config.mdx","key":"axios-config"},"body":"> 모든 요청에 적용될 config 기본값을 지정할 수 있다.\n>\n\n# **전역 Axios 기본값**\n\n```tsx\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n# 커스텀 인스턴스 기본값\n\n## 인스턴스를 생성할때 config 기본값 설정하기\n\n```tsx\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n```\n\n## 인스턴스를 생성할때 config 기본값 설정하기: TypeScript에서 생성하기\n\n```tsx\nimport axios, { AxiosRequestConfig } from 'axios';\n\nconst axiosConfig: AxiosRequestConfig = {\n  baseURL: 'BASE_URL'\n}\nconst instance = axios.create(axiosConfig);\n```\n\n## 인스턴스를 만든 후 기본값 변경하기\n\n```tsx\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n## 인스턴스 사용하기\n\n```tsx\nconst response = await instance.post('login', params);\n```\n\n# **Config 우선 순위**\n\nConfig는 우선 순위에 따라 병합된다.\n\n라이브러리에서의 기본값 <  인스턴스의 `defaults` 속성 < 요청의 `config` 인자를 순서대로 우선순위가 낮다.\n\n```tsx\n// 라이브러리에서 제공하는 config 기본값을 사용하여 인스턴스 만들기\n// 이 때 timeout 값은 라이브러리의 기본값인 '0'입니다.\nconst instance = axios.create();\n\n// 라이브러리에 대한 timeout 값 재정의\n// 이제 모든 요청은 시간 초과 전 2.5초 대기하는 인스턴스를 사용합니다.\ninstance.defaults.timeout = 2500;\n\n// 시간이 오래 걸리는 요청에 대한 timeout 값 재정의\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n# 참조\n\n- [Axios Docs Config 기본값](https://axios-http.com/kr/docs/config_defaults)","fields":{"slug":"axios-config"},"path":"axios-config.mdx"},{"frontMatter":{"date":"2022-06-25T00:00:00","title":"Styled Components Global Style 설정하기","tags":["styled_components","css","react","typescript"],"description":"Styled Components 전체 프로젝트에 적용되는  Global Style 설정하기","published":true,"path":"styled-components-global-style.mdx","key":"styled-components-global-style"},"body":"> `createGlobalStyle`\n하나의 컴포넌트를 만들 수 있게 해주는데 랜더링이 될 때, 그 컴포넌트는 전연 스코프에 스타일들을 올려준다.\n>\n\n```tsx\nimport { createGlobalStyle } from \"styled-components\";\nimport Router from \"./Router\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  //global style 작성\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n```\n\n# Global Style 지정\n\n`globalStyle.tsx`\n\n<aside>\n💡 Reset CSS\n[https://github.com/zacanger/styled-reset/blob/master/src/post.ts](https://github.com/zacanger/styled-reset/blob/master/src/post.ts)\n\n</aside>\n\n```tsx\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  font-family: 'Source Sans Pro', sans-serif;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n  margin: 0;\n  background: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\na{\n  text-decoration: none;\n  color: inherit;\n}\n*{\n  box-sizing: border-box;\n}\n`;\n```\n\n# Global Style 적용\n\n`App.tsx`\n\n```tsx\nimport React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { GlobalStyle } from \"./style/globalStyle\";\nimport { ThemeProvider } from \"styled-components\";\n\nfunction App() {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Routes>\n          <Route path={\"/\"} element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n```","fields":{"slug":"styled-components-global-style"},"path":"styled-components-global-style.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["react","typescript","lodash","javascript"],"description":"자주 사용하는 lodash 함수 정리","published":true,"path":"lodash.mdx","key":"lodash"},"body":"# Array 관련 함수\n\n## `uniq`\n\n> 배열 원소 중복 제거\n>\n> ```tsx\n> uniq<T>(array: List<T> | null | undefined): T[];\n> // arg: array\n> // return: array\n> ```\n\n```tsx\nconst siteList = [0, 1, 1, 2];\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\n```\n\n# Collection 관련 함수\n\n## `sortby`\n\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\n>\n> ```tsx\n> sortBy(collection, [(iteratees = [_.identity])]);\n>\n> //collection: 정렬 대상\n> //[iteratees=[_.identity]] 정렬 기준\n>\n> // => return 정렬된 새로운 array\n> ```\n\n- 여러 개의 필드값으로도 정렬 가능\n\n```javascript\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\n```\n\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\n\n```javascript\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\n```\n\n```tsx\nconst users = [\n  { user: \"Fred\", age: 48 },\n  { user: \"Barney\", age: 36 },\n  { user: \"Fred\", age: 40 },\n  { user: \"Barney\", age: 34 },\n];\n\nconst sortByFunc = sortBy(users, [\n  function (o) {\n    return o.user;\n  },\n]);\nconsole.log(sortByFunc);\n// => objects for [['Barney', 36], ['Barney', 34], ['Fred', 48], ['Fred', 40]]\n\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\nconsole.log(sortByTwoArg);\n// => objects for [['Barney', 34], ['Barney', 36], ['Fred', 40], ['Fred', 48]]\n```\n\n# Lang 관련 함수\n\n## `clonedeep`\n\n> 객체 복사\n\n# Object 관련 함수\n\n## `get`\n\n> 객체에서 원하는 값 찾기\n\n```javascript\nget(찾을 장소, 가져올 키, 기본 값);\n```\n\n# 참조\n\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\n","fields":{"slug":"lodash"},"path":"lodash.mdx"}],"allTags":[{"tag":"all","count":31},{"tag":"react","count":9},{"tag":"typescript","count":9},{"tag":"javascript","count":9},{"tag":"network","count":5},{"tag":"nextjs","count":4},{"tag":"husky","count":3},{"tag":"git","count":3},{"tag":"yarn","count":2},{"tag":"emotion","count":2},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn_berry","count":1},{"tag":"vite","count":1},{"tag":"giscus","count":1},{"tag":"utterances","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"python3","count":1},{"tag":"gtag","count":1},{"tag":"google_analytics","count":1},{"tag":"computer_science","count":1},{"tag":"programming","count":1},{"tag":"lodash","count":1},{"tag":"commitlint","count":1},{"tag":"github","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"gatsby","count":1},{"tag":"framer_motion","count":1},{"tag":"tailwind","count":1}],"selectedTag":"typescript","page":1},"__N_SSG":true}