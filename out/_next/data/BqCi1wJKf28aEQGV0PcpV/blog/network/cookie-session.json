{"pageProps":{"post":{"frontMatter":{"date":"2022-11-14T00:00:00","title":"쿠키와 세션","tags":["Network"],"description":"쿠키와 세션의 각각 특징과 비교","published":true},"body":"[HTTP](https://coyo-hm.github.io/blog/network/http) 환경은 <span className=\"yellow\">connectionless, stateless</span>한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인하는 작업이 필요하다.\n또한 사이트가 커짐에 따라 장바구니, 위시리스트 등 클라이언트가 정보를 유지하는 stateful한 성격의 서비스가 점차 증가하였다.\n이러한 배경과 HTTP의 특징을 보완하고 하기 위해 쿠키와 세션을 하게 되었다.\n\n# 쿠키(Cookie)\n\n> 쿠키\n> 클라이언트(브라우저)의 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일로 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.\n\n- 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다.\n- 클라이언트에 300개까지 쿠키 저장이 가능하다. 하나의 도메인당 20개의 값만 가질 수 있다. 하나의 쿠키값은 4KB까지 저장한다.\n- Response Header에 Set-Cookie 속성을 사용하면 클라이언트에 쿠키를 만들 수 있다.\n- 쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다(상당한 트래픽을 발생시킨다).\n\n## 쿠키의 구성 요소\n\n| 이름(name) | 각각의 쿠키를 구별하는 데 사용되는 이름                                                                      |\n| --- |---------------------------------------------------------------------------------------------|\n| 값(value) | 쿠키의 저장된 값                                                                                   |\n| 유효기간(expires) | 쿠키의 유지시간<br/>쿠키에 만료일이 포함되어 있으면 영구적 쿠키로 간주 데이터를 유지한다.<br/>max-age 를 통해 지정된 만료일이 되면 쿠키를 삭제한다. |\n| 도메인(domain) | 쿠키가 사용되는 도메인<br/>해당 값이 현재의 도메인과 다를 경우 타사의 쿠키로 간주하여 브라우저가 거부한다.                              |\n| 경로(path) | 쿠키를 반환할 경로                                                                                  |\n\n\n## 쿠키의 동작 방식\n\n1. 클라이언트가 페이지를 요청\n2. 서버에서 쿠키를 생성\n3. HTTP Header에 쿠키를 포함 시켜 응답\n4. 브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음\n5. 같은 요청을 할 경우 HTTP Header에 쿠키를 함꼐 보냄\n6. 서버에서 쿠키를 읽어 이전 상태 정보를 변경할 필요가 있을 때 쿠키를 업데이트하여 변경된 쿠키를 HTTP Header에 포함시켜 응답\n\n## 쿠키의 종류\n\n- Session Cookie\n\n    만료 기간을 설정하고 메모리에만 저장되며 세션처럼 브라우저 종료시에 쿠키를 삭제한다.\n\n- Persistent Cookie\n\n    파일로 저장되어 장기간 유지되는 쿠키로 브라우저 종료와 관계없이 사용할 수 있다.\n\n- Secure Cookie\n\n    https에서만 사용되는 쿠키로 쿠키 정보가 암호화 되어 전송된다.\n\n- Third-Party Cookie\n\n    방문한 도메인과 다른 도메인의 쿠키(보통 광고, 배너 등)을 관리할 때 유입 경로를 추적하기 위해 사용된다.\n\n\n# 세션(Session)\n\n> 쿠키에 기반하지만 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 서버 측에서 관리한다.\n\n- 서버에서는 클라이언트를 구분하기 위해 식별자인 세션 ID를 부여하고 서버 DB에 정보를 저장하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지한다.\n- 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능하다.\n- 사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.\n\n    → 즉 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이 된다.\n\n- 클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션 ID이다.\n\n## 세션의 동작 방식\n\n1. 클라이언트가 서버에 접속 시 세션 ID를 발급 받음\n2. 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음\n3. 클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청\n4. 서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용\n5. 클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답\n\n## 세션의 특징\n\n- 각 클라이언트에게 고유 ID를 부여\n- 세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공\n- 보안 면에서 쿠키보다 우수\n- 사용자가 많아질수록 서버 메모리를 많이 차지하게 됨\n\n# 쿠키VS세션\n\n- 쿠키는 서버의 자원을 전혀 사용하지 않고, 세션은 서버의 자원을 사용한다.\n                                                                                                                                                             \n| 특징      | 차이점                                                                                                                                                 |                                  \n|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| 보안      | 쿠키 <span>&lt;</span> 세션, 쿠키는 클라이언트 오컬에 저장되기에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해 세션 ID만 저장하고 따로 구분하여 서버에서 처리하기에 쿠키보다 세션의 보안이 우수하다. |\n| 요청 속도   | 쿠키 <span>&gt;</span> 세션, 세션은 서버에 정보가 있기에 서버의 처리가 필요하다.                                                                                              |\n| 라이프 사이클 | 쿠키도 만료 시간이 있지만 파일로 저장되기에 브라우저를 종료해도 정보가 남아있다. 또한 만료 기간을 넉넉하게 잡아두면 쿠키를 삭제할때까지 유지된다.<br/>반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제된다.           |\n\n<aside>\n❓ 세션을 사용하면 좋은데 왜 쿠키를 사용할까?\n\n세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문에 쿠키가 유리한 경우가 있다.\n\n</aside>\n\n# 참조\n\n- [쿠키와 세션의 개념](https://interconnection.tistory.com/74)\n","fields":{"slug":"blog/network/cookie-session"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/network/cookie-session.mdx"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://coyo-hm.github.io/blog/network/http\",\n        children: \"HTTP\"\n      }), \" 환경은 \", _jsx(\"span\", {\n        className: \"yellow\",\n        children: \"connectionless, stateless\"\n      }), \"한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인하는 작업이 필요하다.\\n또한 사이트가 커짐에 따라 장바구니, 위시리스트 등 클라이언트가 정보를 유지하는 stateful한 성격의 서비스가 점차 증가하였다.\\n이러한 배경과 HTTP의 특징을 보완하고 하기 위해 쿠키와 세션을 하게 되었다.\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"쿠키cookie\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#쿠키cookie\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"쿠키(Cookie)\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"쿠키\\n클라이언트(브라우저)의 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일로 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클라이언트에 300개까지 쿠키 저장이 가능하다. 하나의 도메인당 20개의 값만 가질 수 있다. 하나의 쿠키값은 4KB까지 저장한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Response Header에 Set-Cookie 속성을 사용하면 클라이언트에 쿠키를 만들 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다(상당한 트래픽을 발생시킨다).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"쿠키의-구성-요소\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#쿠키의-구성-요소\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"쿠키의 구성 요소\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"이름(name)\"\n          }), _jsx(_components.th, {\n            children: \"각각의 쿠키를 구별하는 데 사용되는 이름\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"값(value)\"\n          }), _jsx(_components.td, {\n            children: \"쿠키의 저장된 값\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"유효기간(expires)\"\n          }), _jsxs(_components.td, {\n            children: [\"쿠키의 유지시간\", _jsx(\"br\", {}), \"쿠키에 만료일이 포함되어 있으면 영구적 쿠키로 간주 데이터를 유지한다.\", _jsx(\"br\", {}), \"max-age 를 통해 지정된 만료일이 되면 쿠키를 삭제한다.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"도메인(domain)\"\n          }), _jsxs(_components.td, {\n            children: [\"쿠키가 사용되는 도메인\", _jsx(\"br\", {}), \"해당 값이 현재의 도메인과 다를 경우 타사의 쿠키로 간주하여 브라우저가 거부한다.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"경로(path)\"\n          }), _jsx(_components.td, {\n            children: \"쿠키를 반환할 경로\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"쿠키의-동작-방식\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#쿠키의-동작-방식\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"쿠키의 동작 방식\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"클라이언트가 페이지를 요청\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서버에서 쿠키를 생성\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"HTTP Header에 쿠키를 포함 시켜 응답\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"같은 요청을 할 경우 HTTP Header에 쿠키를 함꼐 보냄\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서버에서 쿠키를 읽어 이전 상태 정보를 변경할 필요가 있을 때 쿠키를 업데이트하여 변경된 쿠키를 HTTP Header에 포함시켜 응답\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"쿠키의-종류\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#쿠키의-종류\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"쿠키의 종류\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Session Cookie\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"만료 기간을 설정하고 메모리에만 저장되며 세션처럼 브라우저 종료시에 쿠키를 삭제한다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Persistent Cookie\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"파일로 저장되어 장기간 유지되는 쿠키로 브라우저 종료와 관계없이 사용할 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Secure Cookie\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"https에서만 사용되는 쿠키로 쿠키 정보가 암호화 되어 전송된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Third-Party Cookie\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"방문한 도메인과 다른 도메인의 쿠키(보통 광고, 배너 등)을 관리할 때 유입 경로를 추적하기 위해 사용된다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"세션session\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#세션session\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"세션(Session)\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"쿠키에 기반하지만 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 서버 측에서 관리한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"서버에서는 클라이언트를 구분하기 위해 식별자인 세션 ID를 부여하고 서버 DB에 정보를 저장하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지한다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능하다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"→ 즉 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이 된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션 ID이다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"세션의-동작-방식\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#세션의-동작-방식\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"세션의 동작 방식\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"클라이언트가 서버에 접속 시 세션 ID를 발급 받음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"세션의-특징\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#세션의-특징\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"세션의 특징\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"각 클라이언트에게 고유 ID를 부여\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"보안 면에서 쿠키보다 우수\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용자가 많아질수록 서버 메모리를 많이 차지하게 됨\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"쿠키vs세션\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#쿠키vs세션\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"쿠키VS세션\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"쿠키는 서버의 자원을 전혀 사용하지 않고, 세션은 서버의 자원을 사용한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"특징\"\n          }), _jsx(_components.th, {\n            children: \"차이점\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"보안\"\n          }), _jsxs(_components.td, {\n            children: [\"쿠키 \", _jsx(\"span\", {\n              children: \"<\"\n            }), \" 세션, 쿠키는 클라이언트 오컬에 저장되기에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해 세션 ID만 저장하고 따로 구분하여 서버에서 처리하기에 쿠키보다 세션의 보안이 우수하다.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"요청 속도\"\n          }), _jsxs(_components.td, {\n            children: [\"쿠키 \", _jsx(\"span\", {\n              children: \">\"\n            }), \" 세션, 세션은 서버에 정보가 있기에 서버의 처리가 필요하다.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"라이프 사이클\"\n          }), _jsxs(_components.td, {\n            children: [\"쿠키도 만료 시간이 있지만 파일로 저장되기에 브라우저를 종료해도 정보가 남아있다. 또한 만료 기간을 넉넉하게 잡아두면 쿠키를 삭제할때까지 유지된다.\", _jsx(\"br\", {}), \"반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제된다.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"❓ 세션을 사용하면 좋은데 왜 쿠키를 사용할까?\"\n      }), _jsx(_components.p, {\n        children: \"세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문에 쿠키가 유리한 경우가 있다.\"\n      })]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"참조\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#참조\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"참조\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://interconnection.tistory.com/74\",\n          children: \"쿠키와 세션의 개념\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"JavaScript","count":9},{"tag":"React","count":8},{"tag":"TypeScript","count":6},{"tag":"Network","count":3},{"tag":"Redux","count":2},{"tag":"Axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn berry","count":1},{"tag":"GithubPage","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Redux-Persist","count":1},{"tag":"CS","count":1},{"tag":"Styled-Components","count":1},{"tag":"CSS","count":1},{"tag":"Python3","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}