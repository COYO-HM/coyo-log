{"pageProps":{"posts":[{"frontMatter":{"date":"2022-11-09T15:00:00","title":"Axios Intercepter 사용해보기","tags":["react","typescript","axios","javascript"],"description":"Axios: Intercepter 사용해보기","published":true},"body":"> Axios Interceptors\n>\n>\n> `then` 또는 `catch`로 처리되기 전에 요청과 응답을 가로챌 수 있다.\n>\n> [출처: Axios Docs Interceptors](https://axios-http.com/kr/docs/interceptors)\n>\n- 요청(request)을 보내기 전이나 응답(response)을 받은 직후 지정된 작업을 수행할 수 있게 한다.\n- Token 처리나 Error 처리에 용이하다.\n\n# Interceptors 추가하기\n\n```tsx\n// 요청 인터셉터 추가하기\naxios.interceptors.request.use(function (config: AxiosRequestConfig) {\n    // 요청이 전달되기 전에 작업 수행\n    return config;\n  }, function (error) {\n    // 요청 오류가 있는 작업 수행\n    return Promise.reject(error);\n  });\n\n// 응답 인터셉터 추가하기\naxios.interceptors.response.use(function (response: AxiosResponse) {\n    // 2xx 범위에 있는 상태 코드는 이 함수를 트리거 합니다.\n    // 응답 데이터가 있는 작업 수행\n    return response;\n  }, function (error: AxiosError) {\n    // 2xx 외의 범위에 있는 상태 코드는 이 함수를 트리거 합니다.\n    // 응답 오류가 있는 작업 수행\n    return Promise.reject(error);\n  });\n```\n\n# Interceptors 제거하기\n\n```tsx\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n# Custom Instance에서 Interceptors 사용하기\n\n```tsx\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n# 참조\n\n- [Axios Docs Interceptors](https://axios-http.com/kr/docs/interceptors)","fields":{"slug":"blog/post/axios-interceptor"},"path":"blog/axios-interceptor.mdx"},{"frontMatter":{"date":"2022-10-22T15:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["react","typescript","emotion","gatsby"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"https://user-images.githubusercontent.com/56423604/275324825-c75b8367-2633-47b9-888b-4bb0cd4daf7a.png","published":true},"body":"# 목차 생성하기\n\n## tableOfContents\n\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\n\n```graphql\n{\n  allMarkdownRemark {\n    nodes {\n      tableOfContents\n    }\n  }\n}\n```\n\n```plaintext\n{\n  \"data\": {\n    \"allMarkdownRemark\": {\n      \"nodes\": [\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        ...\n        ]\n    }\n  },\n  \"extensions\": {}\n}\n\n```\n\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\n\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\n\n```typescript\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\n\n`PostTableOfContents.tsx`\n\n```typescript\nimport styled from \"@emotion/styled\";\n\ninterface IPostTableOfContentsProps {\n  tableOfContents: string;\n}\n\nconst TableofContents = styled.div``;\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n  return (\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n  );\n};\n\nexport default PostTableOfContents;\n```\n\n`post_template.tsx`\n\n```typescript\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: IPostTemplateProps) => {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <PostTableOfContents tableOfContents={tableOfContents} />\n      <CommentWidget />\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n```\n\n## 링크 동작시키기\n\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\n\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\n\n```shell\nyarn add gatsby-remark-autolink-headers\n\nnpm i gatsby-remark-autolink-headers\n```\n\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\n\n```javascript\n...\n{\n  resolve: `gatsby-transformer-remark`,\n    options\n:\n  {\n    plugins: [\n      ...\n        `gatsby-remark-autolink-headers`,\n    ],\n  }\n}\n,\n...\n```\n\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\n\n# 목차 CSS 적용하기\n\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n`;\n```\n\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\n씩 추가하였다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n\n  * {\n    list-style: none;\n    padding-bottom: 5px;\n\n    &:last-child {\n      padding-bottom: 0;\n    }\n  }\n\n  * > ul > li {\n    padding-left: 5px;\n  }\n`;\n```\n\n# 페이지 맨 위/아래로 가기 버튼 추가하기\n\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\n\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\n\n```typescript\nimport styled from '@emotion/styled'\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n...\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n    const onClickUpButton = useCallback(() => {\n    window?.scrollTo(0, 0)\n  }, [])\n\n  const onClickDownButton = useCallback(() => {\n    window?.scrollTo(0, document.body.scrollHeight)\n  }, [])\n  return (\n    <TableofContentsWrapper>\n      <UpButton>\n        <FontAwesomeIcon icon={faAngleUp} />\n      </UpButton>\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n      <DownButton>\n        <FontAwesomeIcon icon={faAngleDown} />\n      </DownButton>\n    </TableofContentsWrapper>\n  )\n}\n```\n\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\n","fields":{"slug":"blog/post/gatsby/add_table_of_contents_in_gatsby"},"path":"blog/gatsby/add_table_of_contents_in_gatsby.mdx"},{"frontMatter":{"date":"2022-09-18T15:00:00","title":"Axios Config 기본값 정리","tags":["react","typescript","axios","javascript"],"description":"Axios Config 기본값 정리","published":true},"body":"> 모든 요청에 적용될 config 기본값을 지정할 수 있다.\n>\n\n# **전역 Axios 기본값**\n\n```tsx\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n# 커스텀 인스턴스 기본값\n\n## 인스턴스를 생성할때 config 기본값 설정하기\n\n```tsx\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n```\n\n## 인스턴스를 생성할때 config 기본값 설정하기: TypeScript에서 생성하기\n\n```tsx\nimport axios, { AxiosRequestConfig } from 'axios';\n\nconst axiosConfig: AxiosRequestConfig = {\n  baseURL: 'BASE_URL'\n}\nconst instance = axios.create(axiosConfig);\n```\n\n## 인스턴스를 만든 후 기본값 변경하기\n\n```tsx\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n## 인스턴스 사용하기\n\n```tsx\nconst response = await instance.post('login', params);\n```\n\n# **Config 우선 순위**\n\nConfig는 우선 순위에 따라 병합된다.\n\n라이브러리에서의 기본값 <  인스턴스의 `defaults` 속성 < 요청의 `config` 인자를 순서대로 우선순위가 낮다.\n\n```tsx\n// 라이브러리에서 제공하는 config 기본값을 사용하여 인스턴스 만들기\n// 이 때 timeout 값은 라이브러리의 기본값인 '0'입니다.\nconst instance = axios.create();\n\n// 라이브러리에 대한 timeout 값 재정의\n// 이제 모든 요청은 시간 초과 전 2.5초 대기하는 인스턴스를 사용합니다.\ninstance.defaults.timeout = 2500;\n\n// 시간이 오래 걸리는 요청에 대한 timeout 값 재정의\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n# 참조\n\n- [Axios Docs Config 기본값](https://axios-http.com/kr/docs/config_defaults)","fields":{"slug":"blog/post/axios-config"},"path":"blog/axios-config.mdx"},{"frontMatter":{"date":"2022-09-17T15:00:00","title":"HTTP 통신","tags":["network"],"description":"HTML 파일을 전송하는 프로토콜","published":true},"body":"# 개념\n\n> <strong>HTTP(HyperText Transfer Protocol)</strong>\n>\n> HTML 파일을 전송하는 프로토콜으로 초기에는 HTML 파일 전송을 목적으로 만들어졌으나 현재는 JSON, image 파일 등도 전송한다.\n> 클라이언트에서 서버로 요청을 보내고 서버가 클라이언트의 요청에 응답하는 방식으로 통신이 이루어진다.\n> 클라이언트 요청이 있을 때 서버가 응답하는 단방향 통신이다.\n\n<aside>\n\n초기에 서버는 응답 후 클라이언트의 Connection을 곧바로 끊어버렸으나, 현재는 성능상의 이유로 Keep Alive 옵션을 통해 일정 기간 동안 클라이언트와 Connection을 유지하는 방식으로 통신이 가능해졌다.\n\n</aside>\n\n- 보통 브라우저인 클라이언트에 의해 전송되는 메세지를 요청(requests)라고 부르며, 그에 대한 서버에서 응답으로 전송되는 메시지를 응답(responses)라고 부른다.\n- 무상태성(Stateless): HTTP는 state를 저장하지 않늗다. 동시에 통신이 끝나면 상태를 유지하지 않는 특징\n- 비연결성(Connectionless): 클라이언트의 요청에 서버가 응답하고, 그 응답을 클라이언트가 받으면 연결을 끊어버리는 특징\n\n# 참조\n\n- [https://developer.mozilla.org/ko/docs/Web/HTTP](https://developer.mozilla.org/ko/docs/Web/HTTP)\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\n","fields":{"slug":"blog/post/network/http"},"path":"blog/network/http.mdx"},{"frontMatter":{"date":"2022-09-12T15:00:00","title":"Socket 통신","tags":["network"],"description":" 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체","published":true},"body":"# 개념\n\n> <strong>Socket</strong>\n>\n> 프로세스가 데이터를 주고 받는 창구 역할을 한다. 떨어져 있는 두 호스트가 서로 데이터를 주고 받도록 연결해주는 구조체이다.\n> 소켓을 통해 데이터 통로가 생성된다.\n>\n> - 소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.\n\n> **소켓 통신**\n> 클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식으리 양방향 통신\n> 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 서버 또한 클라이언트에게 요청을 보낼 수 있다.\n\n- 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓 통신이 더 적합하다.\n- 소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 자원이 소모된다.\n\n# 참조\n\n- [https://kotlinworld.com/75](https://kotlinworld.com/75)\n- [https://helloworld-88.tistory.com/215](https://helloworld-88.tistory.com/215)\n- [https://itstudy402.tistory.com/13](https://itstudy402.tistory.com/13)\n","fields":{"slug":"blog/post/network/socket"},"path":"blog/network/socket.mdx"}],"allTags":[{"tag":"all","count":23},{"tag":"javascript","count":9},{"tag":"react","count":8},{"tag":"typescript","count":6},{"tag":"network","count":4},{"tag":"git","count":3},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"husky","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn_berry","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"lodash","count":1},{"tag":"python3","count":1},{"tag":"nextjs","count":1},{"tag":"commitlint","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"emotion","count":1},{"tag":"gatsby","count":1},{"tag":"programming","count":1}],"category":"all","page":2},"__N_SSG":true}