{
  "pageProps": {
    "projectPosts": [
      {
        "frontMatter": {
          "date": "2022-10-02T15:00:00",
          "title": "Simple Kanban Board",
          "tags": [
            "react",
            "typescript",
            "react_beautiful_dnd",
            "react_hook_form",
            "recoil",
            "styled_components"
          ],
          "description": "react-beautiful-dnd를 이용한 간단한 칸반 보드",
          "published": true,
          "thumbnail": "/static/images/project/simple_kanban_board.jpg"
        },
        "body": "> 해당 프로젝트는 다음 링크를 통해 볼 수 있습니다.\n>\n> [https://coyo-hm.github.io/Simple-Kanban-Board/](https://coyo-hm.github.io/Simple-Kanban-Board/)\n\n# Introduction\n\n![ezgif com-gif-maker](https://user-images.githubusercontent.com/56423604/190454639-62c2abb5-359b-4e33-bc6a-fe45c2fcf3c1.gif)\n![ezgif com-gif-maker (1)](https://user-images.githubusercontent.com/56423604/190454736-c55b9ec0-4d28-436e-bb20-7955f2828167.gif)\n\n> react-beautiful-dnd를 이용한 간단한 칸반 보드입니다.\n>\n> - react-beautiful-dnd를 이용하여 Drag&Drop이 가능한 Kanban Board를 구현하였습니다.\n> - 카드끼리의 위치 이동은 물론 보드끼리의 위치 이동과 보드에서 다른 보드로 카드를 이동시킬 수도 있습니다.\n> - 사용자는 + 버튼을 눌러 보드를 추가할 수도 있으며 아래의 휴지통으로 카드나 보드를 Drag&Drop하여 삭제할 수 있습니다.\n> - Context API를 사용하여 테마 토글을 추가하였습니다. 테마 토글을 사용하여 다크 테마와 기본 테마를 설정할 수 있습니다.\n> - 사용자의 화면에 따라 CSS가 달라지도록 반응형으로 구현하였습니다.\n> - 보드 정보는 Local Storage에 저장하여 브라우저를 종료하더라도 해당 내용이 유지됩니다.\n\n# Quick Start\n\n```shell\nnpm install\nnpm start\n```\n\n# Project Structure\n\n```Plain text\nsrc\n│\n├── atoms ────────────────  Global State\n│\n├── components ───────────  view 컴포넌트\n│   ├── DraggableBoard\n│   ├── DraggableCard\n│   ├── DroppableArea\n│   └── Home\n│\n├── helpers ──────────────  공통 상수\n│   └── constant\n│\n├── hooks ────────────────  hook\n│   └── useTheme\n│\n├── images ───────────────  이미지 파일\n│\n│\n├── style ────────────────  styled-components' custom style & GlobalStyle\n│   ├── globalStyle\n│   └── index\n│\n├── theme ────────────────  theme 관련\n│   ├── ToggleTheme\n│   ├── styled.d.ts\n│   └── theme\n│\n├── App.js ───────────────  Theme Context 적용 & GlobalStyle 적용\n│\n└── index.js ─────────────  애플리케이션 엔트리 포인트\n```\n\n# Tech Stack\n\n- react v_18.2.0\n- react-beautiful-dnd v_13.1.0\n- react-dom v_18.2.0\n- react-helmet v_6.1.0\n- react-hook-form v_7.34.0\n- recoil v_0.7.4\n- styled-components v_5.3.5\n- typescript v_4.8.3\n",
        "fields": { "slug": "project/post/simple-kanban-board" },
        "path": "project/simple-kanban-board.mdx"
      },
      {
        "frontMatter": {
          "date": "2022-09-14T15:00:00",
          "title": "REAL TIME COIN INFO",
          "tags": [
            "react",
            "typescript",
            "react_helmet",
            "react_query",
            "react_apexcharts",
            "recoil",
            "styled_components"
          ],
          "description": "코인 정보와 실시간 가격을 CANDLE STICK CHART로 볼 수 있는 서비스",
          "published": true,
          "thumbnail": "/static/images/project/real-time-coin-info.gif"
        },
        "body": "# Introduction\n\n> 무료 api를 사용하여 coin들의 정보를 보여주는 서비스입니다.\n>\n> - `apexchart`를 사용하여 코인의 가격을 CandleStick Chart의 형태로 시각화하였습니다.\n>\n>   ![ezgif com-gif-maker (2)](https://user-images.githubusercontent.com/56423604/197561313-2defe8e5-31d0-4402-9a2a-13614b0d76a2.gif)\n>\n> - `styled component`의 ThemeProvider를 사용하여 themeToggle를 구현하였습니다.\n>   ![ezgif com-gif-maker (3)](https://user-images.githubusercontent.com/56423604/197562141-cf451cff-16bd-41c0-83e8-66818a7c482b.gif)\n>\n> - `recoil`을 사용하여 전역변수 관리를 해주었습니다.\n>\n> - data fetch는 `react-query`를 이용해 진행해주었습니다.\n\n# Quick Start\n\n```shell\nnpm install\nnpm start\n```\n\n# Project Structure\n\n```Plain Text\nsrc\n├── api ──────────────────  Fetching Data\n│\n├── atoms ────────────────  Global State\n│\n├── components ───────────  view 컴포넌트\n│   ├── Charts\n│   └── ToggleSwitch\n│\n├── images ───────────────  이미지 파일\n│\n├── pages ────────────────  페이지\n│   ├── Coin\n│   └── Home\n│\n├── style ────────────────  styled-components' custom style & theme & GlobalStyle\n│   ├── globalStyle\n│   ├── index\n│   ├── styled.d.ts\n│   └── theme\n│\n├── App.js ───────────────  Route 처리 & Theme Context 적용 & GlobalStyle 적용\n│\n└── index.js ─────────────  애플리케이션 엔트리 포인트\n```\n\n# Tech Stack\n\n- react v_18.2.0\n- react-router-dom v_6.3.0\n- typescript v_4.7.4\n- styled-components v_5.3.5\n- recoil v_0.7.4\n- react-helmet v_6.1.0\n- react-query v_4.0.0\n- react-apexcharts v_1.4.0",
        "fields": { "slug": "project/post/real-time-coin-info" },
        "path": "project/real-time-coin-info.mdx"
      }
    ],
    "blogPosts": [
      {
        "frontMatter": {
          "date": "2023-10-08T15:00:00",
          "title": "NextJS Large Page Data Warning 해결하기",
          "tags": ["nextjs"],
          "description": "NextJS Large Page Data Warning 해결 과정",
          "published": true,
          "thumbnail": "https://user-images.githubusercontent.com/56423604/273578963-e3f37379-368c-460d-9b37-c4b98cfba9e7.png"
        },
        "body": "# ⚠️ 문제\n언제부터인가 위와 같은 경고 문구가 출력되었다. 처음에는 이미지 때문인줄 알았는데 이미지를 다른 사이트에 업로드하고 해당 이미지 링크만 불러와도 같은 문구가 출력되는 것을 알 수 있었다.\n<img src={\"https://user-images.githubusercontent.com/56423604/273622904-4a226424-b912-46b8-be9b-524a3ddfbd12.png\"} alt={\"nextjs-large-data-warning-message\"} style={{margin:\"20px auto\"}}/>\n\nNextJS 공식 홈페이지를 살펴보면 `getStaticProps`에서 필요한 일정량의 데이터만 렌더해주어야한다고 되어있다.\n\n페이징을 client 단에서 진행했고, 모든 tag 또한 보여줘야 했기 때문에 이를 위해서 모든 페이지에서 모든 포스트를 불러오고 있었는데 포스트의 양이 늘면서 이와 같은 문제가 발생했다고 판단했다.\n<img src={\"https://user-images.githubusercontent.com/56423604/273624007-9db1879b-6a09-40a4-a005-a7c0d035fcc2.png\"} alt={\"nextjs-large-data\"} style={{margin:\"20px auto 5px\"}}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 10px\"}}>이미지 출처: [[NextJS] Large Page Data](https://nextjs.org/docs/messages/large-page-data)</div>\n\n# 🔧 해결\n그래서 post의 정보와 tag 정보를 가진 json 파일을 생성하도록 해주었다.\n\n```jsx\nconst createPostTable = () => {\n  const files = sync(`${CONTENT_DIR_PATH}/**/*.md*`).reverse();\n\n  try {\n    let fileAttributes = {};\n    let tagsTablePublished = { blog: {}, project: {} };\n    let tagsTableUnpublished = { blog: {}, project: {} };\n\n    for (const filePath of files) {\n      const file = fs.readFileSync(filePath, { encoding: \"utf8\" });\n      const { attributes } = frontMatter(file);\n      const { date, title, tags, description, published } = attributes;\n\n      const postPath = filePath.replace(`${CONTENT_DIR_PATH}/`, \"\");\n      const postKey = postPath.replace(path.extname(filePath), \"\");\n      const postTags = tags.map((tag) =>\n        tag.toLowerCase().replace(/\\s|-/gi, \"_\")\n      );\n      const postMenu = postPath.split(\"/\")[0];\n\n      postTags.forEach((t) => {\n        tagsTableUnpublished[postMenu][t] = tagsTableUnpublished[postMenu][t]\n          ? [...tagsTableUnpublished[postMenu][t], postKey]\n          : [postKey];\n        if (published) {\n          tagsTablePublished[postMenu][t] = tagsTablePublished[postMenu][t]\n            ? [...tagsTablePublished[postMenu][t], postKey]\n            : [postKey];\n        }\n      });\n      fileAttributes[postKey] = {\n        path: postPath,\n        menu: postMenu,\n        title,\n        tags: postTags,\n        date: date ? new Date(date).toISOString().substring(0, 19) : \"\",\n        published,\n      };\n    }\n\n    fs.mkdirSync(TABLE_DIR_PATH, { recursive: true });\n    fs.writeFileSync(\n      path.join(TABLE_DIR_PATH, `postsTable.json`),\n      JSON.stringify(fileAttributes),\n      \"utf-8\"\n    );\n    fs.writeFileSync(\n      path.join(TABLE_DIR_PATH, `tagsTable.json`),\n      JSON.stringify({\n        published: tagsTablePublished,\n        unpublished: tagsTableUnpublished,\n      }),\n      \"utf-8\"\n    );\n  } catch (e) {\n    console.error(e);\n  }\n};\n```\npublic/static/table 안에 json 파일이 생성된 것을 확인할 수 있었다.\n\n<img alt={\"nextjs-large-data-directory\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273626948-9a1c6b8c-51fc-434a-b0e8-29bd94cdf565.png\"}/>\n\n\n생성한 데이터는 다음과 같은 파일 구조를 가지고 있다. key 값으로 포스트의 위치를 담아주었다.\n<img alt={\"posts-table\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273625889-f035259f-9608-4686-8537-6d6b89d4d491.png\"}/>\n\n\ngetStaticProps 에서 post를 불러오는 부분에서 page를 받아서 page에 해당하는 post만을 불러올 수 있도록 변경해주었다.\n그랬더니 다음과 같이 콘솔창에서 경고 문구가 나오지 않는 것을 확인할 수 있었다!\n<img alt={\"nextjs-large-page-data-solve\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273627309-ac016625-ea6d-4e22-b3cc-7c46b0f6e964.png\"}/>\n\n# 참조\n- [[NextJS] Large Page Data](https://nextjs.org/docs/messages/large-page-data)",
        "fields": { "slug": "blog/post/nextjs-large-page-data-warning" },
        "path": ""
      },
      {
        "frontMatter": {
          "date": "2023-09-24T15:00:00",
          "title": "git commit template 등록하기",
          "tags": ["git", "intellij"],
          "description": "git commit template 등록하고 IntelliJ에서 사용해보기",
          "published": true,
          "thumbnail": "https://user-images.githubusercontent.com/56423604/272324652-55a437a4-af2d-4809-9308-5a915847004f.png"
        },
        "body": "> **git commit template**\n>\n> commit 시에 등록한 commit template을 보여주어 commit message를 작성할 때 일정한 스타일을 유지할 수 있도록 도와준다.\n\n# git commit template 등록하기\n\n## template 파일 생성하고 작성하기\n\n1. `.git` 폴더가 있는 위치에 `.gitmessage.txt` 파일을 생성한다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_message_txt\"} src={\"https://user-images.githubusercontent.com/56423604/270172830-eca18299-d8a3-4aee-9e0f-9c1323305df9.png\"}/>\n\n2. 생성한 .gitmessage.txt 에 내용을 작성하면 된다.\n - `#` 으로 시작하면 주석 처리되어 커밋에 보이지 않는다.\n - 다음 사이트를 참고하여 본인에 맞게 룰을 작성하면 된다.\n\n<aside>\n  🔗 Commit message rule\n\n  - [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)\n  - [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n  - [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n</aside>\n\n  ```\n  # <타입> : <제목> 형식으로 작성하며 제목은 최대 50글자 정도로만 입력한다.\n\n  ################\n  # 본문(추가 설명)을 아랫줄에 작성한다.\n\n  ################\n  # 꼬리말(footer)을 아랫줄에 작성한다.\n\n  ################\n  # FEAT : 새로운 기능 추가\n  # FIX : 버그 수정\n  # DOCS : 문서 수정\n  # TEST : 테스트 코드 추가\n  # REFACTOR : 코드 리팩토링\n  # STYLE : 코드 의미에 영향을 주지 않는 변경사항\n  # CHORE : 빌드 부분 혹은 패키지 매니저 수정사항\n  ################\n        ```\n\n\n## commit message template 설정하기\n\n아래 명령어를 terminal 에 입력한다.\n\n```bash\ngit config --global commit.template .gitmessage.txt\n```\n\ntemplate을 적용하면 git commit 할때마다 지정한 파일이 `vi` 로 나온다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_template_vim\"} src={\"https://user-images.githubusercontent.com/56423604/270172961-313f6ee3-20ab-450a-a758-581a0be2e384.png\"}/>\n\n`i` 를 눌러 제목 본문 꼬리말을 작성하고 `esc`를 누른 후에 `:wq!`를 입력한 후 `enter`를 눌러 작성한 것을 저장하여 커밋한다.\n\n# IntelliJ에서 사용해보기\n\n## Custom commit template 사용하기\n\n위에서 설정한 commit message template을 IntelliJ에서 commit 할때 사용할 수 있다.\n\n1. Settings > Plugins > MarketPlace 에서 해당 plugin 을 찾아 설치해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template\"} src={\"https://user-images.githubusercontent.com/56423604/270173032-c1b65887-c651-45fa-b573-c2c35b479e54.png\"}/>\n\n\n1. 설정한 commit message template 적용하기\n - Settings > Tools > Commit Message Template 에서 template을 적용한다.\n - 위에 text를 직접 입력해도 되고, Load Template File에 만들어둔 text 파일 directory 주소를 입력해도 된다.\n\n맥의 경우 파일을 찾을 때, `.gitmessage.txt` 파일의 경우 숨겨질 수 있기에 `command` + `shift` + `.` 을 눌러 숨김 파일도 볼 수 있도록 해주자.\n\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template_tools\"} src={\"https://user-images.githubusercontent.com/56423604/270173233-597e3a7d-19b5-4c73-a3a7-88957668d1be.png\"}/>\n\n    적용해주면 commit 할때, 다음과 같이 입력한 template 이 나온다.\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_example\"} src={\"https://user-images.githubusercontent.com/56423604/270173232-c39ce874-df0c-487f-94a9-6e706cad0c1c.png\"}/>\n\n\n## ****Conventional**** commit template 사용하기\n\ntemplate 설정 없이 기존의 conventional commit template을 사용하는 plugin도 있다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_plugin\"} src={\"https://user-images.githubusercontent.com/56423604/270173230-205f29af-127d-45d0-a2a9-cadc27cad49c.png\"}/>\n\n해당 plugin은 설치한 후에 commit 할때 create commit message 버튼 (아래 사진에 동그라미 쳐진 버튼) 을 클릭하면\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit1\"} src={\"https://user-images.githubusercontent.com/56423604/270173229-5e16e8a9-67e0-427b-91d8-482f01b8f78a.png\"}/>\n\n다음과 같은 창이  나온다. 해당 창에서 내용을 입력하고 OK 버튼을 누르면,\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit2\"} src={\"https://user-images.githubusercontent.com/56423604/270173227-92414cb3-8b8f-4366-ae11-95a81c3c8efe.png\"}/>\n\n다음과 같이 커밋 메세지를 작성해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit3\"} src={\"https://user-images.githubusercontent.com/56423604/270173223-83358c13-96c8-4d27-9fa2-7f86d2ae76ff.png\"}/>\n\n# 참조\n\n- [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n- [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n- [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)",
        "fields": { "slug": "blog/post/git/git-commit-template" },
        "path": ""
      },
      {
        "frontMatter": {
          "date": "2023-09-12T15:00:00",
          "title": "브라우저 렌더링 과정 살펴보기",
          "tags": ["network", "css"],
          "description": "Rendering Engine 에 대해 알아보자",
          "published": true,
          "thumbnail": "https://user-images.githubusercontent.com/56423604/272330679-3d6f37c2-fe0a-44f7-995a-8f600257b83f.png"
        },
        "body": "브라우저 렌더링에 대해 탐구해보자 그러기엔 우선 웹 브라우저 구조를 간단하게 살펴보자.\n\n# 웹 브라우저 구조\n\n> 웹 브라우저\n>\n> 코드(CSS, HTML, JavaScript 등등)를 가지고 웹 페이지를 그려주는 역할을 한다.\n\n<img src={\"https://user-images.githubusercontent.com/56423604/268966576-73d71f41-92eb-4042-8dbf-78043990c7a2.png\"} alt={\"web-browser-structure\"} style={{margin:\"20px 0\"}}/>\n\n* User Interface\n\n    주소표시줄, 이전/다음/새로고침 버튼 등 웹페이지를 제외하고 사용자와 상호작용하는 사용자 인터페이스이다.\n\n* Browser Engine\n\n    유저인터페이스와 렌더링 엔진을 연결하는 브라우저 엔진\n\n* Rendering Engine\n\n    HTML과 CSS를 파싱하여 요청하는 웹 페이지를 표시하는 렌더링 엔진\n\n* Networking\n\n    각종 네트워크 요청을 수행하는 네트워킹 파트\n\n* JavaScript Interpreter\n\n    자바스크립트 코드를 실행하는 인터프리터 (크롬의 경우 V8을 사용하는 엔진)\n\n* UI Backend\n\n    체크박스나 버튼과 같은 기본적인 위젯을 그려주는 UI Backend 파트\n\n* Data Science\n\n    localStorage나 Cookie와 같이 보조 기억 장치에 데이터를 저장하는 파트\n\n\n# Rendering Engine\n\n<aside>\n  <p className={\"text\"}>💡&nbsp;&nbsp;웹 브라우저마다 렌더링 엔진이 다르다</p>\n  * Chrome은 Blink, 신형 Edge\n  * Safari는 Webkit\n  * Firefox는 Gecko\n  * Trident은 IE\n</aside>\n\n## Rendering Engine의 역할\n✔️ HTML, CSS, JS, 이미지 등 웹페이지에 포함된 모든 요소들을 화면에 보여준다.\n\n✔️ 업데이트<span style={{color: \"rgb(163 163 163)\"}}>(사용자 동작으로 인해서 입력이 발생한다던가, 스크롤이 생겼다던가 등의 업데이트)</span>가 필요할 때, 효율적으로 렌더링을 할 수 있도록 자료 구조를 생성한다.\n\n## Rendering Engine의 동작 과정: Critical Rendering Path(CRP)\n\n브라우저가 페이지의 초기 출력을 위해 실행해야 하는 순서\n\n<img width=\"1685\" style={{margin:\"20px 0\"}} alt=\"rendering-engine\" src=\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/e7ec1ccb-2414-4f31-851a-a8a3c7b5a37f\"/>\n\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"renderer-process\"} src={\"https://user-images.githubusercontent.com/56423604/268993997-6460af95-26ae-4798-a1da-d9f008ebabc6.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [Blink의 Renderer Process](https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit#heading=h.v5plba74lfde)</div>\n\n### 1. DOM Tree와 CSSOM Tree의 생성\n\n먼저 브라우저에서 사용자가 요청한 웹페이지에 문서를 불러오고 HTML tag들을 토큰화(Tokenizer)한다.\n\n토큰화한 후에 브라우저가 렉싱(Lexing) 과정을 통해 토큰을 해당 속성과 규칙을 정의하는 노드 객체로 변환한다.\n\n파싱(Parsing) 과정을 통해 각 노드가 서로 연관성을 가질 수 있도록 트리를 생성한다 ⇒ DOM Tree 생성\n\nHTML 문서에 잇는 모든 것들은 DOM을 구성한다.\n\n최상위에는 `document` 객체가 들어가고 태그는 element node(html)가 되고 태그의 요소는 attribute node, text node가 되어 트리 구조로 생성한다(이외에도 주석은 comment node가 되어 생성된다).\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"Constructing-the-Object-Model\"} src={\"https://user-images.githubusercontent.com/56423604/269012635-a403bf07-45b5-43ef-9c4a-996671ed7693.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [Blink의 Renderer Process](https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit#heading=h.v5plba74lfde)</div>\n\nHTML을 DOM 트리로 만드는 과정과 비슷하게 CSS의 경우 CSSOM Tree가 만들어진다. <br/>DOM 생성하는 동안 CSS 스타일시트 링크 태그를 접하고 리소스에 대해 요청한다.\n\nCSS도 브라우저가 이해하고 처리할 수 있도록 CSSOM Tree로 변환한다.<br/>CSSOM은 DOM이 어떻게 화면에 표시될 지를 알려주는 역할을 한다.\n\n<img style={{margin:\"20px 0\"}} alt={\"CSSOM\"} src={\"https://user-images.githubusercontent.com/56423604/269015530-9fd4cab4-6050-4ed4-a5b3-90c6cdc45d41.png\"}/>\n<img style={{margin:\"0 0 5px\"}} alt={\"CSSOM\"} src={\"https://user-images.githubusercontent.com/56423604/269018447-1195e2fe-e57e-4128-8565-d1679fb2e260.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [Blink의 Renderer Process](https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit#heading=h.v5plba74lfde)</div>\n\n\n### 2. Render Tree 생성\n\n<aside>\n  <p className={\"text-lg\"}>📖&nbsp;&nbsp;Render Tree</p>\n  - 렌더링 엔진이 DOM Tree와 CSSOM Tree를 합쳐서 만든 트리\n  - 화면에 표시되어야 할 모든 노드의 컨텐츠, 스타일 정보를 포함하는 트리\n</aside>\n\ndocument 객체부터 각 노드를 순회하면서 각각의 맞는 CSSOM를 찾아서 규칙을 적용하며 렌더와 관련된 요소들을 렌더 트리에 포함시킨다.\n\n이 때, `meta tag`나 `display: none` 속성을 가진 요소들은 렌더와 관계가 없기에 렌더 트리에 포함되지 않는다.\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"Render_Tree_Construction_Layout_and_Paint\"} src={\"https://user-images.githubusercontent.com/56423604/269020715-b0948780-e34b-4b57-b809-8e78fd6c0c38.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [[Critical Rendering Path] Render-Tree Construction, Layout, and Paint](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko)</div>\n\n### 3. Render Tree 배치: Layout(Reflow)\n\nRender Tree 가 생성되면 Layout(Reflow)이라는 과정을 거친다. viewport 내에서 요소들에 정확한 위치와 크기를 (모든 스타일 속성이) 계산하는 과정이다.\n\n이때 `%`, `em`과 같은 상대적인 단위를 사용했을 때는 viewport 에 맞춰서 픽셀단위로 변환된다.\n\n### 4. Render Tree 그리기: Paint(Repaint)\n렌더링 엔진이 각 요소들이 실제로 그려지는 과정이다.\n\n\n# UI가 업데이트 되는 3가지 상황\n\n위에는 브라우저가 페이지의 초기 출력을 위해 실행해야 하는 순서라면, UI가 사용자와의 상호작용 통해 업데이트 경우가 존재한다.\n과정이 1 \\< 2\\< 3 순으로 적기에 높은 숫자일수록 성능이 우수하다.\n\n## 1. Layout 이 다시 발생하는 경우\n<span style={{fontSize: \"18px\", fontWeight:\"700\"}}>: JavaScript → Style → Layout → Paint → Composite</span>\n\n* 주로 요소의 크기나 위치가 바뀔 때, 혹은 브라우저 창의 크기가 바뀌었을 때 다시 발생\n* 이 때, 레이아웃 수치를 다시 계산해서 재배치 해야 하기에 레이아웃 과정과 페인트, 레이어 합성 과정이 다시 발생한다.\n\n## 2. Paint 부터 다시 발생하는 경우\n<span style={{fontSize: \"18px\", fontWeight:\"700\"}}>: JavaScript → Style → Paint → Composite</span>\n\n* 주로 배경 이미지나 텍스트 색상, 그림자 등 레이아웃의 수치를 변화시키지 않는 스타일의 변경이 일어났을 경우 발생\n* 레이아웃이 변경되지 않기에 성능적으로 1번보다 더욱 우수\n\n## 3. 레이어의 합성(Composite)만 다시 발생하는 경우\n<span style={{fontSize: \"18px\", fontWeight:\"700\"}}>: JavaScript → Style → Composite</span>\n\n* Layout과 Paint를 수행하지 않고 레이어의 합성만 발생하기에 성능적으로 가장 우수한 케이스이다.\n* 레이어란 페인팅할 영역을 나누어 놓는 것을 의미한다. 크롬의 경우에는 Layout 과정 이후에 정해진 기준이나 필요에 의해 브라우저가 레이어를 생성한다.\n* 렌더 트리에 있는 노드 객체들은 생성된 레이어에 포함된다. 레이어들은 트리 형태 구성된다.<br/>\n    → 렌더링 엔진이 각 레이어를 프린팅 과정에서 각각 그려 준 다음에 하나의 비트맵으로 합성하여 페이지를 완성한다.\n\n아래의 사이트에서 CSS 속성마다 렌더링 엔진별로 UI가 어떻게 업데이트 되는지 알 수 있다.\n<a href={\"https://csstriggers.com/\"} target={\"_blank\"} style={{cursor:\"pointer\"}}>\n  <img width={400} style={{margin:\"20px auto\"}} alt={\"css-Triggers-List-2\"} src={\"https://user-images.githubusercontent.com/56423604/269030495-c1f213be-82eb-423b-a80d-20858694b7de.png\"}/>\n</a>\n\n# 개발자 도구로 리렌더 과정 살펴 보기\n실습은 해당 사이트에서 진행되었습니다. : [Rendering Engine Practice](https://coyo-hm.github.io/rendering_engine_practice/)\n\n## align-items 를 변경하는 경우\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"cssom-align-items\"} src={\"https://user-images.githubusercontent.com/56423604/269034349-fb2298eb-12cc-481b-b0c0-f40eaaf4577c.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [CSS Triggers List – What Kind of Changes You Can Make](https://csstriggers.com/)</div>\n\n* Blink\n\nCSS Triggers 에 따르면, Blink 기준으로 Layout 부터 다시 발생(: JavaScript → Style → Layout → Paint → Composite)한다.\n<img style={{margin:\"20px 0\"}} alt=\"blink-align-items\" src=\"https://user-images.githubusercontent.com/56423604/269039092-99232f88-01cf-4cd6-ae7e-805200bb5c47.png\"/>\n개발자 도구 performance 탭을 살펴보면 Recalculate → Layout → Pre Paint → Paint → Layerize → Commit 순서로 렌더링 되었음을 확인할 수 있다.\n\n## border-right-color 을 변경하는 경우\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"cssom-border-right-color\"} src={\"https://user-images.githubusercontent.com/56423604/269040996-650204fc-3c75-4da8-b1d5-7ea6aa7ff5f0.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [CSS Triggers List – What Kind of Changes You Can Make](https://csstriggers.com/)</div>\n\n* Blink\n\n    `border-right-color`를 바꾸는 경우에는 위의 설명에도 나와 있고 CSS Triggers 에서도 Blink 기준으로 Paint 부터 다시 발생(: JavaScript → Style → Paint → Composite)하는 것을 알 수 있다.\n<img style={{margin:\"20px 0\"}} alt=\"blink-border-right-color\" src=\"https://user-images.githubusercontent.com/56423604/269042941-cf22c84c-0d19-4655-af70-70ce9ec34b36.png\"/>\n\n\n## background-color 을 변경하는 경우\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"cssom-background-color\"} src={\"https://user-images.githubusercontent.com/56423604/269041943-6ed739dd-3d9d-4737-9aa1-390f1ff09a1c.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [CSS Triggers List – What Kind of Changes You Can Make](https://csstriggers.com/)</div>\n\n* Blink\n\n    `background-color`를 바꾸는 경우에는 위의 설명에도 나와 있고 CSS Triggers 에서도 Blink 기준으로 Paint 부터 다시 발생(: JavaScript → Style → Paint → Composite)하는 것을 알 수 있다.\n<img style={{margin:\"20px 0\"}} alt=\"blink-border-right-color\" src=\"https://user-images.githubusercontent.com/56423604/269042941-cf22c84c-0d19-4655-af70-70ce9ec34b36.png\"/>\n\n\n\n## opacity 를 변경하는 경우\n\n<img style={{margin:\"20px 0 5px\"}} alt={\"cssom-opacity\"} src={\"https://user-images.githubusercontent.com/56423604/269042111-bb3c95ca-2874-4677-81f1-26569fc269de.png\"}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 15px\"}}>이미지 출처: [[CSS] opacity는 reflow가 발생 안 한다구요...? 정말??](https://blinders.tistory.com/93)</div>\n\nCSS Triggers 에 따르면, Blink 기준으로 Paint 부터 다시 발생(: JavaScript → Style → Paint → Composite)한다.\n\n그런데 처음에 `opacity`를 기본값인 1에서 0으로 변하고 1로 변할때 layout 과정이 발생한 것을 발견할 수 있었다.\n\n<img style={{margin:\"20px 0\"}} alt=\"blink-opcity2\" src=\"https://user-images.githubusercontent.com/56423604/269047824-78cadf35-afc2-4743-b7c6-20c7a9807ecb.png\"/>\n\n이에 대해 찾아보니 위에서 말했듯이 브라우저가 코드를 렌더링하기 위해서는 HTML를 파싱하여 DOM Tree를 구성하고 DOM Tree와 CSSOM Tree를 하나로 합쳐 Render Tree로 만들고, 그 Render Tree를 바탕으로 Layer(레이어)를 구성한다.\n\n이때 이 레이어가 실제 포토샵에서 쓰는 레이어와 비슷한 의미의 언어로 층을 의미하는데, 브라우저는 레이어를 쌓아가며 화면을 구성하여 우리에게 보여준다. 앞에 레이어에 가려진 것을 뿐 뒤에 레이어에도 엄연히 화면이 그려진 3차원이라고 볼 수 있다.\n이를 [`Stacking Context`](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context)라고 하며 MDN에서는 `가상의 Z축을 사용한 HTML 요소의 3차원 개념화`이라고 한다.각각의 HTML 요소는 자신의 속성에 따른 우선순위를 사용해 3차원 공간을 차지한다.\n\n`Stacking Context`는 조건에 따라 `document` 어디에서나 다음 조건을 만족하는 element가 생성된다.\n\n* document의 root element. (`<html>`)\n* position이 absolute 또는 relative이고, z-index가 auto가 아닌 요소.\n* position이 fixed 또는 sticky인 요소. (sticky는 모든 모바일 브라우저에서는 해당하지만 구형 데스크톱 브라우저에서는 해당하지 않음)\n* 플렉스(flexbox (en-US)) 컨테이너의 자식 중 z-index가 auto가 아닌 요소.\n* 그리드(grid (en-US)) 컨테이너의 자식 중 z-index가 auto가 아닌 요소.\n* opacity가 1보다 작은 요소. (불투명도 명세 참고)\n* mix-blend-mode가 normal이 아닌 요소.\n* 다음 속성 중 하나라도 none이 아닌 값을 가진 요소.\n  * transform\n  * filter\n  * perspective (en-US)\n  * clip-path\n  * mask / mask-image (en-US) / mask-border (en-US)\n* isolation이 isolate인 요소.\n* -webkit-overflow-scrolling이 touch인 요소.\n* will-change의 값으로, 초깃값이 아닐 때 새로운 쌓임 맥락을 생성하는 속성을 지정한 요소.\n* contain이 layout, paint, 또는 둘 중 하나를 포함하는 값(strict, content 등)인 요소.\n\n우리는 여기서 `* opacity가 1보다 작은 요소. (불투명도 명세 참고)` 요 부분에 주목할 필요가 있다.\n설정한 에니메이션에서는 기본값인 opacity 1에서 0으로 변화했다가 다시 1로 변화했기에 해당 요소가 별도의 레이어를 가졌다는 것을 알 수 있다.\n그래서 레이아웃 과정부터 요소들을 재계산하고 레이어를 생성하여 재배치해줄 과정이 필요한 것이다.\n\n그래서 처음부터 opacity 값을 1보다 작은 0.99로 주고 0으로 변한 후 다시 0.99로 돌아왔을 경우에는 다음과 같이 우리가 원했던 Paint 부터 시작되는 것을 볼 수 있었다.\n\n<img style={{margin:\"20px 0\"}} alt=\"blink-opcity1\" src=\"https://user-images.githubusercontent.com/56423604/269052188-a640204a-4c53-405f-aade-aefa052dede6.png\"/>\n\n# 참조\n- [[10분 테코톡] ☕️ 체프의 브라우저 렌더링](https://www.youtube.com/watch?v=sJ14cWjrNis)\n- [브라우저의 렌더링 과정 & Render Tree와 DOM Tree의 차이점](https://hyojin96.tistory.com/entry/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95-Render-Tree%EC%99%80-DOM-Tree%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90)\n- [[Critical Rendering Path] Render-Tree Construction, Layout, and Paint](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko)\n- [Constructing the Object Model](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko)\n- [Render-tree Construction, Layout, and Paint](https://web.dev/critical-rendering-path-render-tree-construction/?hl=ko)\n- [Blink의 Renderer Process](https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit#heading=h.v5plba74lfde)\n- [[CSS] opacity는 reflow가 발생 안 한다구요...? 정말??](https://blinders.tistory.com/93)\n- [[MDN] Stacking Context](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context)",
        "fields": { "slug": "blog/post/network/browser-rendering" },
        "path": ""
      },
      {
        "frontMatter": {
          "date": "2023-09-05T15:00:00",
          "title": "Yarn Berry는 왜 빠른가?",
          "tags": ["npm", "yarn", "yarn_berry"],
          "description": "yarn berry pnp에 대해 알아보자",
          "published": true
        },
        "body": "<aside>\n  <p className={\"text-lg\"}>📖&nbsp;&nbsp;패키지 매니저(package manager)</p>\n\n  package manager 는 package를 다루는 작업(설치, 업데이트, 수정, 삭제 등)의 작업을 편리하고 안전하게 수행하기 위해 운영체제와 프로그래밍 언어에서 사용되는 툴이다.\n\n  공통적으로, 아래의 기능들을 제공한다.\n\n  - 패키지의 dependency(의존성)를 관리한다. : 모든 dependencies 일괄 설치 또는 업데이트 / dependencies 추가, 업데이트, 삭제\n  - 패키지의 보안을 관리 : 신뢰성(authenticity, 확실성: 출처가 확실함)과 무결성(integrity)을 보장한다.\n  - 여러 패키지를 기능에 따라 그룹으로 묶어서 관리한다.\n  - 패키지 압축 해제\n  - Software repository로부터 패키지를 찾고, 다운로드하고, 설치하고, 업데이트\n  - metadata 작성 및 관리\n  - 스크립트 실행\n  - 패키지 퍼블리시\n  - Ubuntu 운영체제의 apt(Advanced Package Tool)가 대표적인 운영체제 패키지 매니저의 예로 콘솔을 사용한 sudo apt-get install 명령어를 통해 패키지를 설치할 수 있다.\n  - Python과 PHP, Node.js 등 많은 프로그래밍 언어들은 각각 자신만의 패키지 매니저와 software repository를 가지고 있다.\n  - JavaScript에는 npm, yarn berry(yarn 2.0+), yarn classic(yarn 1.0), pnpm 등이 존재한다.\n</aside>\n\n<aside>\n  <p className={\"text-lg\"}>📖&nbsp;&nbsp;패키지(package)</p>\n\n  라이브러리(library)와 유사한 개념으로 라이브러리가 코드의 작성을 위해 사용되는 코드의 묶음이라면, 패키지는 코드의 배포를 위해 사용되는 코드의 묶음이다. 따라서 패키지는 경우에 따라 라이브러리를 포함할 수 있으며, 일반적으로 라이브러리나 실행 파일(executable)을 포함한다.\n\n  패키지는 다음 3가지 정보를 가지고 있는 코드의 배포 단위이다.\n\n  - 컴파일한 소프트웨어의 바이너리(binary)\n  - 환경 설정(configuration)에 관련된 정보\n  - 의존(dependency)에 관련된 정보\n</aside>\n\n<aside>\n  <p className={\"text-lg\"}>📖&nbsp;&nbsp;의존성(dependency)</p>\n\n  많은 패키지들은 반드시 필요한 다른 패키지들이 존재할 수 있다. 이에 대해 기본 패키지를 제대로 동작시키기 위해 필요한 다른 패키지를 dependency라고 말한다.\n\n  - 패키지를 사용하고자 할때 dependency에 해당되는 다른 패키지들을 전부 설치해줄 필요가 있다.\n\n  ⇒ 패키지의 dependency를 위해 설치한 패키지에도 dependency가 존재할 수 있으면 이러한 현상이 연속적으로 발생할 수 있다. 또한 같은 패키지의 다른 버전을 요구할 수도 있다. 이러한 상황을 dependency hell 이라고 한다.\n\n  dependency hell이 발생하면 사용자가 수동으로 패키지를 관리하기에 쉽지 않기에 이러한 상황을 해결하고자 패키지 매니저를 사용한다.\n</aside>\n\n# Yarn이란?\n\n> `Yet Another Resource Negotiator`의 약자로 Node.js에서 만든 새로운 패키지 관리 시스템이다.\n>\n- [링크된 GitHub 레포](https://github.com/yarnpkg/berry)에서 소스코드를 확인할 수 있다.\n- `Yarn`은 1.0과 2.0이 존재하는데 1.0을 `yarn classic`, 2.0을 `yarn berry`라고 한다. 두 버전에도 큰 차이점들이 존재한다.\n- 대부분의 개념과 프로세스에 npm을 기반으로 설계했지만, 이외에 npm과 대조적으로, yarn은 초기버전의 npm의 주요 문제점 중 하나였던 설치 프로세스의 속도를 높이기 위해 작업을 병렬화하는 등 패키지 관리자 환경에 큰 영향을 미쳤다.\n\n# Yarn Classic\n\n- <span className={\"text-blue-700\"}>`npm`과 동일하게 `node_modules` 내부에 flat하게 패키지를 설치하여 (=동일한 디렉토리에 flat하게 저장) 관리</span> : 매 탐색마다 수 많은 폴더와 파일을 실제로 열고 닫으면서 검색할 수 밖에 없으며, `node_modules` 중첩 등 경우에 따라서는 순회해야 하는 경로가 이보다 복잡해질 수 있다.\n- 패키지 병렬적으로 설치\n- native 모노레포 지원: `javascript`와 native 코드 간의 참조 관계를 통해 모듈이 설치가 되거나 실행이 된다.\n- cache-aware 설치\n- 오프라인 캐싱: 오프라인 미러 활용으로 오프라인에서도 패키지 설치 가능\n- lock 파일: `yarn.lock` 파일을 자동 생성하고 의존 모듈을 순서대로 적어둠 ⇒ lock 파일의 장점으로 특정 버전만 설치가 가능\n<aside className={'ml-7'}>\n  <p className={\"text-lg\"}>📖&nbsp;&nbsp;lock 파일</p>\n\n  매 설치시 결정적이고 (= 항상 같은 버전을 설치하고) 예측가능한 특성을 보장하기 위하여, 각 버전의 정확한 의존성 버전을 저장하고 있는 파일\n\n  `package.json`은 정확한 버전이 기재되어 있는 것이 아니고, `>= 1.2.5`와 같은 형식의 버전 범위이 존재하기에 `lock` 파일이 없다면 매 설치마다 설치하는 버전이 달라질 수 있다.\n  <img src={\"https://user-images.githubusercontent.com/56423604/265745060-76db5c1d-f6e2-430c-819a-7ee268976180.png\"} alt={\"yarn-berry-pnp-lock\"}/>\n</aside>\n\n# Yarn Berry\n\n> Yarn 의 2.0 이후의 버전이며 현재 업데이트 되고 있는 버전이다.\n<aside className={'ml-7'}>\n  <p className={\"text\"}>💡&nbsp;&nbsp;`Yarn Berry`는 `Yarn Classic` 환경 위에서 동작한다.</p>\n\n  Yarn Berry를 설치하게 되면 `.yarn` 안에 `releases` 디렉토리가 생성되고 그 안에 `yarn-3.6.3.cjs` 파일이 생성된 것을 확인할 수 있다.\n\n  ![yarn-berry-pnp-cjs](https://user-images.githubusercontent.com/56423604/265746436-b091eaf3-ff5f-4c26-8060-754db6bc8945.png)\n</aside>\n\n## Plug'n'Play(PnP)\n\n> [Plug'n'Play(PnP)](https://yarnpkg.com/features/pnp)\n>\n>  node가 모듈을 검색하는 방식\n\n- `node_modules` 방식이 아닌 pnp 방식을 이용하여 `node_modules` 디렉토리에 모든 패키지를 설치하는 것이 아닌, 패키지들을 zip 파일로 압축하여 사용 ⇒ 용량이 훨씬 적으므로 특히 docker 이미지를 생성하기 위한 복사 단계 소요시간이 단축\n- `node_modules` 을 생성하지만, 의존성 조회 테이블이 있는 `.pnp.cjs` 파일 생성\n\n    해당 파일에는 관련된 패키지 이름과 버전, 위치, 의존성 리스트 등이 적혀 있다.\n\n    ⇒ 폴더가 아닌 파일이기에 효율적인 처리\n\n- 모든 패키지는 `.yarn/cahce/` 에 zip 파일로 저장됨 ⇒ 압축된 용량\n\n    ⇒ Yarn berry 에서는 다수의 파일(`node_modules`)을 설치하지 않고(: <span className={\"text-blue-700\"}>Zero-Installs</span>), 한개의 텍스트 파일(`.pnp.cjs`)을 만들면 된다(실제 파일은 zip 형태로 `yarn/cache` 에 저장)\n\n### Zero-Install\n`.yarn/cahce/`가 `node_modules`보다 현저하게 사이즈가 작기 때문에 git 에서 관리할 수 있다. 레포지토리에 zip파일을 포함시켜서 커밋을 하기때문에 별도로 패키지들을 다운로드할 필요가 없다.\n\n\n# Yarn Berry와 NPM 비교하기 : PnP 알아보기\n\n🔗 test project : https://github.com/COYO-HM/package_test.git\n\n`vite`의 vanila template를 사용하여 `typesciript`를 적용한 프로젝트를 생성하였다.\n\n## package.json\n<div className={\"flex gap-4\"}>\n  <img src={\"https://user-images.githubusercontent.com/56423604/265748898-830c80d2-db14-4c43-ae14-b65869616496.png\"} alt={\"yarn-berry-pnp-package-npm\"} width={\"50%\"}/>\n  <img src={\"https://user-images.githubusercontent.com/56423604/265748890-5c997df2-ae92-470d-bf02-638c4b4c0472.png\"} alt={\"yarn-berry-pnp-package-yarn\"} width={\"50%\"}/>\n</div>\n\n## 프로젝트 디렉토리 비교\n우선 `package-lock.json` 대신에 `yarn.lock`이 존재하는 것을 확인할 수 있다.\n\n그리고 두드러지는 차이는 `yarn berry`는 `node_modules`가 없는 것을 확인할 수 있다. 그 대신에 `.yarn`이라는 디렉토리가 존재한다.\n\n<div className={\"flex gap-4\"} style={{alignItems: \"flex-start\", marginBottom: \"20px\"}}>\n  <img src={\"https://user-images.githubusercontent.com/56423604/265750887-71636302-0d9d-48d4-a4be-5bae8c292c8f.png\"} alt={\"yarn-berry-pnp-dir-npm\"} width={\"50%\"} />\n  <img src={\"https://user-images.githubusercontent.com/56423604/265750878-bdda4f9a-e356-4d35-9305-0cad148ee22e.png\"} alt={\"yarn-berry-pnp-dir-yarn\"} width={\"50%\"} />\n</div>\n\n\n`package.json`에 확인해보면 이 프로젝트가 의존성을 가지고 있는 패키지는 `typescript`, `vite`, `@mui/material`, `@mui/styled-engine-sc`, `styled-components` 이다.\n\n그런데 `node_modules`를 살펴보면 우리가 설치하지 않은 수 많은 패키지들이 있는 것을 확인할 수 있다. 위에서 언급 했던 설치한 패키지들이 의존성을 가지고 있는 패키지들이 더불어 설치된 것을 확인힐 수 있다.\n\n<img src={\"https://user-images.githubusercontent.com/56423604/265752989-2724e411-dbbb-43fe-bd67-dbe5d8acb1c0.png\"} alt={\"yarn-berry-pnp-node-modules\"} style={{margin:\"20px auto\"}}/>\n\n\n`yarn berry` 역시 살펴보면, `.yarn/cache` 파일에 수많은 패키지들이 디렉토리가 아닌 압축된 파일(.zip)로 저장된 것을 확인할 수 있다.\n\n\n<img src={\"https://user-images.githubusercontent.com/56423604/265754149-e1957d79-1af6-4037-9080-d16cfaeb3a91.png\"} alt={\"yarn-berry-pnp-size-node-modules\"} style={{margin:\"20px auto\"}}/>\n\n둘의 크기를 비교해보면 `node_modules`는 121M, `.yarn/cache`는 49M 으로 확연하게 `yarn berry`가 작은 것을 확인할 수 있다.\n\n<div style={{display: \"flex\", gap: \"16px\", alignItems: \"flex-start\", margin: \"20px 0\"}}>\n  <img src={\"https://user-images.githubusercontent.com/56423604/266036292-83bef4bd-9090-4b96-94e4-614cac43f870.png\"} alt={\"yarn-berry-pnp-size-node-modules\"} width={\"50%\"}/>\n  <img src={\"https://user-images.githubusercontent.com/56423604/266036898-46efcf60-87e7-4287-8fbd-a299c3fce307.png\"} alt={\"yarn-berry-pnp-size-cache\"} width={\"50%\"}/>\n</div>\n\n\n\n\n다만 같은 패키지를 설치한 상태임에도 불구하고 `node_modules`는 66개의 디렉토리를 가지고 있고, `.yarn/cache`에는 366개의 zip 파일이 있다.\n\n`.yarn/cache`를 살펴보면 다음과 같이 같은 패키지가 여러 버전으로 설치된 것을 확인할 수 있다.\n\n<img src={\"https://user-images.githubusercontent.com/56423604/265757847-720f6db4-e66d-46d9-9b28-6ebe786c46e8.png\"} alt={\"yarn-berry-pnp-yarn-cache-duplicated\"} width={\"90%\"} style={{margin:\"20px auto\"}}/>\n\n그런데 `node_modules`를 보면 해당 패키지 이름을 가진 하나의 디렉토리만이 존재하는 것을 볼 수 있다. 해당 디렉토리를 보면 18.2.0의 버전만이 설치되었다.\n\n<div style={{display: \"flex\", gap: \"16px\", alignItems: \"flex-start\", margin: \"20px 0\"}}>\n  <img src={\"https://user-images.githubusercontent.com/56423604/265759770-d6f250c4-ef45-49bc-a714-979396f0d9f7.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs\"} width={\"50%\"}/>\n  <img src={\"https://user-images.githubusercontent.com/56423604/265759767-03b6f435-2cf8-4772-a07f-2360594dc49c.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs-ver\"} width={\"50%\"}/>\n</div>\n\n그러면 16.x.x 버전은 어디에 설치된 것일까? `package-lock.json`를 확인해 볼 수 있다.\nhoist-non-react-statics와 prop-types에서 reactjs의 16.x.x 버전이 각각의 디렉토리 안에 중복되어 설치된 것을 확인할 수 있다.\n\n<img src={\"https://user-images.githubusercontent.com/56423604/265760444-147a6f69-fdc7-4514-8938-82923f237f16.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs-0\"} style={{margin:\"10px auto\"}}/>\n<img src={\"https://user-images.githubusercontent.com/56423604/265760436-e2e510f7-345f-435e-9b62-6165da434963.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs-1\"} style={{margin:\"10px auto\"}}/>\n<img src={\"https://user-images.githubusercontent.com/56423604/265760432-ea9f3c67-7320-4e6d-b9f4-337acfec13aa.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs-2\"} style={{margin:\"10px auto\"}}/>\n<img src={\"https://user-images.githubusercontent.com/56423604/265760426-9291d8f8-6d84-4b8d-81f0-80d641e0e750.png\"} alt={\"yarn-berry-pnp-size-npm-reactjs-3\"} style={{margin:\"10px auto\"}}/>\n\n`npm`은 같은 패키지에 대해 먼저 설치된 버전을 우선 설치하고 다른 패키지에 이미 설치된 패키지에 대하여 의존성이 있을 때 버전이 같은 경우에는 이미 설치된 패키지를 사용하지만 다른 버전이 필요할 경우 하위 `node_modules`에 해당 디렉토리를 설치한다.\n\n그렇기 때문에 같은 프로젝트여도 패키지 설치 순서에 따라 `node_modules`가 달라질 수 있으며 중복되어 패키지가 설치될 수 있기에 디스크가 낭비된다.\n\n반면에 `yarn berry`는 `.yarn/cache`에 일괄적으로 모든 패키지를 설치한다. 이로인해 `yarn berry`는 `npm`과 다르게 같은 의존성을 가진 프로젝트의 경우 일관된 `.yarn/cache`를 보장한다.\n\n또한, `npm`의 경우 하나의 패키지가 삭제되면 해당 패키지의 의존성으로 인해 설치된 패키지가 다른 패키지에 의존성이 있을까 염두하여 삭제되지 않는다. 이러한 현상을 유령 의존성(Phantom Dependency)이라고 한다.\n\n<img src={\"https://user-images.githubusercontent.com/56423604/265774377-18c51d14-4f7b-42e6-865d-c371c8de236e.png\"} alt={\"yarn-berry-pnp-Phantom-Dependency\"} width={\"100%\"} style={{margin:\"20px auto 5px\"}}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 10px\"}}>이미지 출처: 토스 테크 블로그 [node_modules로부터 우리를 구원해 줄 Yarn Berry](https://toss.tech/article/node-modules-and-yarn-berry)</div>\n\n\n반면에 `yarn berry`는 `.pnp.cjs`를 확인하여 해당 패키지의 저장 위치, 버전 정보, 참보 정보 등을 담고 있기 때문에 의존성 검색에 더욱이 효율적으로 진행할 수 있을 뿐만 아니라 유령 의존성(Phantom Dependency)을 방지할 수 있다.\n\n```\n[\"styled-components\", [ // 패키지 이름\n  [\"npm:6.0.7\", { // 버전 정보\n    \"packageLocation\": \"./.yarn/cache/styled-components-npm-6.0.7-34b6b5cc79-38645f38f1.zip/node_modules/styled-components/\", // 저장된 위치\n    \"packageDependencies\": [ // 의존성 참조하는 패키지\n      [\"styled-components\", \"npm:6.0.7\"]\n    ],\n    \"linkType\": \"SOFT\"\n  }],\n  ...\n]\n```\n\n\n\n\n# 참조\n- [패키지 매니저(Package Manager)란?](https://aahc.tistory.com/14)\n- [node_modules로부터 우리를 구원해 줄 Yarn Berry](https://toss.tech/article/node-modules-and-yarn-berry)\n- [npm, yarn, pnpm 비교해보기](https://yceffort.kr/2022/05/npm-vs-yarn-vs-pnpm#%EC%84%B1%EB%8A%A5%EA%B3%BC-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1)\n- [[개발] 모노레포에서 react-native의 모듈 해석](https://devethan.medium.com/%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EC%97%90%EC%84%9C-react-native%EC%9D%98-%EB%AA%A8%EB%93%88-%ED%95%B4%EC%84%9D-5a01e4f346cf)\n- https://github.com/itjustbong/fe-package-mono\n- [[Yarn berry] Yarn Berry 환경에 대한 이해도 높이기](https://helloinyong.tistory.com/343)\n- [yarn berry 적용 및 ECS 배포 방식 변경을 통해 빌드/배포 속도 개선하기](https://medium.com/wantedjobs/yarn-berry-%EC%A0%81%EC%9A%A9-%EB%B0%8F-ecs-%EB%B0%B0%ED%8F%AC-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%B9%8C%EB%93%9C-%EB%B0%B0%ED%8F%AC-%EC%86%8D%EB%8F%84-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-535a8adff677)\n- [JavaScript package managers compared: npm, Yarn, or pnpm?](https://blog.logrocket.com/javascript-package-managers-compared/)\n- [리멤버 웹 서비스 좌충우돌 Yarn Berry 도입기](https://blog.dramancompany.com/2023/02/%EB%A6%AC%EB%A9%A4%EB%B2%84-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A2%8C%EC%B6%A9%EC%9A%B0%EB%8F%8C-yarn-berry-%EB%8F%84%EC%9E%85%EA%B8%B0/)\n- [Yarn PnP 프로젝트에서 Commitizen 설정하기](https://imch.dev/posts/commitizen-with-yarn-pnp/)",
        "fields": { "slug": "blog/post/yarn-berry-pnp" },
        "path": ""
      },
      {
        "frontMatter": {
          "date": "2023-02-21T15:00:00",
          "title": "Github Page로 React 프로젝트 무료로 배포해보기",
          "tags": ["javascript", "react", "githubpage"],
          "description": "Github Page로 CRA로 만든 프로젝트를 무료로 배포해보자",
          "published": true
        },
        "body": "> Github Page\n>\n> github repository에 올린 `javaScript` 프로젝트를 배포하여 정적 웹 사이트를 무료로 호스팅할 수 있게 하는 서비스이다.\n\n이전에 `react`로 만든 프로젝트를 한번 Github Page로 배포해보자.\n\n# Project Github page 라이브러리 설치\n\n```jsx\nnpm i gh-pages --dev\n```\n\n# Package.json 설정하기\n\n`package.json` 에 다음과 같이 홈페이지 주소를 추가해준다.\n\n```jsx\n \"homepage\": \"https://사용자 아이디.github.io/레포지토리 이름/\",\n```\n\n![homepage](https://user-images.githubusercontent.com/56423604/272323342-5973abc2-ae9c-4d22-b201-fa1a1670c876.png)\n\n배포를 위해 `deploy`를 추가해준다.\n\n![deploy](https://user-images.githubusercontent.com/56423604/272323504-ba7b0ddc-1993-48a9-b13e-5ca793903ab5.png)\n\n다음 명령어를 입력해 배포해준다.\n\n```bash\nnpm run deploy\n```\n\n# Github Page Repository에서 설정\n\n- Repository 메뉴에서 Settings 메뉴로 들어가준다.\n\n![Settings](https://user-images.githubusercontent.com/56423604/272323676-9d87ca38-23f0-4362-ab18-6579bb7fcb44.png)\n\n- Settings 메뉴 중에 Pages 메뉴로 들어가면 Branch가 none으로 설정되어 있다.\n\n![Pages](https://user-images.githubusercontent.com/56423604/272323875-8f465853-60ef-47bb-a438-971d29439e19.png)\n\n- 생성된 gh-pages 브랜치로 설정해준다.\n\n![gh-pages](https://user-images.githubusercontent.com/56423604/272323892-69e2bb2b-8beb-4080-94ae-34f5898749ba.png)\n\n다음과 같이 배포된 것을 확인할 수 있다.\n\n![complete](https://user-images.githubusercontent.com/56423604/272323908-06d51ec2-e55c-4b00-9968-f60844794012.png)\n\n# 참조\n\n- [Github Docs](https://docs.github.com/ko/pages)\n",
        "fields": { "slug": "blog/post/git/github-page-publish" },
        "path": ""
      }
    ],
    "tags": [
      { "tag": "all", "count": 21 },
      { "tag": "javascript", "count": 9 },
      { "tag": "react", "count": 8 },
      { "tag": "typescript", "count": 6 },
      { "tag": "network", "count": 4 },
      { "tag": "css", "count": 2 },
      { "tag": "redux", "count": 2 },
      { "tag": "axios", "count": 2 },
      { "tag": "npm", "count": 1 },
      { "tag": "yarn", "count": 1 },
      { "tag": "yarn_berry", "count": 1 },
      { "tag": "styled_components", "count": 1 },
      { "tag": "redux_persist", "count": 1 },
      { "tag": "lodash", "count": 1 },
      { "tag": "python3", "count": 1 },
      { "tag": "nextjs", "count": 1 },
      { "tag": "githubpage", "count": 1 },
      { "tag": "git", "count": 1 },
      { "tag": "intellij", "count": 1 },
      { "tag": "emotion", "count": 1 },
      { "tag": "gatsby", "count": 1 },
      { "tag": "programming", "count": 1 }
    ]
  },
  "__N_SSG": true
}
