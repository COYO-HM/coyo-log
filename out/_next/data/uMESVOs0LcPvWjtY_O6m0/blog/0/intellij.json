{
  "pageProps": {
    "posts": [
      {
        "frontMatter": {
          "date": "2023-09-24T15:00:00",
          "title": "git commit template 등록하기",
          "tags": ["git", "intellij"],
          "description": "git commit template 등록하고 IntelliJ에서 사용해보기",
          "published": true,
          "thumbnail": "https://user-images.githubusercontent.com/56423604/272324652-55a437a4-af2d-4809-9308-5a915847004f.png"
        },
        "body": "> **git commit template**\n>\n> commit 시에 등록한 commit template을 보여주어 commit message를 작성할 때 일정한 스타일을 유지할 수 있도록 도와준다.\n\n# git commit template 등록하기\n\n## template 파일 생성하고 작성하기\n\n1. `.git` 폴더가 있는 위치에 `.gitmessage.txt` 파일을 생성한다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_message_txt\"} src={\"https://user-images.githubusercontent.com/56423604/270172830-eca18299-d8a3-4aee-9e0f-9c1323305df9.png\"}/>\n\n2. 생성한 .gitmessage.txt 에 내용을 작성하면 된다.\n - `#` 으로 시작하면 주석 처리되어 커밋에 보이지 않는다.\n - 다음 사이트를 참고하여 본인에 맞게 룰을 작성하면 된다.\n\n<aside>\n  🔗 Commit message rule\n\n  - [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)\n  - [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n  - [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n</aside>\n\n  ```\n  # <타입> : <제목> 형식으로 작성하며 제목은 최대 50글자 정도로만 입력한다.\n\n  ################\n  # 본문(추가 설명)을 아랫줄에 작성한다.\n\n  ################\n  # 꼬리말(footer)을 아랫줄에 작성한다.\n\n  ################\n  # FEAT : 새로운 기능 추가\n  # FIX : 버그 수정\n  # DOCS : 문서 수정\n  # TEST : 테스트 코드 추가\n  # REFACTOR : 코드 리팩토링\n  # STYLE : 코드 의미에 영향을 주지 않는 변경사항\n  # CHORE : 빌드 부분 혹은 패키지 매니저 수정사항\n  ################\n        ```\n\n\n## commit message template 설정하기\n\n아래 명령어를 terminal 에 입력한다.\n\n```bash\ngit config --global commit.template .gitmessage.txt\n```\n\ntemplate을 적용하면 git commit 할때마다 지정한 파일이 `vi` 로 나온다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_template_vim\"} src={\"https://user-images.githubusercontent.com/56423604/270172961-313f6ee3-20ab-450a-a758-581a0be2e384.png\"}/>\n\n`i` 를 눌러 제목 본문 꼬리말을 작성하고 `esc`를 누른 후에 `:wq!`를 입력한 후 `enter`를 눌러 작성한 것을 저장하여 커밋한다.\n\n# IntelliJ에서 사용해보기\n\n## Custom commit template 사용하기\n\n위에서 설정한 commit message template을 IntelliJ에서 commit 할때 사용할 수 있다.\n\n1. Settings > Plugins > MarketPlace 에서 해당 plugin 을 찾아 설치해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template\"} src={\"https://user-images.githubusercontent.com/56423604/270173032-c1b65887-c651-45fa-b573-c2c35b479e54.png\"}/>\n\n\n1. 설정한 commit message template 적용하기\n - Settings > Tools > Commit Message Template 에서 template을 적용한다.\n - 위에 text를 직접 입력해도 되고, Load Template File에 만들어둔 text 파일 directory 주소를 입력해도 된다.\n\n맥의 경우 파일을 찾을 때, `.gitmessage.txt` 파일의 경우 숨겨질 수 있기에 `command` + `shift` + `.` 을 눌러 숨김 파일도 볼 수 있도록 해주자.\n\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template_tools\"} src={\"https://user-images.githubusercontent.com/56423604/270173233-597e3a7d-19b5-4c73-a3a7-88957668d1be.png\"}/>\n\n    적용해주면 commit 할때, 다음과 같이 입력한 template 이 나온다.\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_example\"} src={\"https://user-images.githubusercontent.com/56423604/270173232-c39ce874-df0c-487f-94a9-6e706cad0c1c.png\"}/>\n\n\n## ****Conventional**** commit template 사용하기\n\ntemplate 설정 없이 기존의 conventional commit template을 사용하는 plugin도 있다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_plugin\"} src={\"https://user-images.githubusercontent.com/56423604/270173230-205f29af-127d-45d0-a2a9-cadc27cad49c.png\"}/>\n\n해당 plugin은 설치한 후에 commit 할때 create commit message 버튼 (아래 사진에 동그라미 쳐진 버튼) 을 클릭하면\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit1\"} src={\"https://user-images.githubusercontent.com/56423604/270173229-5e16e8a9-67e0-427b-91d8-482f01b8f78a.png\"}/>\n\n다음과 같은 창이  나온다. 해당 창에서 내용을 입력하고 OK 버튼을 누르면,\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit2\"} src={\"https://user-images.githubusercontent.com/56423604/270173227-92414cb3-8b8f-4366-ae11-95a81c3c8efe.png\"}/>\n\n다음과 같이 커밋 메세지를 작성해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit3\"} src={\"https://user-images.githubusercontent.com/56423604/270173223-83358c13-96c8-4d27-9fa2-7f86d2ae76ff.png\"}/>\n\n# 참조\n\n- [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n- [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n- [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)",
        "fields": { "slug": "blog/post/git/git-commit-template" },
        "path": "blog/git/git-commit-template.mdx"
      }
    ],
    "allTags": [
      { "tag": "all", "count": 21 },
      { "tag": "javascript", "count": 9 },
      { "tag": "react", "count": 8 },
      { "tag": "typescript", "count": 6 },
      { "tag": "network", "count": 4 },
      { "tag": "css", "count": 2 },
      { "tag": "redux", "count": 2 },
      { "tag": "axios", "count": 2 },
      { "tag": "npm", "count": 1 },
      { "tag": "yarn", "count": 1 },
      { "tag": "yarn_berry", "count": 1 },
      { "tag": "styled_components", "count": 1 },
      { "tag": "redux_persist", "count": 1 },
      { "tag": "lodash", "count": 1 },
      { "tag": "python3", "count": 1 },
      { "tag": "nextjs", "count": 1 },
      { "tag": "githubpage", "count": 1 },
      { "tag": "git", "count": 1 },
      { "tag": "intellij", "count": 1 },
      { "tag": "emotion", "count": 1 },
      { "tag": "gatsby", "count": 1 },
      { "tag": "programming", "count": 1 }
    ],
    "category": "intellij",
    "page": 0
  },
  "__N_SSG": true
}
