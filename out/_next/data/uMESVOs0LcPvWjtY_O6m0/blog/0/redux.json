{"pageProps":{"posts":[{"frontMatter":{"date":"2023-01-25T15:00:00","title":"TypeScript에서 Redux-ToolKit 사용하기","tags":["react","typescript","redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true},"body":"# 설치\n\n```bash\nnpm install @reduxjs/toolkit\n\nyarn add @reduxjs/toolkit\n```\n\n# Store\n\n```TypeScript\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {},\n})\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n```\n\n`index.tsx`\n\n```TypeScript\nimport React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root');\n)\n```\n\n# `UseDispatch`, `UseSelector`\n\n```TypeScript\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from '../Store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n```\n\n# CreateSlice\n\n`ExampleReducer.ts`\n\n```TypeScript\ninterface IExampleState {\n\t// reducer type들 표시\n\tuserInfo: {name: string, id: string} | null\n}\n\nconst initialState: IExampleState = {\n\t// 초기 상태 설정\n\tuserInfo: null\n}\n\nexport const ExampleSlice = createSlice({\n\tname: 'EXAMPLE',\n\tinitialState,\n\treducers: {\n\t\tupdateName: (state, action) => {\n\t\t\tstate.userInfo: {\n\t\t\t\t...state.userInfo,\n\t\t\t\taction.payload\n\t\t\t}\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\n\t\t\tstate.userInfo = payload\n\t\t})\n\t}\n})\n\nexport const { updateName } = ExampleSlice.actions\nexport const ExampleReducer = {\n\texample: ExampleSlice.reducer\n}\n```\n\n# CreateAsyncThunk\n\n```TypeScript\nexport const getUserInfoAsync = createAsyncThunk<\n  {\n    /*성공시에 출력될 data의 type*/\n  },\n  {\n    /*param의 type*/\n  }\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\n```\n\n# 참조\n\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\n","fields":{"slug":"blog/post/redux/RTK-with-ts"},"path":"blog/redux/RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-08-30T15:00:00","title":"Redux Persist","tags":["javascript","redux_persist","redux"],"description":"Redux-Persist로 새로고침해도 데이터 유지하기","published":true},"body":"#개념\n\nRedux의 Store는 앱을 종료하면 모든 state가 사라지기에 캐시 기능을 구현하는 또다른 장치가 필요\n\n→  Web에서는 localStorage 혹은 Session, Native에서는 AsyncStorage 등을 써서 state를 저장, 새로고침을 하여도 저장공간에 있는 데이터를 redux에 불러 올 수 있다.\n\n: token 등의 정보만 저장하면 문제가 없으나 많은 정보를 저장하게 되면, 불필요한 시간 증가 / 용량 부족\n\n⇒ <strong>Redux Persist</strong>를 사용하여 이러한 문제 해결\n\n# 설치\n\n<aside>\n❗ `react-redux`도 반드시 설치\n\n</aside>\n\n```bash\nnpm install redux-persist\n```\n\n# 사용법\n\n## reducer에 persist 정의\n\n- localStorage에 저장하고 싶으면 `import storage from 'redux-persist/lib/storage`\n- session Storage에 저장하고 싶으면 `import storageSession from 'redux-persist/lib/storage/session`\n\n```jsx\n\nimport { combineReducers } from \"redux\";\nimport { persistReducer, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // localStorage에 저장합니다.\n\nimport auth from \"./auth\";\nimport site from \"./board\";\n\nconst persistConfig = {\n  key: \"root\",\n\ttransforms: [],\n  storage,\n  whitelist: [\"auth\"]\n\t// whitelist: auth, site 2개의 reducer 중에 auth reducer만 localstorage에 저장합니다.\n  // blacklist: 그것만 제외합니다\n};\n\nexport const rootReducer = combineReducers({\n  auth,\n  site,\n});\n\nconst persistReducer = persistReducer(persistConfig, rootReducer);\nconst store = createStore(rootReducer);\nconst persist = persistStore(store);\n\nexport default {store, persist}\n```\n\n- `persistConfig`\n\n    ```tsx\n    interface PersistConfig<S, RS = any, HSS = any, ESS = any> {\n      version?: number;\n      storage: Storage;\n      key: string;\n    \t/**\n       *@deprecatedkeyPrefix is going to be removed in v6.\n       */\n    \tkeyPrefix?: string;\n      blacklist?: Array<string>;\n      whitelist?: Array<string>;\n      transforms?: Array<Transform<HSS, ESS, S, RS>>;\n      throttle?: number;\n      migrate?: PersistMigrate;\n      stateReconciler?: false | StateReconciler<S>;\n    \t/**\n       *@descUsed for migrations.\n       */\n    \tgetStoredState?: (config: PersistConfig<S, RS, HSS, ESS>) => Promise<PersistedState>;\n      debug?: boolean;\n      serialize?: boolean;\n      timeout?: number;\n      writeFailHandler?: (err: Error) => void;\n    }\n    ```\n\n\n## persist store 사용\n\n`src/index.js`\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './Store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>\n);\n```","fields":{"slug":"blog/post/react/redux-persist"},"path":"blog/react/redux-persist.mdx"}],"allTags":[{"tag":"all","count":21},{"tag":"javascript","count":9},{"tag":"react","count":8},{"tag":"typescript","count":6},{"tag":"network","count":4},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn_berry","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"lodash","count":1},{"tag":"python3","count":1},{"tag":"nextjs","count":1},{"tag":"githubpage","count":1},{"tag":"git","count":1},{"tag":"intellij","count":1},{"tag":"emotion","count":1},{"tag":"gatsby","count":1},{"tag":"programming","count":1}],"category":"redux","page":0},"__N_SSG":true}