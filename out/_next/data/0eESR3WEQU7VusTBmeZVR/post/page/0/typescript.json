{"pageProps":{"posts":[{"frontMatter":{"date":"2023-12-17T00:00:00","title":"NextJS에 GA4(Google Analytics) 적용하기","tags":["nextjs","gtag","google_analytics","typescript"],"series":["blog"],"description":"gtag에 알아보고 NextJS 블로그에 gtag4를 적용해보기","published":true,"thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/16f385a3-99bf-47fb-b926-9194f2589e68","path":"nextjs-gtag.mdx","key":"nextjs-gtag"},"body":"# Google Analytics\n\n> Google 애널리틱스는 웹사이트 및 앱에서 데이터를 수집하여 비즈니스에 유용한 정보를 제공하는 보고서를 작성하는 플랫폼입니다.\n>\n> - 웹사이트와 앱 데이터를 모두 수집하여 고객 여정을 더욱 자세히 파악\n> - 세션 기반 데이터 대신 이벤트 기반 데이터 사용\n> - 쿠키 없는 측정, 행동 및 전환 모델링과 같은 개인 정보 보호 설정 포함\n> - 예측 기능으로 복잡한 모델이 없는 가이드 제공\n> - 미디어 플랫폼에 직접 통합하여 웹사이트 또는 앱에서 더 편리하게 작업\n\n출처: [Analytics 소개](https://support.google.com/analytics/topic/14089939?hl=ko&ref_topic=14090456&sjid=16409339143174609399-AP)\n\ngoogle analytics는 google에서 제공하는 내 서비스의 트래픽이나 사용자 유입 등을 파악할 수 있도록 도와주는 분석 도구입니다.\n\n# gtag4 블로그에 적용하기\n\n## 측정 ID 생성하기\n\n우선 [google analytics](https://analytics.google.com/analytics/web/provision/#/provision) 에서 측정 시작을 눌러 계정을 만들어줍니다. 이미 계정이 있으신 경우에는 새 속성을 만들어 주시거나 기존 측정 ID를 사용하시면 됩니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/054e9d4b-974a-4458-85ab-074db9402899\"} alt={\"google-analytics-0\"} style={{margin:\"5px auto 20px\"}}/>\n\n계정 이름에 팀 명 혹은 회사명을 입력합니다. 아래의 계정 데이터 공유 설정은 각자 맞게 읽어보고 선택하시면 됩니다. 저는 default로 진행했습니다. 생성 후에도 계정 설정에서 수정하실 수 있습니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/0ae8a4dd-9194-4ecf-90bb-16049a8b0204\"} alt={\"google-analytics-1\"} style={{margin:\"5px auto 20px\"}}/>\n\n계속해서 정보를 입력하시고 약관 동의까지 해서 속성까지 생성해 줍니다.\n\n속성까지 생성하면 다음과 같은 홈화면이 나옵니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/16d21d56-4c82-4e67-8b9b-73e568e4b1f8\"} alt={\"google-analytics-2\"} style={{margin:\"5px auto 20px\"}}/>\n\n상단의 모든 계정을 클릭하여 자신이 생성한 계정과 속성을 한눈에 볼 수 있습니다.\n\n여기서 태크 지정 도움말 받기를 눌러 웹 스트림 세부 정보를 확인합니다. 아직 받은 정보가 없다면, 설치 안내가 뜨는데 우리는 직접 코드를 작성할 것이기에 닫아주고 세부 정보를 확인해 주도록 합니다.\n\n웹 스트림 세부정보에서 발급받은 측정 ID를 확인하고 복사하실 수 있습니다. 측정 ID는 프로젝트에서 환경 변수로 저장해 줄 것이기에 복사해줍니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/76d16c87-c908-4b3a-b06a-9fb757b0978a\"} alt={\"google-analytics-3\"} style={{margin:\"5px auto 20px\"}}/>\n\n## 프로젝트에 gtag 적용하기\n\ngtag를 설치줍니다. 만약 `typescript` 가 아닌 `javascript` + `nextjs` 인 경우에는 [nextjs의 공식 예시](https://github.com/vercel/next.js/tree/canary/examples/with-google-analytics)를 따라주시면 됩니다.\n\n```bash\nnpm install -D @types/gtag.js\n```\n<br/>\n아까 복사해 둔 측정 ID를 .env 파일 안에 환경 변수로 설정합니다.\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/417a70f3-d9a8-4a94-9ff4-0be4d38fcc0b\"} alt={\"env\"} style={{margin:\"5px auto 20px\"}}/>\n<br/>\n루트 디렉토리에 `lib/gtag.ts`  파일을 생성해주고, 다음 코드들을 작성합니다.\n\n`lib/gtag.ts`\n\n```tsx\n  export const GA_TRACKING_ID = process.env.NEXT_PUBLIC_GA_ID as string;\n\n  // https://developers.google.com/analytics/devguides/collection/gtagjs/pages\n  // 페이지 조회 전송을 위한 태그\n  export const pageview = (url: URL) => {\n    window.gtag(\"config\", GA_TRACKING_ID, {\n      page_path: url, // 페이지의 url\n      // page_path 말고도 page_title, page_location, send_page_view 등을 보낼 수 있습니다.\n    });\n  };\n\n  // https://developers.google.com/analytics/devguides/collection/gtagjs/events\n  // 이벤트 전송을 위한 태그로 위의 링크에서 더욱더 자세한 내용을 참조하실 수 있습니다.\n  export const event = (\n    action: Gtag.EventNames,\n    { event_category, event_label, value }: Gtag.EventParams\n  ) => {\n    window.gtag(\"event\", action, {\n      event_category,\n      event_label,\n      value,\n    });\n  };\n```\n\n- Google Analytics 페이지 조회 전송 파라미터 설명\n\n\n    | 이름 | 유형 | 필수 | 기본값 | 설명 |\n    | --- | --- | --- | --- | --- |\n    | page_title | string | 아니요 | document.title | 페이지의 제목입니다. |\n    | page_location | string | 아니요 | location.href | 페이지의 URL입니다. |\n    | page_path | string | 아니요 | location.pathname | 페이지 경로입니다. 재정의되는 경우 이 값은 / 문자로 시작해야 합니다. |\n    | send_page_view | boolean | 아니요 | true | 페이지 조회 전송 여부입니다. |\n\n    출처: [Google 애널리틱스 페이지 조회 측정](https://developers.google.com/analytics/devguides/collection/gtagjs/pages)\n\n\n- Google Analytics 이벤트 전송 파라미터 설명\n\n\n    | 이름 | 유형 | 기본값 | 설명 |\n    | --- | --- | --- | --- |\n    | `action` | string |  | Google 애널리틱스 이벤트 보고서에서 이벤트 액션으로 표시될 값입니다. |\n    | `category` | string | `general` | 이벤트의 카테고리입니다. |\n    | `label` | string |  | 이벤트 라벨입니다. |\n    | `value` | number |  | 이벤트 값으로 표시될 음수가 아닌 정수입니다. |\n\n    출처: [Google 애널리틱스 이벤트 측정](https://developers.google.com/analytics/devguides/collection/gtagjs/events)\n\n\n`pages/_app.tsx`\n\n```tsx\n  import { useRouter } from \"next/router\";\n  import Script from \"next/script\";\n  import Head from \"next/head\";\n  import { useEffect } from \"react\";\n  import * as gtag from \"lib/gtag\";\n  ...\n\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  const App = ({ Component, pageProps }: AppProps) => {\n    const router = useRouter();\n    useEffect(() => {\n      const handleRouteChange = (url: URL) => {\n        gtag.pageview(url);\n      };\n      router.events.on(\"routeChangeComplete\", handleRouteChange);\n      return () => {\n        router.events.off(\"routeChangeComplete\", handleRouteChange);\n      };\n    }, [router.events]);\n\n    return (\n      <>\n        {process.env.NODE_ENV !== \"development\" && (\n          <>\n            <Head>\n              <script\n                dangerouslySetInnerHTML={{\n                  __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n\n                gtag('config', '${gtag.GA_TRACKING_ID}', {\n                  page_path: window.location.pathname,\n                });\n              `,\n                }}\n              />\n            </Head>\n            {/* Global Site Tag (gtag.js) - Google Analytics */}\n            <Script\n              strategy=\"afterInteractive\"\n              src={`https://www.googletagmanager.com/gtag/js?id=${gtag.GA_TRACKING_ID}`}\n            />\n          </>\n        )}\n        ...\n      </>\n    );\n  };\n\n  export default App;\n```\n<br/>코드까지 작성하면 완성입니다. Google Analytics 에 들어가면 성공적으로 연결된 것을 확인할 수 있습니다!\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/8606eafe-ba20-4a16-9e19-81b51e5d65e3\"} alt={\"google-analytics-done\"} style={{margin:\"5px auto 20px\"}}/>\n\n# 참조\n\n- https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js","fields":{"slug":"nextjs-gtag"},"path":"nextjs-gtag.mdx"},{"frontMatter":{"date":"2023-01-26T00:00:00","title":"TypeScript에서 Redux-ToolKit 사용하기","tags":["react","typescript","redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true,"path":"redux-RTK-with-ts.mdx","key":"redux-RTK-with-ts"},"body":"# 설치\n\n```bash\nnpm install @reduxjs/toolkit\n\nyarn add @reduxjs/toolkit\n```\n\n# Store\n\n```TypeScript\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {},\n})\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n```\n\n`index.tsx`\n\n```TypeScript\nimport React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root');\n)\n```\n\n# `UseDispatch`, `UseSelector`\n\n```TypeScript\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from '../Store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n```\n\n# CreateSlice\n\n`ExampleReducer.ts`\n\n```TypeScript\ninterface IExampleState {\n\t// reducer type들 표시\n\tuserInfo: {name: string, id: string} | null\n}\n\nconst initialState: IExampleState = {\n\t// 초기 상태 설정\n\tuserInfo: null\n}\n\nexport const ExampleSlice = createSlice({\n\tname: 'EXAMPLE',\n\tinitialState,\n\treducers: {\n\t\tupdateName: (state, action) => {\n\t\t\tstate.userInfo: {\n\t\t\t\t...state.userInfo,\n\t\t\t\taction.payload\n\t\t\t}\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\n\t\t\tstate.userInfo = payload\n\t\t})\n\t}\n})\n\nexport const { updateName } = ExampleSlice.actions\nexport const ExampleReducer = {\n\texample: ExampleSlice.reducer\n}\n```\n\n# CreateAsyncThunk\n\n```TypeScript\nexport const getUserInfoAsync = createAsyncThunk<\n  {\n    /*성공시에 출력될 data의 type*/\n  },\n  {\n    /*param의 type*/\n  }\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\n```\n\n# 참조\n\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\n","fields":{"slug":"redux-RTK-with-ts"},"path":"redux-RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-11-10T00:00:00","title":"Axios Intercepter 사용해보기","tags":["react","typescript","axios","javascript"],"description":"Axios: Intercepter 사용해보기","published":true,"path":"axios-interceptor.mdx","key":"axios-interceptor"},"body":"> Axios Interceptors\n>\n>\n> `then` 또는 `catch`로 처리되기 전에 요청과 응답을 가로챌 수 있다.\n>\n> [출처: Axios Docs Interceptors](https://axios-http.com/kr/docs/interceptors)\n>\n- 요청(request)을 보내기 전이나 응답(response)을 받은 직후 지정된 작업을 수행할 수 있게 한다.\n- Token 처리나 Error 처리에 용이하다.\n\n# Interceptors 추가하기\n\n```tsx\n// 요청 인터셉터 추가하기\naxios.interceptors.request.use(function (config: AxiosRequestConfig) {\n    // 요청이 전달되기 전에 작업 수행\n    return config;\n  }, function (error) {\n    // 요청 오류가 있는 작업 수행\n    return Promise.reject(error);\n  });\n\n// 응답 인터셉터 추가하기\naxios.interceptors.response.use(function (response: AxiosResponse) {\n    // 2xx 범위에 있는 상태 코드는 이 함수를 트리거 합니다.\n    // 응답 데이터가 있는 작업 수행\n    return response;\n  }, function (error: AxiosError) {\n    // 2xx 외의 범위에 있는 상태 코드는 이 함수를 트리거 합니다.\n    // 응답 오류가 있는 작업 수행\n    return Promise.reject(error);\n  });\n```\n\n# Interceptors 제거하기\n\n```tsx\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n# Custom Instance에서 Interceptors 사용하기\n\n```tsx\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n# 참조\n\n- [Axios Docs Interceptors](https://axios-http.com/kr/docs/interceptors)","fields":{"slug":"axios-interceptor"},"path":"axios-interceptor.mdx"},{"frontMatter":{"date":"2022-10-23T00:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["react","typescript","emotion","gatsby"],"series":["blog"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"https://user-images.githubusercontent.com/56423604/275324825-c75b8367-2633-47b9-888b-4bb0cd4daf7a.png","published":true,"path":"gatsby-add-table-of-contents-in-gatsby.mdx","key":"gatsby-add-table-of-contents-in-gatsby"},"body":"# 목차 생성하기\n\n## tableOfContents\n\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\n\n```graphql\n{\n  allMarkdownRemark {\n    nodes {\n      tableOfContents\n    }\n  }\n}\n```\n\n```plaintext\n{\n  \"data\": {\n    \"allMarkdownRemark\": {\n      \"nodes\": [\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        ...\n        ]\n    }\n  },\n  \"extensions\": {}\n}\n\n```\n\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\n\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\n\n```typescript\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\n\n`PostTableOfContents.tsx`\n\n```typescript\nimport styled from \"@emotion/styled\";\n\ninterface IPostTableOfContentsProps {\n  tableOfContents: string;\n}\n\nconst TableofContents = styled.div``;\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n  return (\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n  );\n};\n\nexport default PostTableOfContents;\n```\n\n`post_template.tsx`\n\n```typescript\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: IPostTemplateProps) => {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <PostTableOfContents tableOfContents={tableOfContents} />\n      <CommentWidget />\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n```\n\n## 링크 동작시키기\n\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\n\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\n\n```shell\nyarn add gatsby-remark-autolink-headers\n\nnpm i gatsby-remark-autolink-headers\n```\n\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\n\n```javascript\n...\n{\n  resolve: `gatsby-transformer-remark`,\n    options\n:\n  {\n    plugins: [\n      ...\n        `gatsby-remark-autolink-headers`,\n    ],\n  }\n}\n,\n...\n```\n\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\n\n# 목차 CSS 적용하기\n\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n`;\n```\n\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\n씩 추가하였다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n\n  * {\n    list-style: none;\n    padding-bottom: 5px;\n\n    &:last-child {\n      padding-bottom: 0;\n    }\n  }\n\n  * > ul > li {\n    padding-left: 5px;\n  }\n`;\n```\n\n# 페이지 맨 위/아래로 가기 버튼 추가하기\n\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\n\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\n\n```typescript\nimport styled from '@emotion/styled'\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n...\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n    const onClickUpButton = useCallback(() => {\n    window?.scrollTo(0, 0)\n  }, [])\n\n  const onClickDownButton = useCallback(() => {\n    window?.scrollTo(0, document.body.scrollHeight)\n  }, [])\n  return (\n    <TableofContentsWrapper>\n      <UpButton>\n        <FontAwesomeIcon icon={faAngleUp} />\n      </UpButton>\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n      <DownButton>\n        <FontAwesomeIcon icon={faAngleDown} />\n      </DownButton>\n    </TableofContentsWrapper>\n  )\n}\n```\n\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\n","fields":{"slug":"gatsby-add-table-of-contents-in-gatsby"},"path":"gatsby-add-table-of-contents-in-gatsby.mdx"},{"frontMatter":{"date":"2022-09-19T00:00:00","title":"Axios Config 기본값 정리","tags":["react","typescript","axios","javascript"],"description":"Axios Config 기본값 정리","published":true,"path":"axios-config.mdx","key":"axios-config"},"body":"> 모든 요청에 적용될 config 기본값을 지정할 수 있다.\n>\n\n# **전역 Axios 기본값**\n\n```tsx\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n# 커스텀 인스턴스 기본값\n\n## 인스턴스를 생성할때 config 기본값 설정하기\n\n```tsx\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n```\n\n## 인스턴스를 생성할때 config 기본값 설정하기: TypeScript에서 생성하기\n\n```tsx\nimport axios, { AxiosRequestConfig } from 'axios';\n\nconst axiosConfig: AxiosRequestConfig = {\n  baseURL: 'BASE_URL'\n}\nconst instance = axios.create(axiosConfig);\n```\n\n## 인스턴스를 만든 후 기본값 변경하기\n\n```tsx\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n## 인스턴스 사용하기\n\n```tsx\nconst response = await instance.post('login', params);\n```\n\n# **Config 우선 순위**\n\nConfig는 우선 순위에 따라 병합된다.\n\n라이브러리에서의 기본값 <  인스턴스의 `defaults` 속성 < 요청의 `config` 인자를 순서대로 우선순위가 낮다.\n\n```tsx\n// 라이브러리에서 제공하는 config 기본값을 사용하여 인스턴스 만들기\n// 이 때 timeout 값은 라이브러리의 기본값인 '0'입니다.\nconst instance = axios.create();\n\n// 라이브러리에 대한 timeout 값 재정의\n// 이제 모든 요청은 시간 초과 전 2.5초 대기하는 인스턴스를 사용합니다.\ninstance.defaults.timeout = 2500;\n\n// 시간이 오래 걸리는 요청에 대한 timeout 값 재정의\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n# 참조\n\n- [Axios Docs Config 기본값](https://axios-http.com/kr/docs/config_defaults)","fields":{"slug":"axios-config"},"path":"axios-config.mdx"},{"frontMatter":{"date":"2022-06-25T00:00:00","title":"Styled Components Global Style 설정하기","tags":["styled_components","css","react","typescript"],"description":"Styled Components 전체 프로젝트에 적용되는  Global Style 설정하기","published":true,"path":"styled-components-global-style.mdx","key":"styled-components-global-style"},"body":"> `createGlobalStyle`\n하나의 컴포넌트를 만들 수 있게 해주는데 랜더링이 될 때, 그 컴포넌트는 전연 스코프에 스타일들을 올려준다.\n>\n\n```tsx\nimport { createGlobalStyle } from \"styled-components\";\nimport Router from \"./Router\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  //global style 작성\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n```\n\n# Global Style 지정\n\n`globalStyle.tsx`\n\n<aside>\n💡 Reset CSS\n[https://github.com/zacanger/styled-reset/blob/master/src/post.ts](https://github.com/zacanger/styled-reset/blob/master/src/post.ts)\n\n</aside>\n\n```tsx\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  font-family: 'Source Sans Pro', sans-serif;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n  margin: 0;\n  background: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\na{\n  text-decoration: none;\n  color: inherit;\n}\n*{\n  box-sizing: border-box;\n}\n`;\n```\n\n# Global Style 적용\n\n`App.tsx`\n\n```tsx\nimport React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { GlobalStyle } from \"./style/globalStyle\";\nimport { ThemeProvider } from \"styled-components\";\n\nfunction App() {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Routes>\n          <Route path={\"/\"} element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n```","fields":{"slug":"styled-components-global-style"},"path":"styled-components-global-style.mdx"}],"allTags":[{"tag":"all","count":25},{"tag":"javascript","count":9},{"tag":"react","count":8},{"tag":"typescript","count":7},{"tag":"network","count":4},{"tag":"nextjs","count":3},{"tag":"git","count":3},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"husky","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn_berry","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"python3","count":1},{"tag":"gtag","count":1},{"tag":"google_analytics","count":1},{"tag":"programming","count":1},{"tag":"lodash","count":1},{"tag":"commitlint","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"emotion","count":1},{"tag":"gatsby","count":1},{"tag":"framer_motion","count":1},{"tag":"tailwind","count":1}],"selectedTag":"typescript","page":0},"__N_SSG":true}