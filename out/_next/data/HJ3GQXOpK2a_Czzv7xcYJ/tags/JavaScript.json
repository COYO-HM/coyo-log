{"pageProps":{"posts":[{"frontMatter":{"date":"2023-02-22T00:00:00","title":"Github Page로 React 프로젝트 무료로 배포해보기","tags":["JavaScript","React","GithubPage"],"description":"Github Page로 CRA로 만든 프로젝트를 무료로 배포해보자","published":true},"body":"> Github Page\r\n>\r\n> github repository에 올린 `javaScript` 프로젝트를 배포하여 정적 웹 사이트를 무료로 호스팅할 수 있게 하는 서비스이다.\r\n\r\n이전에 `react`로 만든 프로젝트를 한번 Github Page로 배포해보자.\r\n\r\n# Project Github page 라이브러리 설치\r\n\r\n```jsx\r\nnpm i gh-pages --dev\r\n```\r\n\r\n# Package.json 설정하기\r\n\r\n`package.json` 에 다음과 같이 홈페이지 주소를 추가해준다.\r\n\r\n```jsx\r\n \"homepage\": \"https://사용자 아이디.github.io/레포지토리 이름/\",\r\n```\r\n\r\n![homepage](/static/images/blog/github-page-publish-01.png)\r\n\r\n배포를 위해 `deploy`를 추가해준다.\r\n\r\n![deploy](/static/images/blog/github-page-publish-02.png)\r\n\r\n다음 명령어를 입력해 배포해준다.\r\n\r\n```bash\r\nnpm run deploy\r\n```\r\n\r\n# Github Page Repository에서 설정\r\n\r\n- Repository 메뉴에서 Settings 메뉴로 들어가준다.\r\n\r\n![Settings](/static/images/blog/github-page-publish-03.png)\r\n\r\n- Settings 메뉴 중에 Pages 메뉴로 들어가면 Branch가 none으로 설정되어 있다.\r\n\r\n![Pages](/static/images/blog/github-page-publish-04.png)\r\n\r\n- 생성된 gh-pages 브랜치로 설정해준다.\r\n\r\n![gh-pages](/static/images/blog/github-page-publish-05.png)\r\n\r\n다음과 같이 배포된 것을 확인할 수 있다.\r\n\r\n![complete](/static/images/blog/github-page-publish-06.png)\r\n\r\n# 참조\r\n\r\n- [Github Docs](https://docs.github.com/ko/pages)\r\n","fields":{"slug":"blog/git/github-page-publish"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/git/github-page-publish.mdx"},{"frontMatter":{"date":"2023-02-13T00:00:00","title":"Intersection Observer API","tags":["JavaScript"],"description":"Intersection Observer API 공식문서 읽고 정리해보기","published":true},"body":"> Intersection Observer API\r\n> 타겟 요소와 상위 요소 또는 최상위 document의 viewport 사이의 intersection(교차 범위) 내의 변화를 비동기적으로 관찰하는 방법\r\n>\r\n> Intersection Observer API 는 그들이 감시하고자 하는 요소가 다른 요소의 viewport에 들어가거나 나갈 때 또는 요청한 부분만큼 두 요소의 교차 부분이 변경될 때 마다 실행될 콜백 함수를 등록할 수 있게 한다.\r\n>\r\n> ✔️ 정확히 몇 픽셀 겹쳤는지 알려주는 것이 아닌 N% 정도로 상호작용일 일어났을 경우 발생\r\n\r\n```tsx\r\nconst observer = new IntersectionObserver(callback, options); // 관찰자 초기화\r\n// callback과 options 두 가지 인수를 전달 받는다.\r\n\r\nobserver.observe(element); // 관찰 대상(element) 등록\r\n```\r\n\r\n# Callback\r\n\r\n> Intersection Observer API Callback을 생성 조건\r\n>\r\n> - target 요소와 root 요소 (기기의 뷰포트나 설정 요소)가 교차할 경우\r\n> - observer가 최초로 타겟을 관측하도록 요청받을 때마다.\r\n\r\ncallback은 entries와 observer를 두가지 인자로 받는다.\r\n\r\n```tsx\r\nconst callback = (\r\n  entries: IntersectionObserverEntry[],\r\n  observer: IntersectionObserver\r\n) => {};\r\n```\r\n\r\n## entries\r\n\r\n: `IntersectionObserverEntry` 의 배열로 `IntersectionObserverEntry`은 다음과 같은 속성들을 포함하고 있다.\r\n\r\n```tsx\r\ninterface IntersectionObserverEntry {\r\n  readonly boundingClientRect: DOMRectReadOnly;\r\n  readonly intersectionRatio: number;\r\n  readonly intersectionRect: DOMRectReadOnly;\r\n  readonly isIntersecting: boolean;\r\n  readonly rootBounds: DOMRectReadOnly | null;\r\n  readonly target: Element;\r\n  readonly time: DOMHighResTimeStamp;\r\n}\r\n```\r\n\r\n![entries](/static/images/blog/intersection-observer-API-01.png)\r\n\r\n- `boundingClientRect` : target의 DOMReactReadOnly를 반환한다. target의 `Element.getBoundingClientRect()`과 같은 값을 얻을 수 있다.\r\n  ![boundingClientRect](/static/images/blog/intersection-observer-API-02.png)\r\n- `intersectionRatio` : target과 root의 교차 영역 비율로 0.0과 1.0 사이의 숫자를 반환한다. (아래 options의 threshold와 관련있다.)\r\n\r\n- `intersectionRect` : target과 viewport인 root의 교차 영역에 대한 DOMReactReadOnly를 반환한다.\r\n  ![intersectionRect](/static/images/blog/intersection-observer-API-03.png)\r\n- `isIntersecting` : target이 지정한 root 영역에 교차 상태로 들어가는지 여부를 나타내주는 `boolean`값이다.\r\n\r\n  `true`: root 내부에 포함\r\n\r\n  `false`: root 내부에 포함되지 않음\r\n\r\n- `rootBounds` : root 요소에 대한 DOMReactReadOnly를 반환한다. 이는 아래의 `rootMargin`이 반영된 값이며 별도의 root 값을 선언하지 않을 경우 `null`을 반환한다.\r\n  ![rootBounds](/static/images/blog/intersection-observer-API-04.png)\r\n- `target` : target의 Element를 반환한다.\r\n\r\n- `time` : 문서가 작성된 시간을 기준으로 교차 상태 변경이 발생한 시간을 나타내는 `DOMHighResTimeStamp`을 반환한다.\r\n\r\n## observer\r\n\r\n> callback을 호출하는 IntersectionObserver\r\n\r\n```tsx\r\ninterface IntersectionObserver {\r\n  readonly root: Element | Document | null;\r\n  readonly rootMargin: string;\r\n  readonly thresholds: ReadonlyArray<number>;\r\n  disconnect(): void;\r\n  observe(target: Element): void;\r\n  takeRecords(): IntersectionObserverEntry[];\r\n  unobserve(target: Element): void;\r\n}\r\n```\r\n\r\n![observer](/static/images/blog/intersection-observer-API-05.png)\r\n\r\n# Options\r\n\r\n> observer callback이 호출되는 상황을 조작할 수 있다.\r\n\r\n```tsx\r\nlet options = {\r\n  root: document.querySelector(\"#scrollArea\"),\r\n  rootMargin: \"0px\",\r\n  threshold: 1.0,\r\n};\r\n\r\nlet observer = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `root`\r\n\r\n- target의 가시성을 판단하기 위한 Element 혹은 viewport\r\n- target의 조상 요소야 한다.\r\n- 만일 `document`의 루트 요소(기본값)를 기준으로 하기 위해서는 `null` 값 선언\r\n\r\n## `rootMargin`\r\n\r\n- `root` 가 가지는 `margin`으로 root의 범위를 확장하거나 축소할 수 있다.\r\n- 기본값은 0px으로 px와 % 단위 사용이 가능하며 반드시 단위를 꼭 입력해주어야 한다(0일지라도).\r\n- 음수값일 경우 root 요소 축소, 양수값일 경우 root 요소 확장한다.\r\n\r\n## `threshold`\r\n\r\n- target이 얼만큼 보여졌을 때 observer가 콜백을 실행할 건지 설정하는 option, 기본값은 0이다.\r\n  만일 target이 50% 만큼 요소가 보여졌을때 탐지하고 싶다면, 값을 0.5로 설정한다. 혹은 25% 단위로 실행되게 하고 싶다면, `[0, 0.25, 0.5, 0.75, 1]` 과 같은 배열을 설정한다.\r\n- 기본값 0은 target이 1px이라도 보일때 콜백이 실행된다.\r\n\r\n# Method\r\n\r\n## `IntersectionObserver()`\r\n\r\n> options을 참조하여 callback을 호출하는 관찰자를 생성 및 초기화한다.\r\n\r\n```tsx\r\nobserver = new IntersectionObserver(callback, options);\r\n```\r\n\r\n## `observe()`\r\n\r\n> 관찰 대상인 target을 설정하고 관찰을 설정한다.\r\n\r\n```jsx\r\nconst element = document.getElementById(\"target\");\r\nobserver.observe(element);\r\n```\r\n\r\n## `unobserve()`\r\n\r\n> 넘겨준 target의 관찰을 종료한다.\r\n\r\n```jsx\r\nobserver.unobserve(element);\r\n```\r\n\r\n## `disconnect()`\r\n\r\n> 해당 관찰자의 관찰을 모두 종료한다.\r\n\r\n```jsx\r\nobserver.disconnect();\r\n```\r\n\r\n# 참조\r\n\r\n- [MDN Intersection Observer API](https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API)\r\n","fields":{"slug":"blog/javascript/intersection-observer-API"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/intersection-observer-API.mdx"},{"frontMatter":{"date":"2022-09-05T00:00:00","title":"JavaScript map과 forEach 비교","tags":["JavaScript"],"description":"JavaScript map과 forEach 비교하기","published":true},"body":"<aside>\r\n💡\r\n\r\n`forEach` VS `map`\r\n\r\n- `forEach`: for문 대체 함수로 원본 배열을 변경하지 않고 항상 `return` 값은 `undefined`이다.\r\n- `map` : 콜백 함수의 `return` 값으로 구성된 새로운 배열을 반환한다.\r\n\r\n</aside>\r\n\r\n# **Array.prototype.forEach**\r\n\r\n---\r\n\r\n> `forEach()`\r\n> for문을 대체할 수 있는 함수로 `forEach` method는 자신의 내부에서 반복문을 실행한다.\r\n> 내부에서 반복문을 통해 자신을 호출한 배열을 순회하면서 수행해야할 처리를 콜백 함수로 전달받아 반복 호출한다.\r\n\r\n- `forEach` method는 원본 배열을 변경하지 않는다.\r\n- `forEach` method의 반환값은 언제나 `undefined`이다.\r\n\r\n```jsx\r\nconst num = [1, 2, 3];\r\nconst result = [];\r\n\r\nnum.forEach((n) => result.push(n + 10));\r\n\r\nconsole.log(result); // output: [11, 12, 13]\r\n```\r\n\r\n# **Array.prototype.map**\r\n\r\n---\r\n\r\n> `map()`\r\n> 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달받은 콜백 함수를 반복 호출한다.\r\n> 그리고 콜백 함수의 반환값들로 구성된 <span className=\"yellow\">새로운 배열을 반환</span>한다.\r\n\r\n- `map` method는 원본 배열을 변경하지 않는다. 단,`callback`함수에 의해서 변형될 수는 있다.\r\n\r\n  ```jsx\r\n  var kvArray = [\r\n    { key: 1, value: 10 },\r\n    { key: 2, value: 20 },\r\n    { key: 3, value: 30 },\r\n  ];\r\n\r\n  var reformattedArray = kvArray.map(function (obj) {\r\n    var rObj = {};\r\n    rObj[obj.key] = obj.value;\r\n    return rObj;\r\n  });\r\n  // reformattedArray는 [{1:10}, {2:20}, {3:30}]\r\n\r\n  // kvArray는 그대로\r\n  // [{key:1, value:10},\r\n  //  {key:2, value:20},\r\n  //  {key:3, value: 30}]\r\n  ```\r\n\r\n- `map` method에서는 원본 배열의 원소와 일대일 mapping이 진행되기 때문에 원본 배열과 mapping 후 배열의 길이는 항상 같다.\r\n- `map`은`callback`함수를 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열을 만든다.`callback`함수는 (`undefined`도 포함해서)배열 값이 들어있는 인덱스에\r\n  대해서만 호출된다.\r\n  즉, 값이 삭제되거나 아직 값이 할당/정의되지 않은 인덱스에 대해서는 호출되지 않는다.\r\n- String에도 사용 가능\r\n  ```jsx\r\n  var map = Array.prototype.map;\r\n  var a = map.call(\"Hello World\", function (x) {\r\n    return x.charCodeAt(0);\r\n  });\r\n  // a는 이제 [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r\n  ```\r\n\r\n# 참조\r\n\r\n- [MDN Array.prototype.map()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n- [MDN Array.prototype.forEach()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n","fields":{"slug":"blog/javascript/forEach-map"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/javascript/forEach-map.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\r\n\r\n## `uniq`\r\n\r\n> 배열 원소 중복 제거\r\n>\r\n> ```tsx\r\n> uniq<T>(array: List<T> | null | undefined): T[];\r\n> // arg: array\r\n> // return: array\r\n> ```\r\n\r\n```tsx\r\nconst siteList = [0, 1, 1, 2];\r\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\r\n```\r\n\r\n# Collection 관련 함수\r\n\r\n## `sortby`\r\n\r\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\r\n>\r\n> ```tsx\r\n> sortBy(collection, [(iteratees = [_.identity])]);\r\n>\r\n> //collection: 정렬 대상\r\n> //[iteratees=[_.identity]] 정렬 기준\r\n>\r\n> // => return 정렬된 새로운 array\r\n> ```\r\n\r\n- 여러 개의 필드값으로도 정렬 가능\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\r\n```\r\n\r\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\r\n```\r\n\r\n```tsx\r\nconst users = [\r\n  { user: \"Fred\", age: 48 },\r\n  { user: \"Barney\", age: 36 },\r\n  { user: \"Fred\", age: 40 },\r\n  { user: \"Barney\", age: 34 },\r\n];\r\n\r\nconst sortByFunc = sortBy(users, [\r\n  function (o) {\r\n    return o.user;\r\n  },\r\n]);\r\nconsole.log(sortByFunc);\r\n// => objects for [['Barney', 36], ['Barney', 34], ['Fred', 48], ['Fred', 40]]\r\n\r\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\r\nconsole.log(sortByTwoArg);\r\n// => objects for [['Barney', 34], ['Barney', 36], ['Fred', 40], ['Fred', 48]]\r\n```\r\n\r\n# Lang 관련 함수\r\n\r\n## `clonedeep`\r\n\r\n> 객체 복사\r\n\r\n# Object 관련 함수\r\n\r\n## `get`\r\n\r\n> 객체에서 원하는 값 찾기\r\n\r\n```javascript\r\nget(찾을 장소, 가져올 키, 기본 값);\r\n```\r\n\r\n# 참조\r\n\r\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\r\n","fields":{"slug":"blog/react/lodash"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/lodash.mdx"},{"frontMatter":{"date":"2021-07-12T00:00:00","title":"React Class Component Life Cycle","tags":["React","JavaScript"],"description":"React Class Component 의 Life Cycle 정리","published":true},"body":"<aside> 본 포스트는 [리액트 공식 홈페이지](https://ko.reactjs.org/docs/react-component.html#componentdidupdate)를 읽고 공부한 기록입니다.</aside>\r\n\r\n# LifeCycle\r\n\r\n> 모든 컴포넌트를 여러 종류의 생명 주기 메소드를 가지며 생명 주기 메소드를 통해서 원하는 시점에 특정 함수가 실행하도록 할 수 있다.\r\n\r\n- React v_16.4 이상 LifeCycle\r\n  ![[https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)](/static/images/blog/react_class_render_01.png)\r\n\r\n- React v_16.3 이하 LifeCycle\r\n  ![https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](/static/images/blog/react_class_render_02.png)\r\n\r\n## Mount\r\n\r\n> DOM에 element를 집어넣는 것\r\n\r\n컴포넌트의 인스턴스가 생성되어 DOM 상에 삽입될 때에 순서대로 호출\r\n\r\n1. [`constructor()`](#constructor)\r\n2. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\r\n3. [`render()`](#render)\r\n4. ~~[`componentDidMount()`](#componentdidmount)~~\r\n\r\n## Update\r\n\r\nprops 또는 state가 변경되면 다음과 같은 순서로 re-render 발생.\r\n\r\n1. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\r\n2. [`shouldComponentUpdate()`](#shouldComponentUpdate)\r\n3. [`render()`](#render)\r\n4. [`getSnapshotBeforeUpdate()`](#getSnapshotBeforeUpdate)\r\n5. ~~[`componentDidUpdate()`](#componentDidMount)~~\r\n\r\n## Unmount\r\n\r\nComponent가 DOM 상에서 제거될 때에 호출됨\r\n\r\n- [`componentWillUnmount`](#componentWillMount)\r\n\r\n## Handle Error\r\n\r\n아래 메서드들은 자식 컴포넌트를 렌더링하거나, 자식 컴포넌트가 생명주기 메서드를 호출하거나, 자식 컴포넌트가 생성자 메서드를 호출하는 과정에서 오류가 발생했을 때에 호출된다.\r\n\r\n- [`static getDerivedStateFromError()`](#getDerivedStateFromProps)\r\n- [`componentDidCatch()`](#componentDidCatch)\r\n\r\n# Life Cycle Method\r\n\r\n## `constructor`\r\n\r\n> 컴포넌트가 새롭게 생성될 때 마다 호출되는 컴포넌트 생성자 메소드로 보통 `this.state`에 객체를 할당하여 local state를 초기화하거나 인스턴스에 이벤트 처리 메서드를 바인딩하기 위해 사용된다.\r\n\r\n- 해당 컴포넌트가 마운트되기 전에 호출되는 함수, 컴포넌트 생성시에 가장 먼저 실행되는 메소드\r\n- 메서드를 바인딩하거나 state를 초기화하는 작업이 없다면 생성자(`constructor`) 생략 가능\r\n- React.Component를 상속한 컴포넌트의 생성자를 구현할 때에는 다른 구문에 앞서 `super(props);`를 호출해야 한다. 그렇지 않으면 this.props가 생성자 내에서 정의되지 않는 오류 발생\r\n- `constructor()` 내부에서 `setState()`를 호출하면 안된다. 만일 컴포넌트에 local state가 필요하다면 생성자 내에서 `this.state`에 초기 state 값을 할당하면 된다.\r\n- 생성자는 `this.state`를 직접 할당할 수 있는 유일한 곳으로 `constructor()` 이 외의 메서드에서는 `this.setState()`를 사용해야 함\r\n- 생성자 내에서는 부수 효과를 발생시키거나 구독 작업(subscription)을 수행 XXX => `componentDidMount()`에서 실행하기\r\n\r\n```javascript\r\nconstructor(props);\r\n{\r\n  super(props);\r\n  // 여기서 this.setState()를 호출 X\r\n  this.state = { counter: 0 };\r\n  this.handleClick = this.handleClick.bind(this);\r\n}\r\n```\r\n\r\n> !! `state`에 props 복사하지 않기 => `props` 복사는 `getDerivedStateFromProps`에서 하기\r\n>\r\n> ```javascript\r\n> constructor(props) {\r\n> super(props);\r\n> // 이렇게 하지 마세요!\r\n> this.state = { color: props.color };\r\n> }\r\n> ```\r\n>\r\n> 이런식으로 props를 state로 설정할 경우 props의 값의 변경 사항이 반영되지 않는다.\r\n>\r\n> `props`의 갱신을 의도적으로 무시해야 할 때만 `props`를 `state`로 따로 설정\r\n\r\n## `componentWillMount`\r\n\r\n```plain text\r\n`componentWillMount()` => UNSAFE_componentWillMount()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillMount()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n> 마운트가 발생하기 전에 호출된다. `render()`가 실행되기 전에 호출되므로, 이 메서드 내에서 `setState()`를 동기적으로 호출하더라도 추가적인 렌더링이 발생하지 않는다.\r\n\r\n- state 초기화의 경우 `constructor()` 사용하는 것이 좋다.\r\n- 이 메서드 내에서 부수 효과를 발생시키거나 구독 작업(subscription)을 수행하면 안 된다. (해당 경우에는 `componentDidMount()`를 대신 사용)\r\n- 이 메서드는 서버 렌더링에서 호출되는 유일한 생명주기 메서드\r\n\r\n## `getDerivedStateFromProps`\r\n\r\n> 최초 마운트 시와 갱신 시 모두(랜더링 될 때마다 호출된다.)에서 `render` 메서드 호출 직전에 호출하여 주로 state를 갱신하기 위한 객체를 반환하거나, `null`을 반환하여 아무 것도 갱신하지 않을\r\n> 수도 있다.\r\n\r\n- 시간의 흐름에 따라 변하는 `props`에 `state`가 의존하는 경우(변화하는 offset prop에따라 현재 scroll direction을 기록하거나 source props에 따라 외부 데이터를 로딩하는\r\n  경우, `props`로 받아온 것을 `state`에 넣어주고 싶을 때 등)에 사용.\r\n- !! 다른 생명주기 메소드와 달리 앞에 `static`을 필요로하고, this 롤 조회를 할 수 없다.\r\n- !! state보다는 prop 사용\r\n- 이 메서드는 컴포넌트 인스턴스에 접근할 수 없습니다. 인스턴스 접근이 필요하다면, class 정의 외부에서 컴포넌트의 props와 state에 대한 순수 함수를\r\n  추출하여 `getDerivedStateFromProps()`와 다른 클래스 메서드 간에 코드를 공유 및 재사용할 수 있다.\r\n- [`componentWillReceiveProps`](#componentWillReceiveProps)와 달리 이 메소드의 경우 부모 컴포넌트가 다시 렌더링을 발생시켰을 때에만 실행되고, 해당 컴포넌트 내에서\r\n  지역적인 `setState`가 발생한 경우에는 실행되지 않는다.\r\n\r\n```javascript\r\nstatic getDerivedStateFromProps(props, state)\r\n{\r\n\r\n}\r\n```\r\n\r\n## `render`\r\n\r\n- **<span className=\"red\">클래스 컴포넌트에서 반드시 구현되어야 하는 유일한 메소드이다.</span>**\r\n\r\n## `getSnapshotBeforeUpdate`\r\n\r\n> 가장 마지막으로 렌더링된 결과가 DOM 등에 반영되기 전에 호출되는 메서드로 컴포넌트가 DOM으로부터 스크롤 위치 등과 같은 정보를 이후 변경되기 전에 얻을 수 있다.\r\n\r\n- 이 생명주기 메서드가 반환하는 값은 `componentDidUpdate()`에서 세번째 인자로 전달됨\r\n- 잘 사용되지는 않지만 함수형 컴포넌트 + Hooke을 사용할때에는 해당 메서드를 대체할 수 있는 기능이 아직 없다.\r\n- 발생 시점: `render()` / `getSnapshotBeforeUpdate()` / 실제 DOM에 변화 발생 / `compoenetDidUpdate`\r\n\r\n```javascript\r\ngetSnapshotBeforeUpdate(prevProps, prevState);\r\n{\r\n}\r\n```\r\n\r\n## `componentDidMount`\r\n\r\n> - 컴포넌트가 화면에 나타났을 때 호출, 컴포넌트의 첫번째 렌더링이 완료된후 호출되는 메서드\r\n>\r\n> - 주로 D3, masonry 처럼 DOM을 사용해야하는 외부 라이브러리 연동을 하거나, 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch 등을 통하여 ajax 요청을 하거나, DOM 의\r\n>   속성을 읽거나 직접 변경하는 작업을 진행\r\n\r\n- 이미 `props`와 `state`가 바뀐 상태로 매개변수로 `prevProps`와 `prevState`를 받아 조회할 수 있다.\r\n\r\n## `componentWillReceiveProps`\r\n\r\n> 컴포넌트가 새로운 props를 받게 되었을 때 호출된다.\r\n\r\n- 주로 state가 props에 따라 변해야 하는 로직을 작성한다.\r\n- 새로 받게된 props는 nextProps로 조회할 수 있다.\r\n\r\n```plain text\r\n`componentWillReceiveProps()` => UNSAFE_componentWillReceiveProps()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillReceiveProps()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n## `shouldComponentUpdate`\r\n\r\n> `props` 또는 `state`가 새로운 값으로 갱신되어서 렌더링에 발생하기 직전에 호출\r\n>\r\n> 기본 값은 `true`로 초기 렌더링과 `forceUpdate()`가 사용될 때에는 호출되지 않는다.\r\n\r\n- 현재 `state` 또는 `props`의 변화가 컴포넌트의 출력 결과에 영향을 미치는지의 여부를 React에 알려주는 역할을 한다.\r\n- 기본 동작은 매 `state` 변화마다 다시 렌더링을 수행하는 것이며, 대부분의 경우 기본 동작에 따라야 한다.\r\n- 오직 성능 최적화를 목적으로 두고 있음 => <span className=\"red\">렌더링을 방지하는 목적으로 사용할 경우 버그로 이어질 수 있다.</span>\r\n- <span className=\"red\">내용을 직접 작성하는 대신에 [PureComponent](https://ko.reactjs.org/docs/react-api.html#reactpurecomponent)를 사용하는 것이 좋다. PureComponent는 props와 state에 대히여 얕은 비교를 수행하고, 해야 할 갱신 작업을 건너뛸 확률을 낮춰준다.</span>\r\n  > PureComponent \r\n  > \r\n  > React Component의 render() 함수가 동일한 `props`와 `state`에\r\n  대하여 동일한 결과를 렌더링한다면, React.PureComponent를 사용하여 경우에 따라 성능\r\n  향상을 누릴 수 있다. \r\n  > \r\n  > - <span className=\"yellow\">`props`와 `state`가 간단할 것으로 예상될 때에만 PureComponent를 상속해야한다.</span>\r\n  > - `props`와 `state`가 복잡하다면 pureComponent 말고 `forceUpdate()` 활용하기\r\n  > - `React.PureComponent`의 `shouldComponentUpdate()`는 컴포넌트의 하위 트리에\r\n  대한 `props` 갱신 작업을 수행하지 않는다.\r\n- 만일 직접 작성하고 싶다면, `this.props`와 `nextProps`, `this.state`와 `nextState`를 비교한 뒤 `false`를 반환하는 것으로 React가 갱신 작업을 건너뛰게 할 수 있다. \r\n   <span className=\"red\"> 건너뛰다고 해서 자식 컴포넌트들이 각자가 가진 state의 변화에 따라 가시 렌더링을 수행하는 것을 막는 것은 아니다.</span>\r\n\r\n```javascript\r\nshouldComponentUpdate(nextProps, nextState){}\r\n```\r\n\r\n## `componentWillUpdate`\r\n\r\n```plain text\r\n`componentWillUpdate()` => UNSAFE_componentWillUpdate()\r\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillUpdate()`\r\n계속 이용하고 싶다면,\r\nnpx react-codemod rename-unsafe-lifecycles\r\n```\r\n\r\n> 새로운 `props` 또는 `state`가 전달되어서 렌더링이 이루어지기 전에 호출\r\n\r\n- React component가 없데이트 되기 전에 미리 준비할 수 있는 단계\r\n- 초기 렌더링 시에는 호출 X\r\n- !! 이 메서드 내에서는 `this.setState()` 호출할 수 없으며 React Component가 갱신되도록 만드는 그 어떤 작업(Redux Action dispatch)\r\n  도 `componentWillUpdate()`가 결과값을 반환하지 건에 이루어지면 안됨\r\n- 통상적으로 이 메서드는 `componentDidUpdate()`로 대체 가능\r\n- 이 메서드 내에서 DOM에 대한 정보를 얻는다면 (예를 들어, 스크롤 위치 저장하기), 해당 코드를 `getSnapshotBeforeUpdate()`로 이전하는 것이 가능\r\n\r\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\r\n\r\n## `componentDidUpdate`\r\n\r\n> 업데이트 직후에 호출되며 최초 렌더링(초기 렌더링) 시에는 호출 X\r\n\r\n- 컴포넌트가 갱신되었을 때 DOM을 조작하기 위해 아 메소드 활용에 용이\r\n\r\n- 이전과 현재의 `props`를 비교하여 네트워크 요청을 보내는 작업도 이 메소드를 사용하면 된다.\r\n\r\n- 컴포넌트에서 `getSnapshotBeforeUpdate()`를 구현한다면, 해당 메서드가 반환하는 값은 `componentDidUpdate()`에 `snapshot` 인자로 넘겨집니다. 반환값이 없다면 해당\r\n  인자는 `undefined`를 가집니다.\r\n\r\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\r\n\r\n```javascript\r\ncomponentDidUpdate(prevProps, prevState, snapshot);\r\n{\r\n}\r\n```\r\n\r\n- `componentDidUpdate()`에서 `setState()`를 즉시 호출할 수도 있지만, 조건문으로 감싸지 않으면 무한 반복이 발생할 수 있다.\r\n\r\n> 상위에서 내려온 prop을 그대로 `state`에 저장하는 것은 좋지 않으며, 그 대신 `prop`을 직접 사용하는 것이 좋다.\r\n\r\n```javascript\r\ncomponentDidUpdate(prevProps);\r\n{\r\n  if (this.props.userID !== prevProps.userID) {\r\n    this.fetchData(this.props.userID);\r\n  }\r\n}\r\n```\r\n\r\n## `componentWillUnmount`\r\n\r\n> 컴포넌트가 마운트 해제되어 제거되기 직전에 호출\r\n\r\n- 이 메서드 내에서 타이머 제거, 네트워크 요청 취소, `componentDidMount()` 내에서 생성된 구독 해제 등 필요한 모든 정리 작업을 수행\r\n- 이제 컴포넌트는 다시 렌더링되지 않으므로, `componentWillUnmount()` 내에서 `setState()`를 호출하면 안 된다. 컴포넌트 인스턴스가 마운트 해제되고 나면, <span className=\"red\">절대로 다시 마운트되지 않는다</span>\r\n\r\n# 참조\r\n\r\n- [리액트 공식 홈페이지 업데이트 로그](https://ko.reactjs.org/blog/2018/03/27/update-on-async-rendering.html)\r\n- [리액트 공식 홈페이지 Doc](https://ko.reactjs.org/docs/react-component.html)\r\n- [Velopert React 튜토리얼](https://velopert.com/3631)\r\n- [W3schools: React Lifecycle](https://www.w3schools.com/react/react_lifecycle.asp)\r\n","fields":{"slug":"blog/react/react_class_render"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/react_class_render.mdx"}],"tags":[{"tag":"JavaScript","count":5},{"tag":"React","count":5},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"GithubPage","count":1},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}],"tag":"JavaScript"},"__N_SSG":true}