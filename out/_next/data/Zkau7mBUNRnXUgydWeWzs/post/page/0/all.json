{"pageProps":{"posts":[{"frontMatter":{"date":"2024-02-06T00:00:00","title":"Github Repository 하나로 합치기","tags":["git"],"series":[],"description":"여러 Repository들 하나의 폴더로 합치기","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/11f4d42e-440e-4c15-9529-1dec925d4319","published":true,"path":"github-repo-union.mdx","key":"github-repo-union"},"body":"프로젝트를 이것저것 진행하다보니 github repository 가 많아져서 기존 `commit`을 남기고 관련있는 repository를 병합하려고 합니다.\n\n# 새로운 Repository 생성\n\n기존 repository들을 보관할 새로운 repository를 생성해주도록 합니다.\n\n<img alt={\"new_repo\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/42bf5800-b48f-4735-8387-799de512ea37\"} />\n\n<img alt={\"new_repo_drawer\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/c1d313d6-e577-46b9-bf75-d6584991676f\"} />\n\n\n# 생성한 Repository Local과 Remote 연결하기\n\n<img alt={\"repo_clone\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/1fc56b98-0e3d-496d-b42b-be6e43d2c237\"} />\n\nrepo 주소를 복사해서 다음과 같이 입력하여 remote와 local을 연결해줍니다.\n\n```bash\ngit init\ngit clone 복사한 주소\n```\n\n```\nWorking tree has modifications. Cannot add.\n```\n\n해당 오류를 방지하기 위해 이후에 `readme.md` 나 파일 등을 수정하여 `commit` 을 진행해줍니다.\n\n\n# 기존의 Repository를 새로 생성한 Repository에 합치기\n\n<img alt={\"repo_copy\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/786e2bf5-aca8-4563-8f11-29976f1f6e67\"} />\n\n합치고자 하는 기존의 repository의 주소를 복사해줍니다. 이때 메인 브랜치명도 반드시 확인해주도록 합시다.\n\n```bash\ngit subtree add --prefix=기존레포지토리명 기존레포지토리주소 기존메인브랜치명\n```\n\n<img alt={\"\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/c1d0fee5-09b8-41e0-ab0c-0fc5c074b41d\"} />\n\n\n<img alt={\"\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/a2d1cd89-663f-4578-b28d-2d6e25301e67\"} />\n\n\n<img alt={\"\"}\n     src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/4522ba80-49f7-419e-a425-ccf8e9b79237\"} />\n\n해당 명령어를 입력하면 해당 Repository가 추가된 것을 확인할 수 있습니다.\n\n다음 명령어를 입력하여 push를 진행하여 remote에도 적용시켜주도록 합니다.\n\n```bash\ngit push origin HEAD:main\n```\n\ngithub의 remote repository를 확인해보면 다음과 같이 잘 적용된 것을 확인할 수 있습니다.\n\n\n<img alt={\"\"}\n     src={\"[https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/4522ba80-49f7-419e-a425-ccf8e9b79237](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/edc79285-8791-454e-a75b-dbbbf5a9f03f)\"} />","fields":{"slug":"github-repo-union"},"path":"github-repo-union.mdx"},{"frontMatter":{"date":"2024-01-23T15:00:00","title":"yarn berry 적용하기","tags":["yarn"],"series":[],"description":"yarn berry 적용하기","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/db966763-6723-4444-a699-2aaddcc3110d","published":true,"path":"yarn-berry-start.mdx","key":"yarn-berry-start"},"body":"`yarn` 을 이미 설치했다는 전제하에 진행하겠습니다. `yarn` 설치 여부는 `yarn -v` 을 쳐서 확인할 수 있습니다.\n\n<img alt={\"yarn-version\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/a9ba9e00-d298-4a96-a5f2-785947235397\"}/>\n\n\n# yarn berry로 전환하기\n\n```bash\nyarn set version berry\n```\n\n더욱 자세한 버전 변경 방법은 [@yarnpkg/cli](https://yarnpkg.com/cli/set/version) 을 참고해주세요.\n\n아래 명령어를 입력하여 더이상 쓰지 않는 `node_modules`, `package.lock.json` 를 삭제해줍니다.\n\n```bash\nrm -rf node_modules\nrm -rf package.lock.json\n```\n\n`.yarnrc.yml` 해당 파일에 `nodeLinker` 가 `node-modules` 라면 다음과 같이 변경해줍니다.\n\n```yaml\nyarnPath: .yarn/releases/yarn-4.0.2.cjs\nnodeLinker: pnp\n```\n\n이후에 설치를 진행해주면 완성입니다.\n\n```yaml\nyarn install\n```\n\n# Zero-installs 적용\n\n<aside>\n  🔗 Zero-installs 관련한 내용\n\n  - [yarn caching](https://yarnpkg.com/features/caching)\n  - [블로그 글](https://coyo-hm.github.io/post/yarn-berry-pnp#ZeroInstall)\n</aside>\n\n## Zero-installs 적용시에\n\n`.gitignore`\n\n```\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n!.yarn/cache\n```\n\n## Zero-installs 미적용시에\n\n`.gitignore`\n\n```\n.pnp.*\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n```\n\n<aside>\n  💡 `.gitignore` 에서 해당 파일 앞에 `!`은 무시하지 말고 반드시 포함하라는 의미입니다.\n\n</aside>\n\n# 참조\n\n- [@yarnpkg/cli](https://yarnpkg.com/cli/set/version)","fields":{"slug":"yarn-berry-start"},"path":"yarn-berry-start.mdx"},{"frontMatter":{"date":"2024-01-22T00:00:00","title":"Vite + React + TypeScript 환경에서 Emotion Css Prop 사용하기","tags":["vite","react","emotion","typescript"],"series":[],"description":"vite + react + typescript 환경에서 emotion css prop 사용하기","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/a8924712-3db6-4ab6-abc8-eb2795ff4121","published":true,"path":"vite-react-ts-emotion-props-config.mdx","key":"vite-react-ts-emotion-props-config"},"body":"`Vite` + `React` + `TypeScript` 환경에서 `Emotion` `css prop`를 사용하니 다음과 같이 계속 오류가 나는 것을 확인할 수 있었습니다.\n\n![Marquee-error](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/941a92c1-5c15-459b-9709-663013f390bb)\n\n\n\n검색해보니 `TypeScript` 말고도 `Vite`에서도 `css prop`를 사용하려면 추가 설정을 해줘야 하는 것을 알게 되어서 한번 정리해두려고 합니다.\n\n# TypeScript 설정\n\n`tsconfig.json`\n\n```json\n{\n  \"compilerOptions\": {\n    ...\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"@emotion/react\",\n    ...\n  },\n  ...\n}\n```\n\n[[emotion 공식 문서] typescript](https://emotion.sh/docs/typescript)\n\n# Vite 설정\n\n`vite.config.ts`\n\n```tsx\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react({\n      jsxImportSource: \"@emotion/react\",\n      babel: {\n        plugins: [\"@emotion/babel-plugin\"],\n      },\n    }),\n  ],\n});\n```\n\n# 참조\n\n- [Configure Emotion with your Vite React Project](https://dev.to/glocore/configure-emotion-with-your-vite-react-project-7jl)\n- [[emotion 공식 문서] typescript](https://emotion.sh/docs/typescript)","fields":{"slug":"vite-react-ts-emotion-props-config"},"path":"vite-react-ts-emotion-props-config.mdx"},{"frontMatter":{"date":"2024-01-10T00:00:00","title":"NextJS 블로그 giscus 적용하기","tags":["nextjs","giscus","typescript","utterances"],"series":["blog"],"description":"Next.js 블로그 utterances에서 giscus로 마이그레이션해보자","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/3af4ab5c-7099-4d79-9a30-8c9e8f7504af","published":true,"path":"utterances-to-giscus.mdx","key":"utterances-to-giscus"},"body":"저도 블로그나 동영상을 보고 댓글보다는 흔히 말하는 좋아요 등을 통해 포스트에 리액션을 남기는 것을 선호하는 편입니다.\n\n현재 블로그 댓글 기능은 `utterance`를 사용하여 댓글을 남길수는 있지만 간단하게 반응을 남길 수 없습니다.\n\n`utterance` 도 충분히 사용하는데 불편함은 없었지만 `utterance`과 마찬가지로 광고도 없으며 다양한 기능을 추가적으로 제공 중인 `giscus`로 마이그레이션 해보려고 합니다.\n\n# giscus 알아보기\n\n`giscus`에서 포스트에 대한 간단한 리액션을 남길 수도 있을 뿐더러 다양한 기능을 제공해주고 있습니다.\n\n- 댓글 시간순 정렬/인기순 정렬\n- 대댓글 작성\n- 다양한 테마\n- 다국어 지원(한글 포함)\n\n# giscus 적용하기\n\n`giscus`를 적용하기 위해서 다음과 같은 조건을 만족해야 합니다.\n\n![출처: [giscus](https://giscus.app/ko)](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/f583e370-dfae-4d68-a406-9e61355970eb)\n\n출처: [giscus](https://giscus.app/ko)\n\n## Discussions 활성화하기\n\ngiscus를 사용하기 위해서는 우선 해당 github repository의 discussions 기능이 활성화되어 있어야 합니다.\n\n해당하는 repository의 Setting > General > Features에서 discussions을 활성화시킬 수 있습니다.\n\n<img alt={\"github_setting\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/1aabd2f5-d989-4394-a540-7db263dc6dab\"} style={{margin:\"0 0 10px\"}}/>\n<img alt={\"github_setting_feature\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/dc4fc4fa-5af1-46e6-8074-c00a8fac40d2\"}/>\n\n\n\n## Discussions Category 생성\n\n자동으로 생성된 카테고리(일반적으로 General을 선택합니다)를 사용해도 되지만 저는 댓글을 위한 카테고리를 생성해주었습니다.\n\n<img alt={\"github_discussions\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/537c68ee-2c2b-482f-be73-207ea3e7b7e6\"} style={{margin:\"0 0 10px\"}}/>\n<img alt={\"github_discussions_category\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/e5a95fc2-1001-41a4-9dfe-d52f8fcebe7c\"}/>\n\n다른 사용자들은 댓글이 리플만 달 수 있도록 Announcement를 적용해줍니다.\n\n<img alt={\"github_create_category\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/e17cd1cd-e7b4-4b2e-acb5-f3da667456ff\"}/>\n\n## Giscus 설치하기\n\n이어서 [giscus 설치 페이지](https://github.com/apps/giscus) 에 들어가서 giscus를 설치해줍니다.\n\n<img alt={\"giscus_install\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/03c33e5f-19a2-4ebe-bf76-71b6278843fd\"}/>\n\ndiscussions을 활성화한 repository를 선택해주도록 합니다.\n\n<img alt={\"giscus_install_setting\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/4a6ff6ff-ee18-4c91-a085-435ac14d4f90\"}/>\n\n[giscus 홈페이지](https://giscus.app/ko) 에 들어가서 설정을 해줍니다. 언어와 저장소를 입력하고 댓글을 올릴 discussions 카데고리를 지정해줍니다.\n\n<img alt={\"giscus_setting_1\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/1175a586-412d-4e02-805c-672fa34af066\"} style={{margin:\"0 0 10px\"}}/>\n<img alt={\"giscus_setting_2\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/7975cd56-8caf-4421-8bc2-8bf7f65dfbbc\"}/>\n\n설정을 완료했으면 아래와 같이 script 코드가 나옵니다. 이를 잘 메모장에 복사두거나 따로 저장해주도록 합니다.\n\n<img alt={\"giscus_setting_3\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/e8b05ea3-94be-4d19-b0bf-5324f5177c39\"}/>\n\n## 코드 작성하기\n\n`next.js` 블로그의 경우 위의 스크립트 코드를 바로 사용할 수 없습니다. `Giscus` 컴포넌트를 새로 만들어 주고 다음과 같이 코드를 작성합니다. 해당 코드는 [git issue 에 올라온 코드](https://github.com/utterance/utterances/issues/161)를 참고하였습니다. `script` attribute의 `key`와 `value`는 위 giscus에서 제공한 값을 사용해주도록 합니다.\n\n```bash\nimport { useEffect, useRef } from \"react\";\nimport useTheme from \"@hooks/useTheme\";\n\nconst NEXT_PUBLIC_REPO_ID = process.env.NEXT_PUBLIC_REPO_ID as string;\nconst NEXT_PUBLIC_CATEGORY_ID = process.env.NEXT_PUBLIC_CATEGORY_ID as string;\n\nconst Giscus = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { isDarkTheme } = useTheme();\n\n  // https://github.com/giscus/giscus/tree/main/styles/themes\n  const theme = isDarkTheme ? \"dark\" : \"light\";\n\n  // https://github.com/utterance/utterances/issues/161\n  useEffect(() => {\n    if (!ref.current || ref.current.hasChildNodes()) return;\n\n    const scriptElem = document.createElement(\"script\");\n    scriptElem.src = \"https://giscus.app/client.js\";\n    scriptElem.async = true;\n    scriptElem.crossOrigin = \"anonymous\";\n\n    scriptElem.setAttribute(\"data-repo\", \"COYO-HM/COYO-HM.github.io\");\n    scriptElem.setAttribute(\"data-repo-id\", NEXT_PUBLIC_REPO_ID);\n    scriptElem.setAttribute(\"data-category\", \"Comments\");\n    scriptElem.setAttribute(\"data-category-id\", NEXT_PUBLIC_CATEGORY_ID);\n    scriptElem.setAttribute(\"data-mapping\", \"pathname\");\n    scriptElem.setAttribute(\"data-strict\", \"0\");\n    scriptElem.setAttribute(\"data-reactions-enabled\", \"1\");\n    scriptElem.setAttribute(\"data-emit-metadata\", \"0\");\n    scriptElem.setAttribute(\"data-input-position\", \"bottom\");\n    scriptElem.setAttribute(\"data-theme\", theme);\n    scriptElem.setAttribute(\"data-lang\", \"ko\");\n\n    ref.current.appendChild(scriptElem);\n  }, [theme]);\n\n  // https://github.com/giscus/giscus/blob/main/ADVANCED-USAGE.md#isetconfigmessage\n  useEffect(() => {\n    const iframe = document.querySelector<HTMLIFrameElement>(\n      \"iframe.giscus-frame\"\n    );\n    iframe?.contentWindow?.postMessage(\n      { giscus: { setConfig: { theme } } },\n      \"https://giscus.app\"\n    );\n  }, [theme]);\n\n  return (\n    <div className={\"py-5\"}>\n      <section ref={ref} />\n    </div>\n  );\n};\n\nexport default Giscus;\n```\n\n위의 컴포넌트를 댓글이 들어갈 부분에 넣어주면 완성입니다!\n\n# 기존 utterances에 있던 댓글 옮기기\n\n만약 저처럼 utterances에 있다면 해당 repository > issues에 댓글에 해당하는 issue에 label을 붙여줍니다.\n\n저 같은 경우에는 `comment` 라벨을 붙여주었습니다.\n\n<img alt={\"github_issues\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/80186d0a-bbae-4331-a502-19be1988ad7f\"}/>\n\n그 다음 label 버튼을 눌러 label 관리에 들어가서 comment의 convert to discussions 을 눌러줍니다.\n\n<img alt={\"github_issues_label\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/2f0e99c4-1c9b-4dfd-b398-f61061c10299\"}/>\n\n위에서 댓글 관리용으로 지정해둔 discussions category인 comments로 전환해줍니다.\n\n<img alt={\"github_issues_label_setting\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/3ae9334e-bfaa-4017-bb0b-61dc0e973205\"}/>\n\ncomments에 기존 댓글이 잘 들어간 것을 확인할 수 있습니다.\n\n<img alt={\"github_discussions_comments\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/c744020b-a17e-4429-81c7-892681111e86\"}/>\n\n# 참조\n\n- [Moving from utterances to giscus](https://shipit.dev/posts/from-utterances-to-giscus.html)\n- [giscus](https://giscus.app/ko)\n- https://github.com/utterance/utterances/issues/161","fields":{"slug":"utterances-to-giscus"},"path":"utterances-to-giscus.mdx"},{"frontMatter":{"date":"2024-01-04T00:00:00","title":"컴퓨터 네트워크의 기본","tags":["network","computer_science"],"series":["network_note"],"description":"컴퓨터 네트워크 및 인터넷 역사","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/241afd74-559a-417b-aabf-757027c20513","published":true,"path":"network-note-01.mdx","key":"network-note-01"},"body":"<aside>\n  💡 해당 포스트는 [해당 강의](http://www.kocw.net/home/cview.do?lid=52e88746ed8b2c74)를 듣고 정리한 내용입니다.\n\n</aside>\n\n# Network structure\n\n## Network edge\n\n: 일반적인 랩탑, 단말기, 서버 또는 웹 브라우저 같은 네트워크 가장자리에 존재하는 프로그램들\n\n## Network core\n\n: 메세지를 전달해주는 특수한 용도의 장비인 라우터들이 존재하는 부분\n\n<aside>\n  💡 라우터\n\n  네트워크 안에 존재하는 특수한 컴퓨터, 사용자들이 보낸 메세지를 목적지까지 전달하는 역할\n\n</aside>","fields":{"slug":"network-note-01"},"path":"network-note-01.mdx"},{"frontMatter":{"date":"2023-12-18T00:00:00","title":"husky not set as executable 오류","tags":["husky"],"series":["trouble_shooting"],"description":"husky not set as executable 오류 해결하기","thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/5b9bd72c-fbb3-487d-afbb-b3127e4a77d0","published":true,"path":"husky-precommit-unauthorized.mdx","key":"husky-precommit-unauthorized"},"body":"# ⚠️ 문제\n\n블로그를 배포하던 중에 다음과 같은 오류가 발생하였습니다.\n\n![husky-precommit-unauthorized](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/1407d749-eac6-46b6-8f2a-89ea956bc6da)\n\n# 🔧 해결\n\n찾아보니까 이는 권한 문제로 권한 문제로 .husky/pre-commit에 권한 설정을 해주면 간단하게 해결됩니다.\n\n`husky/pre-commit` 을 잠깐 삭제해주었다가 다시 생성했는데 그로 인해 발생된 것 같습니다.\n\n```bash\nchmod +x .husky/pre-commit\n```\n\n# 참조\n\n- [githook 실행 오류 (not set as executable)](https://den-shin.tistory.com/77)","fields":{"slug":"husky-precommit-unauthorized"},"path":"husky-precommit-unauthorized.mdx"}],"allTags":[{"tag":"all","count":31},{"tag":"react","count":9},{"tag":"typescript","count":9},{"tag":"javascript","count":9},{"tag":"network","count":5},{"tag":"nextjs","count":4},{"tag":"git","count":4},{"tag":"husky","count":3},{"tag":"yarn","count":2},{"tag":"emotion","count":2},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn_berry","count":1},{"tag":"vite","count":1},{"tag":"giscus","count":1},{"tag":"utterances","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"python3","count":1},{"tag":"gtag","count":1},{"tag":"google_analytics","count":1},{"tag":"computer_science","count":1},{"tag":"programming","count":1},{"tag":"lodash","count":1},{"tag":"commitlint","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"gatsby","count":1},{"tag":"framer_motion","count":1},{"tag":"tailwind","count":1}],"selectedTag":"all","page":0},"__N_SSG":true}