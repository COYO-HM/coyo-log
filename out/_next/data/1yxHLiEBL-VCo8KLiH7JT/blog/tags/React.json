{"pageProps":{"posts":[{"frontMatter":{"date":"2023-02-22T00:00:00","title":"Github Page로 React 프로젝트 무료로 배포해보기","tags":["JavaScript","React","GithubPage"],"description":"Github Page로 CRA로 만든 프로젝트를 무료로 배포해보자","published":true},"body":"> Github Page\n>\n> github repository에 올린 `javaScript` 프로젝트를 배포하여 정적 웹 사이트를 무료로 호스팅할 수 있게 하는 서비스이다.\n\n이전에 `react`로 만든 프로젝트를 한번 Github Page로 배포해보자.\n\n# Project Github page 라이브러리 설치\n\n```jsx\nnpm i gh-pages --dev\n```\n\n# Package.json 설정하기\n\n`package.json` 에 다음과 같이 홈페이지 주소를 추가해준다.\n\n```jsx\n \"homepage\": \"https://사용자 아이디.github.io/레포지토리 이름/\",\n```\n\n![homepage](/static/images/blog/github-page-publish-01.png)\n\n배포를 위해 `deploy`를 추가해준다.\n\n![deploy](/static/images/blog/github-page-publish-02.png)\n\n다음 명령어를 입력해 배포해준다.\n\n```bash\nnpm run deploy\n```\n\n# Github Page Repository에서 설정\n\n- Repository 메뉴에서 Settings 메뉴로 들어가준다.\n\n![Settings](/static/images/blog/github-page-publish-03.png)\n\n- Settings 메뉴 중에 Pages 메뉴로 들어가면 Branch가 none으로 설정되어 있다.\n\n![Pages](/static/images/blog/github-page-publish-04.png)\n\n- 생성된 gh-pages 브랜치로 설정해준다.\n\n![gh-pages](/static/images/blog/github-page-publish-05.png)\n\n다음과 같이 배포된 것을 확인할 수 있다.\n\n![complete](/static/images/blog/github-page-publish-06.png)\n\n# 참조\n\n- [Github Docs](https://docs.github.com/ko/pages)\n","fields":{"slug":"blog/git/github-page-publish"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/git/github-page-publish.mdx"},{"frontMatter":{"date":"2023-01-26T00:00:00","title":"TypeSript에서 Redux-ToolKit 사용하기","tags":["React","TypeScript","Redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true},"body":"# 설치\n\n```bash\nnpm install @reduxjs/toolkit\n\nyarn add @reduxjs/toolkit\n\n```\n\n# Store\n\n```TypeScript\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const store = configureStore({\n  reducer: {},\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n```\n\n`index.tsx`\n\n```TypeScript\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n# `UseDispatch`, `UseSelector`\n\n```TypeScript\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from '../Store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n```\n\n# CreateSlice\n\n`ExampleReducer.ts`\n\n```TypeScript\ninterface IExampleState {\n\t// reducer type들 표시\n\tuserInfo: {name: string, id: string} | null\n}\n\nconst initialState: IExampleState = {\n\t// 초기 상태 설정\n\tuserInfo: null\n}\n\nexport const ExampleSlice = createSlice({\n\tname: 'EXAMPLE',\n\tinitialState,\n\treducers: {\n\t\tupdateName: (state, action) => {\n\t\t\tstate.userInfo: {\n\t\t\t\t...state.userInfo,\n\t\t\t\taction.payload\n\t\t\t}\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\n\t\t\tstate.userInfo = payload\n\t\t})\n\t}\n})\n\nexport const { updateName } = ExampleSlice.actions\nexport const ExampleReducer = {\n\texample: ExampleSlice.reducer\n}\n```\n\n# CreateAsyncThunk\n\n```TypeScript\nexport const getUserInfoAsync = createAsyncThunk<\n  {\n    /*성공시에 출력될 data의 type*/\n  },\n  {\n    /*param의 type*/\n  }\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\n```\n\n# 참조\n\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\n","fields":{"slug":"blog/redux/RTK-with-ts"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/redux/RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-10-23T00:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["React","TypeScript","Emotion","Gatsby"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"./add_table_of_contents_in_post.png","published":true},"body":"# 목차 생성하기\n\n## tableOfContents\n\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\n\n```graphql\n{\n  allMarkdownRemark {\n    nodes {\n      tableOfContents\n    }\n  }\n}\n```\n\n```plaintext\n{\n  \"data\": {\n    \"allMarkdownRemark\": {\n      \"nodes\": [\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        {\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\n        },\n        ...\n        ]\n    }\n  },\n  \"extensions\": {}\n}\n\n```\n\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\n\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\n\n```typescript\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\n\n`PostTableOfContents.tsx`\n\n```typescript\nimport styled from \"@emotion/styled\";\n\ninterface IPostTableOfContentsProps {\n  tableOfContents: string;\n}\n\nconst TableofContents = styled.div``;\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n  return (\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n  );\n};\n\nexport default PostTableOfContents;\n```\n\n`post_template.tsx`\n\n```typescript\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: IPostTemplateProps) => {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <PostTableOfContents tableOfContents={tableOfContents} />\n      <CommentWidget />\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n```\n\n## 링크 동작시키기\n\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\n\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\n\n```shell\nyarn add gatsby-remark-autolink-headers\n\nnpm i gatsby-remark-autolink-headers\n```\n\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\n\n```javascript\n...\n{\n  resolve: `gatsby-transformer-remark`,\n    options\n:\n  {\n    plugins: [\n      ...\n        `gatsby-remark-autolink-headers`,\n    ],\n  }\n}\n,\n...\n```\n\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\n\n# 목차 CSS 적용하기\n\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n`;\n```\n\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\n씩 추가하였다.\n\n```typescript\nconst TableofContents = styled.div`\n  border-radius: 5px;\n  background-color: #b0a8b970;\n  padding: 15px;\n  width: 100%;\n\n  * {\n    list-style: none;\n    padding-bottom: 5px;\n\n    &:last-child {\n      padding-bottom: 0;\n    }\n  }\n\n  * > ul > li {\n    padding-left: 5px;\n  }\n`;\n```\n\n# 페이지 맨 위/아래로 가기 버튼 추가하기\n\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\n\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\n\n```typescript\nimport styled from '@emotion/styled'\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n...\n\nconst PostTableOfContents = ({\n  tableOfContents,\n}: IPostTableOfContentsProps) => {\n    const onClickUpButton = useCallback(() => {\n    window?.scrollTo(0, 0)\n  }, [])\n\n  const onClickDownButton = useCallback(() => {\n    window?.scrollTo(0, document.body.scrollHeight)\n  }, [])\n  return (\n    <TableofContentsWrapper>\n      <UpButton>\n        <FontAwesomeIcon icon={faAngleUp} />\n      </UpButton>\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n      <DownButton>\n        <FontAwesomeIcon icon={faAngleDown} />\n      </DownButton>\n    </TableofContentsWrapper>\n  )\n}\n```\n\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\n","fields":{"slug":"blog/gatsby/add_table_of_contents_in_gatsby"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/gatsby/add_table_of_contents_in_gatsby.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\n\n## `uniq`\n\n> 배열 원소 중복 제거\n>\n> ```tsx\n> uniq<T>(array: List<T> | null | undefined): T[];\n> // arg: array\n> // return: array\n> ```\n\n```tsx\nconst siteList = [0, 1, 1, 2];\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\n```\n\n# Collection 관련 함수\n\n## `sortby`\n\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\n>\n> ```tsx\n> sortBy(collection, [(iteratees = [_.identity])]);\n>\n> //collection: 정렬 대상\n> //[iteratees=[_.identity]] 정렬 기준\n>\n> // => return 정렬된 새로운 array\n> ```\n\n- 여러 개의 필드값으로도 정렬 가능\n\n```javascript\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\n```\n\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\n\n```javascript\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\n```\n\n```tsx\nconst users = [\n  { user: \"Fred\", age: 48 },\n  { user: \"Barney\", age: 36 },\n  { user: \"Fred\", age: 40 },\n  { user: \"Barney\", age: 34 },\n];\n\nconst sortByFunc = sortBy(users, [\n  function (o) {\n    return o.user;\n  },\n]);\nconsole.log(sortByFunc);\n// => objects for [['Barney', 36], ['Barney', 34], ['Fred', 48], ['Fred', 40]]\n\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\nconsole.log(sortByTwoArg);\n// => objects for [['Barney', 34], ['Barney', 36], ['Fred', 40], ['Fred', 48]]\n```\n\n# Lang 관련 함수\n\n## `clonedeep`\n\n> 객체 복사\n\n# Object 관련 함수\n\n## `get`\n\n> 객체에서 원하는 값 찾기\n\n```javascript\nget(찾을 장소, 가져올 키, 기본 값);\n```\n\n# 참조\n\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\n","fields":{"slug":"blog/react/lodash"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/react/lodash.mdx"},{"frontMatter":{"date":"2021-07-12T00:00:00","title":"React Class Component Life Cycle","tags":["React","JavaScript"],"description":"React Class Component 의 Life Cycle 정리","published":true},"body":"<aside> 본 포스트는 [리액트 공식 홈페이지](https://ko.reactjs.org/docs/react-component.html#componentdidupdate)를 읽고 공부한 기록입니다.</aside>\n\n# LifeCycle\n\n> 모든 컴포넌트를 여러 종류의 생명 주기 메소드를 가지며 생명 주기 메소드를 통해서 원하는 시점에 특정 함수가 실행하도록 할 수 있다.\n\n- React v_16.4 이상 LifeCycle\n  ![[https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)](/static/images/blog/react_class_render_01.png)\n\n- React v_16.3 이하 LifeCycle\n  ![https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](/static/images/blog/react_class_render_02.png)\n\n## Mount\n\n> DOM에 element를 집어넣는 것\n\n컴포넌트의 인스턴스가 생성되어 DOM 상에 삽입될 때에 순서대로 호출\n\n1. [`constructor()`](#constructor)\n2. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\n3. [`render()`](#render)\n4. ~~[`componentDidMount()`](#componentdidmount)~~\n\n## Update\n\nprops 또는 state가 변경되면 다음과 같은 순서로 re-render 발생.\n\n1. [`static getDerivedStateFromProps()`](#getDerivedStateFromProps)\n2. [`shouldComponentUpdate()`](#shouldComponentUpdate)\n3. [`render()`](#render)\n4. [`getSnapshotBeforeUpdate()`](#getSnapshotBeforeUpdate)\n5. ~~[`componentDidUpdate()`](#componentDidMount)~~\n\n## Unmount\n\nComponent가 DOM 상에서 제거될 때에 호출됨\n\n- [`componentWillUnmount`](#componentWillMount)\n\n## Handle Error\n\n아래 메서드들은 자식 컴포넌트를 렌더링하거나, 자식 컴포넌트가 생명주기 메서드를 호출하거나, 자식 컴포넌트가 생성자 메서드를 호출하는 과정에서 오류가 발생했을 때에 호출된다.\n\n- [`static getDerivedStateFromError()`](#getDerivedStateFromProps)\n- [`componentDidCatch()`](#componentDidCatch)\n\n# Life Cycle Method\n\n## `constructor`\n\n> 컴포넌트가 새롭게 생성될 때 마다 호출되는 컴포넌트 생성자 메소드로 보통 `this.state`에 객체를 할당하여 local state를 초기화하거나 인스턴스에 이벤트 처리 메서드를 바인딩하기 위해 사용된다.\n\n- 해당 컴포넌트가 마운트되기 전에 호출되는 함수, 컴포넌트 생성시에 가장 먼저 실행되는 메소드\n- 메서드를 바인딩하거나 state를 초기화하는 작업이 없다면 생성자(`constructor`) 생략 가능\n- React.Component를 상속한 컴포넌트의 생성자를 구현할 때에는 다른 구문에 앞서 `super(props);`를 호출해야 한다. 그렇지 않으면 this.props가 생성자 내에서 정의되지 않는 오류 발생\n- `constructor()` 내부에서 `setState()`를 호출하면 안된다. 만일 컴포넌트에 local state가 필요하다면 생성자 내에서 `this.state`에 초기 state 값을 할당하면 된다.\n- 생성자는 `this.state`를 직접 할당할 수 있는 유일한 곳으로 `constructor()` 이 외의 메서드에서는 `this.setState()`를 사용해야 함\n- 생성자 내에서는 부수 효과를 발생시키거나 구독 작업(subscription)을 수행 XXX => `componentDidMount()`에서 실행하기\n\n```javascript\nconstructor(props);\n{\n  super(props);\n  // 여기서 this.setState()를 호출 X\n  this.state = { counter: 0 };\n  this.handleClick = this.handleClick.bind(this);\n}\n```\n\n> !! `state`에 props 복사하지 않기 => `props` 복사는 `getDerivedStateFromProps`에서 하기\n>\n> ```javascript\n> constructor(props) {\n> super(props);\n> // 이렇게 하지 마세요!\n> this.state = { color: props.color };\n> }\n> ```\n>\n> 이런식으로 props를 state로 설정할 경우 props의 값의 변경 사항이 반영되지 않는다.\n>\n> `props`의 갱신을 의도적으로 무시해야 할 때만 `props`를 `state`로 따로 설정\n\n## `componentWillMount`\n\n```plain text\n`componentWillMount()` => UNSAFE_componentWillMount()\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillMount()`\n계속 이용하고 싶다면,\nnpx react-codemod rename-unsafe-lifecycles\n```\n\n> 마운트가 발생하기 전에 호출된다. `render()`가 실행되기 전에 호출되므로, 이 메서드 내에서 `setState()`를 동기적으로 호출하더라도 추가적인 렌더링이 발생하지 않는다.\n\n- state 초기화의 경우 `constructor()` 사용하는 것이 좋다.\n- 이 메서드 내에서 부수 효과를 발생시키거나 구독 작업(subscription)을 수행하면 안 된다. (해당 경우에는 `componentDidMount()`를 대신 사용)\n- 이 메서드는 서버 렌더링에서 호출되는 유일한 생명주기 메서드\n\n## `getDerivedStateFromProps`\n\n> 최초 마운트 시와 갱신 시 모두(랜더링 될 때마다 호출된다.)에서 `render` 메서드 호출 직전에 호출하여 주로 state를 갱신하기 위한 객체를 반환하거나, `null`을 반환하여 아무 것도 갱신하지 않을\n> 수도 있다.\n\n- 시간의 흐름에 따라 변하는 `props`에 `state`가 의존하는 경우(변화하는 offset prop에따라 현재 scroll direction을 기록하거나 source props에 따라 외부 데이터를 로딩하는\n  경우, `props`로 받아온 것을 `state`에 넣어주고 싶을 때 등)에 사용.\n- !! 다른 생명주기 메소드와 달리 앞에 `static`을 필요로하고, this 롤 조회를 할 수 없다.\n- !! state보다는 prop 사용\n- 이 메서드는 컴포넌트 인스턴스에 접근할 수 없습니다. 인스턴스 접근이 필요하다면, class 정의 외부에서 컴포넌트의 props와 state에 대한 순수 함수를\n  추출하여 `getDerivedStateFromProps()`와 다른 클래스 메서드 간에 코드를 공유 및 재사용할 수 있다.\n- [`componentWillReceiveProps`](#componentWillReceiveProps)와 달리 이 메소드의 경우 부모 컴포넌트가 다시 렌더링을 발생시켰을 때에만 실행되고, 해당 컴포넌트 내에서\n  지역적인 `setState`가 발생한 경우에는 실행되지 않는다.\n\n```javascript\nstatic getDerivedStateFromProps(props, state)\n{\n\n}\n```\n\n## `render`\n\n- **<span className=\"red\">클래스 컴포넌트에서 반드시 구현되어야 하는 유일한 메소드이다.</span>**\n\n## `getSnapshotBeforeUpdate`\n\n> 가장 마지막으로 렌더링된 결과가 DOM 등에 반영되기 전에 호출되는 메서드로 컴포넌트가 DOM으로부터 스크롤 위치 등과 같은 정보를 이후 변경되기 전에 얻을 수 있다.\n\n- 이 생명주기 메서드가 반환하는 값은 `componentDidUpdate()`에서 세번째 인자로 전달됨\n- 잘 사용되지는 않지만 함수형 컴포넌트 + Hooke을 사용할때에는 해당 메서드를 대체할 수 있는 기능이 아직 없다.\n- 발생 시점: `render()` / `getSnapshotBeforeUpdate()` / 실제 DOM에 변화 발생 / `compoenetDidUpdate`\n\n```javascript\ngetSnapshotBeforeUpdate(prevProps, prevState);\n{\n}\n```\n\n## `componentDidMount`\n\n> - 컴포넌트가 화면에 나타났을 때 호출, 컴포넌트의 첫번째 렌더링이 완료된후 호출되는 메서드\n>\n> - 주로 D3, masonry 처럼 DOM을 사용해야하는 외부 라이브러리 연동을 하거나, 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch 등을 통하여 ajax 요청을 하거나, DOM 의\n>   속성을 읽거나 직접 변경하는 작업을 진행\n\n- 이미 `props`와 `state`가 바뀐 상태로 매개변수로 `prevProps`와 `prevState`를 받아 조회할 수 있다.\n\n## `componentWillReceiveProps`\n\n> 컴포넌트가 새로운 props를 받게 되었을 때 호출된다.\n\n- 주로 state가 props에 따라 변해야 하는 로직을 작성한다.\n- 새로 받게된 props는 nextProps로 조회할 수 있다.\n\n```plain text\n`componentWillReceiveProps()` => UNSAFE_componentWillReceiveProps()\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillReceiveProps()`\n계속 이용하고 싶다면,\nnpx react-codemod rename-unsafe-lifecycles\n```\n\n## `shouldComponentUpdate`\n\n> `props` 또는 `state`가 새로운 값으로 갱신되어서 렌더링에 발생하기 직전에 호출\n>\n> 기본 값은 `true`로 초기 렌더링과 `forceUpdate()`가 사용될 때에는 호출되지 않는다.\n\n- 현재 `state` 또는 `props`의 변화가 컴포넌트의 출력 결과에 영향을 미치는지의 여부를 React에 알려주는 역할을 한다.\n- 기본 동작은 매 `state` 변화마다 다시 렌더링을 수행하는 것이며, 대부분의 경우 기본 동작에 따라야 한다.\n- 오직 성능 최적화를 목적으로 두고 있음 => <span className=\"red\">렌더링을 방지하는 목적으로 사용할 경우 버그로 이어질 수 있다.</span>\n- <span className=\"red\">내용을 직접 작성하는 대신에 [PureComponent](https://ko.reactjs.org/docs/react-api.html#reactpurecomponent)를 사용하는 것이 좋다. PureComponent는 props와 state에 대히여 얕은 비교를 수행하고, 해야 할 갱신 작업을 건너뛸 확률을 낮춰준다.</span>\n  > PureComponent \n  > \n  > React Component의 render() 함수가 동일한 `props`와 `state`에\n  대하여 동일한 결과를 렌더링한다면, React.PureComponent를 사용하여 경우에 따라 성능\n  향상을 누릴 수 있다. \n  > \n  > - <span className=\"yellow\">`props`와 `state`가 간단할 것으로 예상될 때에만 PureComponent를 상속해야한다.</span>\n  > - `props`와 `state`가 복잡하다면 pureComponent 말고 `forceUpdate()` 활용하기\n  > - `React.PureComponent`의 `shouldComponentUpdate()`는 컴포넌트의 하위 트리에\n  대한 `props` 갱신 작업을 수행하지 않는다.\n- 만일 직접 작성하고 싶다면, `this.props`와 `nextProps`, `this.state`와 `nextState`를 비교한 뒤 `false`를 반환하는 것으로 React가 갱신 작업을 건너뛰게 할 수 있다. \n   <span className=\"red\"> 건너뛰다고 해서 자식 컴포넌트들이 각자가 가진 state의 변화에 따라 가시 렌더링을 수행하는 것을 막는 것은 아니다.</span>\n\n```javascript\nshouldComponentUpdate(nextProps, nextState){}\n```\n\n## `componentWillUpdate`\n\n```plain text\n`componentWillUpdate()` => UNSAFE_componentWillUpdate()\nv_17 이전 까지는 유지 v_17.0 이후로는 `UNSAFE_componentWillUpdate()`\n계속 이용하고 싶다면,\nnpx react-codemod rename-unsafe-lifecycles\n```\n\n> 새로운 `props` 또는 `state`가 전달되어서 렌더링이 이루어지기 전에 호출\n\n- React component가 없데이트 되기 전에 미리 준비할 수 있는 단계\n- 초기 렌더링 시에는 호출 X\n- !! 이 메서드 내에서는 `this.setState()` 호출할 수 없으며 React Component가 갱신되도록 만드는 그 어떤 작업(Redux Action dispatch)\n  도 `componentWillUpdate()`가 결과값을 반환하지 건에 이루어지면 안됨\n- 통상적으로 이 메서드는 `componentDidUpdate()`로 대체 가능\n- 이 메서드 내에서 DOM에 대한 정보를 얻는다면 (예를 들어, 스크롤 위치 저장하기), 해당 코드를 `getSnapshotBeforeUpdate()`로 이전하는 것이 가능\n\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\n\n## `componentDidUpdate`\n\n> 업데이트 직후에 호출되며 최초 렌더링(초기 렌더링) 시에는 호출 X\n\n- 컴포넌트가 갱신되었을 때 DOM을 조작하기 위해 아 메소드 활용에 용이\n\n- 이전과 현재의 `props`를 비교하여 네트워크 요청을 보내는 작업도 이 메소드를 사용하면 된다.\n\n- 컴포넌트에서 `getSnapshotBeforeUpdate()`를 구현한다면, 해당 메서드가 반환하는 값은 `componentDidUpdate()`에 `snapshot` 인자로 넘겨집니다. 반환값이 없다면 해당\n  인자는 `undefined`를 가집니다.\n\n> !! `shouldComponentUpdate()`가 `false`로 반환되면 호출되지 않는다.\n\n```javascript\ncomponentDidUpdate(prevProps, prevState, snapshot);\n{\n}\n```\n\n- `componentDidUpdate()`에서 `setState()`를 즉시 호출할 수도 있지만, 조건문으로 감싸지 않으면 무한 반복이 발생할 수 있다.\n\n> 상위에서 내려온 prop을 그대로 `state`에 저장하는 것은 좋지 않으며, 그 대신 `prop`을 직접 사용하는 것이 좋다.\n\n```javascript\ncomponentDidUpdate(prevProps);\n{\n  if (this.props.userID !== prevProps.userID) {\n    this.fetchData(this.props.userID);\n  }\n}\n```\n\n## `componentWillUnmount`\n\n> 컴포넌트가 마운트 해제되어 제거되기 직전에 호출\n\n- 이 메서드 내에서 타이머 제거, 네트워크 요청 취소, `componentDidMount()` 내에서 생성된 구독 해제 등 필요한 모든 정리 작업을 수행\n- 이제 컴포넌트는 다시 렌더링되지 않으므로, `componentWillUnmount()` 내에서 `setState()`를 호출하면 안 된다. 컴포넌트 인스턴스가 마운트 해제되고 나면, <span className=\"red\">절대로 다시 마운트되지 않는다</span>\n\n# 참조\n\n- [리액트 공식 홈페이지 업데이트 로그](https://ko.reactjs.org/blog/2018/03/27/update-on-async-rendering.html)\n- [리액트 공식 홈페이지 Doc](https://ko.reactjs.org/docs/react-component.html)\n- [Velopert React 튜토리얼](https://velopert.com/3631)\n- [W3schools: React Lifecycle](https://www.w3schools.com/react/react_lifecycle.asp)\n","fields":{"slug":"blog/react/react_class_render"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/react/react_class_render.mdx"}],"tags":[{"tag":"JavaScript","count":6},{"tag":"React","count":5},{"tag":"TypeScript","count":3},{"tag":"Network","count":3},{"tag":"GithubPage","count":1},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Lodash","count":1}],"tag":"React"},"__N_SSG":true}