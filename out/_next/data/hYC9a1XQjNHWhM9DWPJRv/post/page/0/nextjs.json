{"pageProps":{"posts":[{"frontMatter":{"date":"2023-12-17T00:00:00","title":"NextJS에 GA4(Google Analytics) 적용하기","tags":["nextjs","gtag","google_analytics","typescript"],"series":["blog"],"description":"gtag에 알아보고 NextJS 블로그에 gtag4를 적용해보기","published":true,"thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/a5ef6447-15c7-495c-821c-1a254bcb6bfc","path":"nextjs-gtag.mdx","key":"nextjs-gtag"},"body":"# Google Analytics\n\n> Google 애널리틱스는 웹사이트 및 앱에서 데이터를 수집하여 비즈니스에 유용한 정보를 제공하는 보고서를 작성하는 플랫폼입니다.\n>\n> - 웹사이트와 앱 데이터를 모두 수집하여 고객 여정을 더욱 자세히 파악\n> - 세션 기반 데이터 대신 이벤트 기반 데이터 사용\n> - 쿠키 없는 측정, 행동 및 전환 모델링과 같은 개인 정보 보호 설정 포함\n> - 예측 기능으로 복잡한 모델이 없는 가이드 제공\n> - 미디어 플랫폼에 직접 통합하여 웹사이트 또는 앱에서 더 편리하게 작업\n\n출처: [Analytics 소개](https://support.google.com/analytics/topic/14089939?hl=ko&ref_topic=14090456&sjid=16409339143174609399-AP)\n\ngoogle analytics는 google에서 제공하는 내 서비스의 트래픽이나 사용자 유입 등을 파악할 수 있도록 도와주는 분석 도구입니다.\n\n# gtag4 블로그에 적용하기\n\n## 측정 ID 생성하기\n\n우선 [google analytics](https://analytics.google.com/analytics/web/provision/#/provision) 에서 측정 시작을 눌러 계정을 만들어줍니다. 이미 계정이 있으신 경우에는 새 속성을 만들어 주시거나 기존 측정 ID를 사용하시면 됩니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/054e9d4b-974a-4458-85ab-074db9402899\"} alt={\"google-analytics-0\"} style={{margin:\"5px auto 20px\"}}/>\n\n계정 이름에 팀 명 혹은 회사명을 입력합니다. 아래의 계정 데이터 공유 설정은 각자 맞게 읽어보고 선택하시면 됩니다. 저는 default로 진행했습니다. 생성 후에도 계정 설정에서 수정하실 수 있습니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/0ae8a4dd-9194-4ecf-90bb-16049a8b0204\"} alt={\"google-analytics-1\"} style={{margin:\"5px auto 20px\"}}/>\n\n계속해서 정보를 입력하시고 약관 동의까지 해서 속성까지 생성해 줍니다.\n\n속성까지 생성하면 다음과 같은 홈화면이 나옵니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/16d21d56-4c82-4e67-8b9b-73e568e4b1f8\"} alt={\"google-analytics-2\"} style={{margin:\"5px auto 20px\"}}/>\n\n상단의 모든 계정을 클릭하여 자신이 생성한 계정과 속성을 한눈에 볼 수 있습니다.\n\n여기서 태크 지정 도움말 받기를 눌러 웹 스트림 세부 정보를 확인합니다. 아직 받은 정보가 없다면, 설치 안내가 뜨는데 우리는 직접 코드를 작성할 것이기에 닫아주고 세부 정보를 확인해 주도록 합니다.\n\n웹 스트림 세부정보에서 발급받은 측정 ID를 확인하고 복사하실 수 있습니다. 측정 ID는 프로젝트에서 환경 변수로 저장해 줄 것이기에 복사해줍니다.\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/76d16c87-c908-4b3a-b06a-9fb757b0978a\"} alt={\"google-analytics-3\"} style={{margin:\"5px auto 20px\"}}/>\n\n## 프로젝트에 gtag 적용하기\n\ngtag를 설치줍니다. 만약 `typescript` 가 아닌 `javascript` + `nextjs` 인 경우에는 [nextjs의 공식 예시](https://github.com/vercel/next.js/tree/canary/examples/with-google-analytics)를 따라주시면 됩니다.\n\n```bash\nnpm install -D @types/gtag.js\n```\n<br/>\n아까 복사해 둔 측정 ID를 .env 파일 안에 환경 변수로 설정합니다.\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/417a70f3-d9a8-4a94-9ff4-0be4d38fcc0b\"} alt={\"env\"} style={{margin:\"5px auto 20px\"}}/>\n<br/>\n루트 디렉토리에 `lib/gtag.ts`  파일을 생성해주고, 다음 코드들을 작성합니다.\n\n`lib/gtag.ts`\n\n```tsx\n  export const GA_TRACKING_ID = process.env.NEXT_PUBLIC_GA_ID as string;\n\n  // https://developers.google.com/analytics/devguides/collection/gtagjs/pages\n  // 페이지 조회 전송을 위한 태그\n  export const pageview = (url: URL) => {\n    window.gtag(\"config\", GA_TRACKING_ID, {\n      page_path: url, // 페이지의 url\n      // page_path 말고도 page_title, page_location, send_page_view 등을 보낼 수 있습니다.\n    });\n  };\n\n  // https://developers.google.com/analytics/devguides/collection/gtagjs/events\n  // 이벤트 전송을 위한 태그로 위의 링크에서 더욱더 자세한 내용을 참조하실 수 있습니다.\n  export const event = (\n    action: Gtag.EventNames,\n    { event_category, event_label, value }: Gtag.EventParams\n  ) => {\n    window.gtag(\"event\", action, {\n      event_category,\n      event_label,\n      value,\n    });\n  };\n```\n\n- Google Analytics 페이지 조회 전송 파라미터 설명\n\n\n    | 이름 | 유형 | 필수 | 기본값 | 설명 |\n    | --- | --- | --- | --- | --- |\n    | page_title | string | 아니요 | document.title | 페이지의 제목입니다. |\n    | page_location | string | 아니요 | location.href | 페이지의 URL입니다. |\n    | page_path | string | 아니요 | location.pathname | 페이지 경로입니다. 재정의되는 경우 이 값은 / 문자로 시작해야 합니다. |\n    | send_page_view | boolean | 아니요 | true | 페이지 조회 전송 여부입니다. |\n\n    출처: [Google 애널리틱스 페이지 조회 측정](https://developers.google.com/analytics/devguides/collection/gtagjs/pages)\n\n\n- Google Analytics 이벤트 전송 파라미터 설명\n\n\n    | 이름 | 유형 | 기본값 | 설명 |\n    | --- | --- | --- | --- |\n    | `action` | string |  | Google 애널리틱스 이벤트 보고서에서 이벤트 액션으로 표시될 값입니다. |\n    | `category` | string | `general` | 이벤트의 카테고리입니다. |\n    | `label` | string |  | 이벤트 라벨입니다. |\n    | `value` | number |  | 이벤트 값으로 표시될 음수가 아닌 정수입니다. |\n\n    출처: [Google 애널리틱스 이벤트 측정](https://developers.google.com/analytics/devguides/collection/gtagjs/events)\n\n\n`pages/_app.tsx`\n\n```tsx\n  import { useRouter } from \"next/router\";\n  import Script from \"next/script\";\n  import Head from \"next/head\";\n  import { useEffect } from \"react\";\n  import * as gtag from \"lib/gtag\";\n  ...\n\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  const App = ({ Component, pageProps }: AppProps) => {\n    const router = useRouter();\n    useEffect(() => {\n      const handleRouteChange = (url: URL) => {\n        gtag.pageview(url);\n      };\n      router.events.on(\"routeChangeComplete\", handleRouteChange);\n      return () => {\n        router.events.off(\"routeChangeComplete\", handleRouteChange);\n      };\n    }, [router.events]);\n\n    return (\n      <>\n        {process.env.NODE_ENV !== \"development\" && (\n          <>\n            <Head>\n              <script\n                dangerouslySetInnerHTML={{\n                  __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n\n                gtag('config', '${gtag.GA_TRACKING_ID}', {\n                  page_path: window.location.pathname,\n                });\n              `,\n                }}\n              />\n            </Head>\n            {/* Global Site Tag (gtag.js) - Google Analytics */}\n            <Script\n              strategy=\"afterInteractive\"\n              src={`https://www.googletagmanager.com/gtag/js?id=${gtag.GA_TRACKING_ID}`}\n            />\n          </>\n        )}\n        ...\n      </>\n    );\n  };\n\n  export default App;\n```\n<br/>코드까지 작성하면 완성입니다. Google Analytics 에 들어가면 성공적으로 연결된 것을 확인할 수 있습니다!\n\n<img src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/8606eafe-ba20-4a16-9e19-81b51e5d65e3\"} alt={\"google-analytics-done\"} style={{margin:\"5px auto 20px\"}}/>\n\n# 참조\n\n- https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js","fields":{"slug":"nextjs-gtag"},"path":"nextjs-gtag.mdx"},{"frontMatter":{"date":"2023-12-10T00:00:00","title":"블로그 개편해보자","tags":["nextjs","framer_motion","tailwind"],"series":["blog"],"description":"블로그 개편사항 요약해보기","published":true,"thumbnail":"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/6e3156e2-0623-410b-8b52-011e99b0811f","path":"blog-version-2.mdx","key":"blog-version-2"},"body":"지난 11월에 미루고 미뤘던 블로그 개편을 진행하였습니다.\n\n왜 굳이 블로그를 바꿨나요?? 라고 물어보신다면 여기에는 여러 가지 이유가 있습니다.\n\n<img alt={\"prev-blog-image\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/0d794f7a-40aa-49c5-bea3-1fb7c0f59e50\"}/>\n\n- 어쩐지 심심한 블로그\n\n  하도 다른 분들의 아름다운 기술 블로그를 보다가 제 것을 보니 남의 떡이 커 보인다는 말이 있듯이 영 탐탁지 않더군요. 또한 애니메이션 효과 역시 hover 시에만 적용되는 최소한의 애니메이션만 있어서 애니메이션을 추가해야겠다고 생각했습니다.\n\n- 잘 사용되고 있지 않은 project 카테고리\n\n  가장 큰 이유라고 할 수 있는데 총 2가지의 카테고리,  blog와 project가 있지만 blog 카테고리에 포스트는 종종 올라와도 프로젝트 카테고리는 새로운 프로젝트를 진행하기까지의 여유가 이전에 없어서 영 활용되고 있지 못하고 있었습니다. 그리고 연결되는 포스트들이 있는데 이런 포스트를 묶음 별로 보여주는 게 좋을 것 같다는 생각이 들었습니다.\n\n- 불규칙한 코드들\n\n  gatsby에서 nextjs로 블로그를 migration 할 때 nextjs에 대한 지식이 부족해서 발생하는 문제 해결에만 집중하여 코드를 진행했기에 정리되지 않았습니다. 또한 중간중간 변경된 기능으로 인해 후에 쓸 것을 예상하여 삭제하지 않았던 컴포넌트들이 있어서 더욱더 디렉터리가 복잡한 상태였습니다.\n\n\n위의 이유로 인해 블로그를 개편해야겠다고 결정하였습니다. 이제 차례로 어떤 식으로 블로그가 변경되었는지 설명하겠습니다.\n\n# 1. 전체적인 애니메이션 추가\n\n완성된 main 화면입니다. 전체적으로 많은 애니메이션이 추가되었습니다.\n\n<img alt={\"blog_main\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/5589fbba-25b5-4e8d-bf3e-99b0f4f3a7fa\"}/>\n\n\n- 우선 가장 첫번째로 상단의 tag bar 가 자동으로 돌아가는 애니메이션을 추가해주었습니다. 기존의 tag bar 와 마찬가지로 각 tag를 선택하시면 선택한 tag를 포함하고 있는 포스트를 보여주는 페이지로 이동합니다.\n- 최신 포스트를 보여주는 화면 역시 애니메이션을 추가하였습니다. 가장 최근에 작성한 5개의 포스트가 보여지며 4초마다 메인으로 보여지는 포스트가 달라집니다. 가장 큰 메인 포스트를 누르거나 우측의 간략하게 적혀져 있는 포스트 소개를 누르면 각 포스트로 이동하실 수 있습니다.\n\n  상단의 좌측의 오른쪽, 왼쪽 화살표 버튼을 사용하여 포스트가 돌아가는 방향을 바꿀 수도 있고 정지 버튼과 플레이 버튼을 통해 애니메이션을 정지, 재생 시킬 수 있습니다. 또한 상단 우측의 점버튼을 클릭하여 메인 포스트를 바꾸거나 우측의 간략한 포스트 소개를 마우스로 hover 하면서 메인 포스트를 변경할 수 있습니다.\n\n  위의 모든 애니메이션은 `framer-motion`을 사용하여 더욱 쉽게 애니메이션을 제작하였습니다.\n\n- 하단의 시리즈 카드에 마우스를 hover 하면 해당 카드는 플립 카드로 간단한 설명과 해당 시리즈의 포스트의 개수를 보실 수 있습니다. 카드를 클릭할 경우 해당 시리즈의 소개 페이지로 이동합니다.\n\n<img alt={\"blog_main_series\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/ef53e3b2-2102-4605-a8e4-a6a80f445efa\"}/>\n\n\n\n# 2. 새로운 카테고리 Series 추가\n\n<img alt={\"blog_series\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/f05c1c30-ca08-4843-a8e4-f058c6649205\"}/>\n\nproject 카테고리가 사라지고 series 카테고리가 생성되었습니다. 개발자들이라면 많이들 보시는 velog 의 시리즈와 동일한 기능으로 시리즈 페이지에서는 한 페이지당 총 4개의 시리즈가 보여지며 아직까지는 3개의 시리즈 밖에 없지만 추후 추가 예정입니다!\n\n- Trouble Shooting Log 라는 시리즈는 트러블 슈팅 로그를 개인 노션에 정리해서 보고 있었는데 오류 처리에 대해 어떤 식으로 관리하고 있는지 스터디 도중 궁금해하시는 분이 많으셔서 시리즈로 만들어 정리해두려고 합니다.\n- 다른 기술 블로그를 보니 코드 스니펫을 블로그에 업로드 하는 분들이 많으셔서 저도 “공유하고 공유받으면 더 좋지 않을까?” 라는 생각이 들어 시리즈로 생성해두었습니다.\n\n# 3. 전반적인 코드 리펙토링\n\n- 기존의 서버와의 통신을 담당하던 util 함수는 모두 `api.ts` 파일에 함께 관리했습니다. 하지만 기능이 다양해짐에 따라 함수가 더 많이 필요해서 한 파일에 관리하는 것보다 함수를 파일별로 구분하여 관리해주도록 하였습니다.\n\n<img alt={\"blog_refactoring_api\"} src={\"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/194b6b02-4ad8-45bc-9247-b9bfe3aeddb7\"}/>\n\n  이런식으로 좀더 세세하게 하나의 파일로 관리했던 부분들을 분리하여 관리하도록 정리해주었습니다.\n\n- 명칭 통일\n\n  `상단에 있던 blog, project 들을 menu, category 로 혼용하여 지칭하였습니다. 그리고 포스트들에 대한 간단한 소개글 역시 description, summary로 혼용되어 사용되고 있었습니다. 이러한 부분들을 하나로 통일해주었습니다.\n\n- 잘 쓰는 스타일 컴포넌트화\n\n  블로그에서 많이 쓰인 둥글고 그림자가 있는 카드 모양의 스타일을 컴포넌트화 해주었습니다. 애니메이션 적용할 경우를 위해 `framer-motion`의 `HTMLMotionProps`를 상속받은 타입을 props로 사용하도록 해주었습니다.\n\n  ```tsx\n  import React from \"react\";\n  import { HTMLMotionProps, motion } from \"framer-motion\";\n\n  interface Props extends HTMLMotionProps<\"div\"> {}\n\n  const ShadowRoundedCard = ({ children, ...rest }: Props) => {\n    return (\n      <motion.div\n        {...rest}\n        className={`rounded-xl shadow-xl dark:shadow-black/50 bg-white dark:bg-neutral-800 ${rest?.className}`}\n      >\n        {children}\n      </motion.div>\n    );\n  };\n  export default ShadowRoundedCard;\n  ```\n\n  컴포넌트화 이후 동일한 스타일을 위해 소모되던 많은 코드양이 감소하였습니다.\n\n\n이전 블로그보다 많은 부분에서 개선을 시도하였습니다. 아직도 수정해야 할 부분이 많지만 차근차근 꾸준히 수정해나가겠습니다!!\n\n디자인에 아이디어와 코멘트를 주신 [@adultlee](https://github.com/adultlee) 님 정말 감사합니다!!","fields":{"slug":"blog-version-2"},"path":"blog-version-2.mdx"},{"frontMatter":{"date":"2023-10-09T00:00:00","title":"NextJS Large Page Data Warning 해결하기","tags":["nextjs"],"series":["trouble_shooting","blog"],"description":"NextJS Large Page Data Warning 해결 과정","published":true,"thumbnail":"https://user-images.githubusercontent.com/56423604/273578963-e3f37379-368c-460d-9b37-c4b98cfba9e7.png","path":"nextjs-large-page-data-warning.mdx","key":"nextjs-large-page-data-warning"},"body":"# ⚠️ 문제\n언제부터인가 위와 같은 경고 문구가 출력되었다. 처음에는 이미지 때문인줄 알았는데 이미지를 다른 사이트에 업로드하고 해당 이미지 링크만 불러와도 같은 문구가 출력되는 것을 알 수 있었다.\n<img src={\"https://user-images.githubusercontent.com/56423604/273622904-4a226424-b912-46b8-be9b-524a3ddfbd12.png\"} alt={\"nextjs-large-data-warning-message\"} style={{margin:\"20px auto\"}}/>\n\nNextJS 공식 홈페이지를 살펴보면 `getStaticProps`에서 필요한 일정량의 데이터만 렌더해주어야한다고 되어있다.\n\n페이징을 client 단에서 진행했고, 모든 tag 또한 보여줘야 했기 때문에 이를 위해서 모든 페이지에서 모든 포스트를 불러오고 있었는데 포스트의 양이 늘면서 이와 같은 문제가 발생했다고 판단했다.\n<img src={\"https://user-images.githubusercontent.com/56423604/273624007-9db1879b-6a09-40a4-a005-a7c0d035fcc2.png\"} alt={\"nextjs-large-data\"} style={{margin:\"20px auto 5px\"}}/>\n  <div style={{color: \"rgb(163 163 163)\", fontSize:\"12px\", margin: \"0 0 10px\"}}>이미지 출처: [[NextJS] Large Page Data](https://nextjs.org/docs/messages/large-page-data)</div>\n\n# 🔧 해결\n그래서 post의 정보와 tag 정보를 가진 json 파일을 생성하도록 해주었다.\n\n```jsx\nconst createPostTable = () => {\n  const files = sync(`${CONTENT_DIR_PATH}/**/*.md*`).reverse();\n\n  try {\n    let fileAttributes = {};\n    let tagsTablePublished = { blog: {}, project: {} };\n    let tagsTableUnpublished = { blog: {}, project: {} };\n\n    for (const filePath of files) {\n      const file = fs.readFileSync(filePath, { encoding: \"utf8\" });\n      const { attributes } = frontMatter(file);\n      const { date, title, tags, description, published } = attributes;\n\n      const postPath = filePath.replace(`${CONTENT_DIR_PATH}/`, \"\");\n      const postKey = postPath.replace(path.extname(filePath), \"\");\n      const postTags = tags.map((tag) =>\n        tag.toLowerCase().replace(/\\s|-/gi, \"_\")\n      );\n      const postMenu = postPath.split(\"/\")[0];\n\n      postTags.forEach((t) => {\n        tagsTableUnpublished[postMenu][t] = tagsTableUnpublished[postMenu][t]\n          ? [...tagsTableUnpublished[postMenu][t], postKey]\n          : [postKey];\n        if (published) {\n          tagsTablePublished[postMenu][t] = tagsTablePublished[postMenu][t]\n            ? [...tagsTablePublished[postMenu][t], postKey]\n            : [postKey];\n        }\n      });\n      fileAttributes[postKey] = {\n        path: postPath,\n        menu: postMenu,\n        title,\n        tags: postTags,\n        date: date ? new Date(date).toISOString().substring(0, 19) : \"\",\n        published,\n      };\n    }\n\n    fs.mkdirSync(TABLE_DIR_PATH, { recursive: true });\n    fs.writeFileSync(\n      path.join(TABLE_DIR_PATH, `postsTable.json`),\n      JSON.stringify(fileAttributes),\n      \"utf-8\"\n    );\n    fs.writeFileSync(\n      path.join(TABLE_DIR_PATH, `tagsTable.json`),\n      JSON.stringify({\n        published: tagsTablePublished,\n        unpublished: tagsTableUnpublished,\n      }),\n      \"utf-8\"\n    );\n  } catch (e) {\n    console.error(e);\n  }\n};\n```\npublic/static/table 안에 json 파일이 생성된 것을 확인할 수 있었다.\n\n<img alt={\"nextjs-large-data-directory\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273626948-9a1c6b8c-51fc-434a-b0e8-29bd94cdf565.png\"}/>\n\n\n생성한 데이터는 다음과 같은 파일 구조를 가지고 있다. key 값으로 포스트의 위치를 담아주었다.\n<img alt={\"posts-table\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273625889-f035259f-9608-4686-8537-6d6b89d4d491.png\"}/>\n\n\ngetStaticProps 에서 post를 불러오는 부분에서 page를 받아서 page에 해당하는 post만을 불러올 수 있도록 변경해주었다.\n그랬더니 다음과 같이 콘솔창에서 경고 문구가 나오지 않는 것을 확인할 수 있었다!\n<img alt={\"nextjs-large-page-data-solve\"} style={{margin:\"20px auto\"}} src={\"https://user-images.githubusercontent.com/56423604/273627309-ac016625-ea6d-4e22-b3cc-7c46b0f6e964.png\"}/>\n\n# 참조\n- [[NextJS] Large Page Data](https://nextjs.org/docs/messages/large-page-data)","fields":{"slug":"nextjs-large-page-data-warning"},"path":"nextjs-large-page-data-warning.mdx"}],"allTags":[{"tag":"all","count":25},{"tag":"javascript","count":9},{"tag":"react","count":8},{"tag":"typescript","count":7},{"tag":"network","count":4},{"tag":"nextjs","count":3},{"tag":"git","count":3},{"tag":"css","count":2},{"tag":"redux","count":2},{"tag":"husky","count":2},{"tag":"axios","count":2},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn_berry","count":1},{"tag":"styled_components","count":1},{"tag":"redux_persist","count":1},{"tag":"python3","count":1},{"tag":"gtag","count":1},{"tag":"google_analytics","count":1},{"tag":"programming","count":1},{"tag":"lodash","count":1},{"tag":"commitlint","count":1},{"tag":"githubpage","count":1},{"tag":"intellij","count":1},{"tag":"emotion","count":1},{"tag":"gatsby","count":1},{"tag":"framer_motion","count":1},{"tag":"tailwind","count":1}],"selectedTag":"nextjs","page":0},"__N_SSG":true}