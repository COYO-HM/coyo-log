{"pageProps":{"posts":[{"frontMatter":{"date":"2023-01-26T00:00:00","title":"TypeSript에서 Redux-ToolKit 사용하기","tags":["React","TypeScript","Redux"],"description":"TypeScript에서 redux-toolkit 설치부터, Store 설정, UseDispatch, UseSelector, CreateSlice(build), CreateAsyncThunk 사용해보기","published":true},"body":"# 설치\r\n\r\n```bash\r\nnpm install @reduxjs/toolkit\r\n\r\nyarn add @reduxjs/toolkit\r\n\r\n```\r\n\r\n# Store\r\n\r\n```TypeScript\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nexport const store = configureStore({\r\n  reducer: {},\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n```\r\n\r\n`index.tsx`\r\n\r\n```TypeScript\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n```\r\n\r\n# `UseDispatch`, `UseSelector`\r\n\r\n```TypeScript\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { AppDispatch, RootState } from '../Store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n```\r\n\r\n# CreateSlice\r\n\r\n`ExampleReducer.ts`\r\n\r\n```TypeScript\r\ninterface IExampleState {\r\n\t// reducer type들 표시\r\n\tuserInfo: {name: string, id: string} | null\r\n}\r\n\r\nconst initialState: IExampleState = {\r\n\t// 초기 상태 설정\r\n\tuserInfo: null\r\n}\r\n\r\nexport const ExampleSlice = createSlice({\r\n\tname: 'EXAMPLE',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tupdateName: (state, action) => {\r\n\t\t\tstate.userInfo: {\r\n\t\t\t\t...state.userInfo,\r\n\t\t\t\taction.payload\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder.addcase(getUserInfoAsync.fullfilled, (state, {payload}) => {\r\n\t\t\tstate.userInfo = payload\r\n\t\t})\r\n\t}\r\n})\r\n\r\nexport const { updateName } = ExampleSlice.actions\r\nexport const ExampleReducer = {\r\n\texample: ExampleSlice.reducer\r\n}\r\n```\r\n\r\n# CreateAsyncThunk\r\n\r\n```TypeScript\r\nexport const getUserInfoAsync = createAsyncThunk<\r\n  {\r\n    /*성공시에 출력될 data의 type*/\r\n  },\r\n  {\r\n    /*param의 type*/\r\n  }\r\n>('EXAMPLE/getUserInfoAsync', async (param) => await axios.method('url', param));\r\n```\r\n\r\n# 참조\r\n\r\n- [Redux-ToolKit Docs](https://redux-toolkit.js.org/tutorials/quick-start)\r\n","fields":{"slug":"blog/redux/RTK-with-ts"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/redux/RTK-with-ts.mdx"},{"frontMatter":{"date":"2022-10-23T00:00:00","title":"Gatsby Markdown Post에 목차 추가하기","tags":["React","TypeScript","Emotion","Gatsby"],"description":"Gatsby Blog, Markdown Post에 목차 추가하고 링크 걸기 + 페이지 맨 위/아래로 가기 버튼 추가하기","thumbnail":"./add_table_of_contents_in_post.png","published":true},"body":"# 목차 생성하기\r\n\r\n## tableOfContents\r\n\r\n이미 목차는 `gatsby-transformer-remark`에 의해 HTML로 생성되어 있다. 다음과 같은 query 를 입력해보면,\r\n\r\n```graphql\r\n{\r\n  allMarkdownRemark {\r\n    nodes {\r\n      tableOfContents\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```plaintext\r\n{\r\n  \"data\": {\r\n    \"allMarkdownRemark\": {\r\n      \"nodes\": [\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#greedy-algorithm%EC%9D%B4%EB%9E%80\\\">Greedy Algorithm이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#implementation%EC%9D%B4%EB%9E%80\\\">Implementation이란?</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        {\r\n          \"tableOfContents\": \"<ul>\\n<li><a href=\\\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\\\">문제 설명</a></li>\\n<li><a href=\\\"#%EB%82%B4-%ED%92%80%EC%9D%B4\\\">내 풀이</a></li>\\n</ul>\"\r\n        },\r\n        ...\r\n        ]\r\n    }\r\n  },\r\n  \"extensions\": {}\r\n}\r\n\r\n```\r\n\r\n`<a>` tag로 이미 링크까지 제공하고 있음을 확인할 수 있다.\r\n\r\nPost Data를 부르는 부분에 다음과 같이 `tableOfContents`를 추가해준다.\r\n\r\n```typescript\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n```\r\n\r\n목차 부분을 나타내는 컴포넌트(`PostTableOfContents.tsx`)를 생성해주고 `tableOfContents`를 넘겨준다.\r\n\r\n`PostTableOfContents.tsx`\r\n\r\n```typescript\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface IPostTableOfContentsProps {\r\n  tableOfContents: string;\r\n}\r\n\r\nconst TableofContents = styled.div``;\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n  return (\r\n    <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n  );\r\n};\r\n\r\nexport default PostTableOfContents;\r\n```\r\n\r\n`post_template.tsx`\r\n\r\n```typescript\r\nconst PostTemplate = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: IPostTemplateProps) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0];\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <PostTableOfContents tableOfContents={tableOfContents} />\r\n      <CommentWidget />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n```\r\n\r\n## 링크 동작시키기\r\n\r\n`gatsby-transformer-remark`에서 제공하는 `<a>` tag가 동작하게 하기 위해서는 `gatsby-remark-autolink-headers` 플러그인이 필요하다.\r\n\r\n자신의 프로젝트에 맞게 `yarn`과 `npm` 중 하나를 골라 설치해준다.\r\n\r\n```shell\r\nyarn add gatsby-remark-autolink-headers\r\n\r\nnpm i gatsby-remark-autolink-headers\r\n```\r\n\r\n`gatsby-config.js` 파일에 다음과 같이 추가한다.\r\n\r\n```javascript\r\n...\r\n{\r\n  resolve: `gatsby-transformer-remark`,\r\n    options\r\n:\r\n  {\r\n    plugins: [\r\n      ...\r\n        `gatsby-remark-autolink-headers`,\r\n    ],\r\n  }\r\n}\r\n,\r\n...\r\n```\r\n\r\n위와 같이 추가해주는 이유는 `gatsby-remark-autolink-headers`은 `gatsby-transformer-remark` 플러그인의 플러그인이기 때문이다.\r\n\r\n# 목차 CSS 적용하기\r\n\r\n`post_template.tsx`에 다음과 같이 목차에 style을 추가해주었다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n`;\r\n```\r\n\r\nheader 1 에 속해있는 header 2와 같이 상속관계에 존재하는 header의 관계를 표현하고자 부모가 있는 header(상위 Header가 있는 header)의 경우, `padding-left`를 `5px`\r\n씩 추가하였다.\r\n\r\n```typescript\r\nconst TableofContents = styled.div`\r\n  border-radius: 5px;\r\n  background-color: #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n\r\n  * {\r\n    list-style: none;\r\n    padding-bottom: 5px;\r\n\r\n    &:last-child {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n\r\n  * > ul > li {\r\n    padding-left: 5px;\r\n  }\r\n`;\r\n```\r\n\r\n# 페이지 맨 위/아래로 가기 버튼 추가하기\r\n\r\n생성한 목차 위아래에 페이지의 맨 위/아래로 가는 버튼을 추가했다.\r\n\r\n버튼 ui는 `FontAwesomeIcon`을 이용하였다.\r\n\r\n```typescript\r\nimport styled from '@emotion/styled'\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n...\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n    const onClickUpButton = useCallback(() => {\r\n    window?.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const onClickDownButton = useCallback(() => {\r\n    window?.scrollTo(0, document.body.scrollHeight)\r\n  }, [])\r\n  return (\r\n    <TableofContentsWrapper>\r\n      <UpButton>\r\n        <FontAwesomeIcon icon={faAngleUp} />\r\n      </UpButton>\r\n      <TableofContents dangerouslySetInnerHTML={{ __html: tableOfContents }} />\r\n      <DownButton>\r\n        <FontAwesomeIcon icon={faAngleDown} />\r\n      </DownButton>\r\n    </TableofContentsWrapper>\r\n  )\r\n}\r\n```\r\n\r\n버튼을 누르면 스크롤이 위로 아래로 움직이는 것을 확인할 수 있다.\r\n","fields":{"slug":"blog/gatsby/add_table_of_contents_in_gatsby"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/gatsby/add_table_of_contents_in_gatsby.mdx"},{"frontMatter":{"date":"2022-01-10T00:00:00","title":"Lodash 자주 사용하는 함수 정리","tags":["React","TypeScript","Lodash","JavaScript"],"description":"자주 사용하는 lodash 함수 정리","published":true},"body":"# Array 관련 함수\r\n\r\n## `uniq`\r\n\r\n> 배열 원소 중복 제거\r\n>\r\n> ```tsx\r\n> uniq<T>(array: List<T> | null | undefined): T[];\r\n> // arg: array\r\n> // return: array\r\n> ```\r\n\r\n```tsx\r\nconst siteList = [0, 1, 1, 2];\r\nconst uniqSiteList = uniq(siteList); // [0, 1, 2]\r\n```\r\n\r\n# Collection 관련 함수\r\n\r\n## `sortby`\r\n\r\n> collection 값들을 원하는 필드를 기준으로 오름차순으로 정렬\r\n>\r\n> ```tsx\r\n> sortBy(collection, [(iteratees = [_.identity])]);\r\n>\r\n> //collection: 정렬 대상\r\n> //[iteratees=[_.identity]] 정렬 기준\r\n>\r\n> // => return 정렬된 새로운 array\r\n> ```\r\n\r\n- 여러 개의 필드값으로도 정렬 가능\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, [정렬 기준 필드값 1, 정렬 기준 필드값 2]);\r\n```\r\n\r\n- 내림차 순으로 정렬하기 위해서는, `reverse()` 사용\r\n\r\n```javascript\r\nsortBy(정렬을 원하는 컬렉션, 정렬 기준 필드값).reverse();\r\n```\r\n\r\n```tsx\r\nconst users = [\r\n  { user: \"fred\", age: 48 },\r\n  { user: \"barney\", age: 36 },\r\n  { user: \"fred\", age: 40 },\r\n  { user: \"barney\", age: 34 },\r\n];\r\n\r\nconst sortByFunc = sortBy(users, [\r\n  function (o) {\r\n    return o.user;\r\n  },\r\n]);\r\nconsole.log(sortByFunc);\r\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\r\n\r\nconst sortByTwoArg = sortBy(users, [\"user\", \"age\"]);\r\nconsole.log(sortByTwoArg);\r\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\r\n```\r\n\r\n# Lang 관련 함수\r\n\r\n## `clonedeep`\r\n\r\n> 객체 복사\r\n\r\n# Object 관련 함수\r\n\r\n## `get`\r\n\r\n> 객체에서 원하는 값 찾기\r\n\r\n```javascript\r\nget(찾을 장소, 가져올 키, 기본 값);\r\n```\r\n\r\n# 참조\r\n\r\n- [lodash 공식 문서](https://lodash.com/docs/4.17.15#compact)\r\n","fields":{"slug":"blog/react/lodash"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/lodash.mdx"}],"tags":[{"tag":"React","count":3},{"tag":"TypeScript","count":3},{"tag":"Redux","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Network","count":1},{"tag":"Lodash","count":1},{"tag":"JavaScript","count":1}],"tag":"React"},"__N_SSG":true}