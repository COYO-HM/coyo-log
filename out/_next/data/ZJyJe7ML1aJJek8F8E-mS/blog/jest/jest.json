{"pageProps":{"post":{"frontMatter":{"date":"2022-01-12T00:00:00","title":"Jest","tags":["Jest","JavaScript"],"description":"","published":false},"body":"# Jest\r\n\r\n> TDD(Test-Driven Development) 단순성에 초점을 맞춘 자바스크립트 테스트 프레임 워크\r\n\r\n> TDD(Test-Driven Development)\r\n>\r\n> 소프트웨어 개발 방법론 중 하나로 테스트코드를 먼저 작성한 후에 구현 코드를 작성 단계와 리펙토링 단계를 짧은 주기로 반족하는 테스트 주도 개발 방법론\r\n\r\n- zero config\r\n\r\n  별도의 설정 없이 바로 작업하는 것을 목표로 한다.\r\n\r\n- snapshots\r\n\r\n  큰 객체로 테스트하는 것을 쉽게 만든다. 스냅샷 또는 인라인에 저장된 객체화 함께 테스트가 실행된다.\r\n\r\n- isolated\r\n\r\n  성능을 극대화하기 위해 테스트들은 각각의 프로세스에서 병렬 실행된다.\r\n\r\n- greatapi\r\n\r\n  `it`, `expect`와 같은 Framework, Assertion API를 모두 가지고 있다.\r\n\r\n# Jest api 정리\r\n\r\n## `toBe`\r\n\r\n> 정확한 값 일치 여부 확인\r\n\r\n```javascript\r\nexpect(2 + 2).toBe(4);\r\n```\r\n","fields":{"slug":"blog/jest/jest"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/jest/jest.md"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"jest\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#jest\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Jest\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"TDD(Test-Driven Development) 단순성에 초점을 맞춘 자바스크립트 테스트 프레임 워크\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"TDD(Test-Driven Development)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"소프트웨어 개발 방법론 중 하나로 테스트코드를 먼저 작성한 후에 구현 코드를 작성 단계와 리펙토링 단계를 짧은 주기로 반족하는 테스트 주도 개발 방법론\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"zero config\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"별도의 설정 없이 바로 작업하는 것을 목표로 한다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"snapshots\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"큰 객체로 테스트하는 것을 쉽게 만든다. 스냅샷 또는 인라인에 저장된 객체화 함께 테스트가 실행된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"isolated\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"성능을 극대화하기 위해 테스트들은 각각의 프로세스에서 병렬 실행된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"greatapi\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"it\"\n          }), \", \", _jsx(_components.code, {\n            children: \"expect\"\n          }), \"와 같은 Framework, Assertion API를 모두 가지고 있다.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"jest-api-정리\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#jest-api-정리\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Jest api 정리\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tobe\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#tobe\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"toBe\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"정확한 값 일치 여부 확인\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"expect\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"toBe\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"4\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"React","count":10},{"tag":"JavaScript","count":9},{"tag":"TypeScript","count":8},{"tag":"Network","count":6},{"tag":"NextJS","count":2},{"tag":"Redux","count":2},{"tag":"recoil","count":2},{"tag":"styled-components","count":2},{"tag":"Git","count":2},{"tag":"GithubPage","count":1},{"tag":"Algorithm","count":1},{"tag":"npm","count":1},{"tag":"SCSS","count":1},{"tag":"CSS","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"react-beautiful-dnd","count":1},{"tag":"react-hook-form","count":1},{"tag":"react-helmet","count":1},{"tag":"react-query","count":1},{"tag":"react-apexcharts","count":1},{"tag":"Jest","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}