{"pageProps":{"post":{"frontMatter":{"date":"2022-03-22T00:00:00","title":"React useMemo와 useCallback","tags":["React","JavaScript"],"description":"React useMemo와 useCallback","published":false},"body":"# `useMemo`\r\n\r\n```javascript\r\nuseMemo(() => fn, [deps]);\r\n```\r\n\r\n> deps가 변한다면, fn 함수 실행 후 값을 반환한다.\r\n\r\n- 동일한 입력이 들어온다면 재활용하여 중복 연산을 피할 수 있다.\r\n\r\n# `useCallback`\r\n\r\n```javascript\r\nuseCallback(fn, [deps]);\r\n```\r\n\r\n> deps가 변한다면, fn 이라는 새로운 함수를 반환한다.\r\n","fields":{"slug":"blog/react/useMemo-useCallback"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/useMemo-useCallback.md"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"usememo\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usememo\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useMemo\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"useMemo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" fn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"deps\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"deps가 변한다면, fn 함수 실행 후 값을 반환한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"동일한 입력이 들어온다면 재활용하여 중복 연산을 피할 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"usecallback\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usecallback\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useCallback\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"useCallback\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"fn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"deps\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"deps가 변한다면, fn 이라는 새로운 함수를 반환한다.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"React","count":10},{"tag":"JavaScript","count":9},{"tag":"TypeScript","count":8},{"tag":"Network","count":6},{"tag":"NextJS","count":2},{"tag":"Redux","count":2},{"tag":"recoil","count":2},{"tag":"styled-components","count":2},{"tag":"Git","count":2},{"tag":"GithubPage","count":1},{"tag":"Algorithm","count":1},{"tag":"npm","count":1},{"tag":"SCSS","count":1},{"tag":"CSS","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"react-beautiful-dnd","count":1},{"tag":"react-hook-form","count":1},{"tag":"react-helmet","count":1},{"tag":"react-query","count":1},{"tag":"react-apexcharts","count":1},{"tag":"Jest","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}