{"pageProps":{"post":{"frontMatter":{"date":"2023-02-23T00:00:00","title":"React Hook","tags":["React"],"description":"","published":false},"body":"# Hook\r\n\r\n> “Hook은 함수 컴포넌트에서 React state와 생명주기 기능을 연동할 수 있게 해주는 함수”\r\n>\r\n> - React Docs Hook\r\n\r\n- Hook은 class 안에서 동작하지 않는다.\r\n- Hook은 컴포넌트 혹은 커스텀 훅의 최상위 상단에만 호출할 수 있으며, 반복문(loops)이나 조건문(conditions) 안에서 호출할 수 없다.\r\n  만일 반복문이나 조건문 안에서 호출하고 싶다면, 새 컴포넌트를 생성하고 state를 해당 컴포넌트로 옮긴다.\r\n\r\n## Hook을 사용하는 이유\r\n\r\n- 상태 관련 로직을 추상화하여 컴포넌트 사이의 상태 로직의 재사용성을 높일 수 있다.\r\n- 생명 주기 메서드 기반이 아닌 유사 동작을 기반으로 컴포넌트를 작은 함수로 쪼개어 로직 추적 및 테스트 등을 보다 더 용이하게 할 수 있다.\r\n\r\n# State Hooks\r\n\r\n> `state`를 선언하고 업데이트 하는 Hook\r\n\r\n<aside>\r\n💡 `state`\r\n\r\n컴포넌트가 기억하고 있는 정보\r\n\r\n</aside>\r\n\r\n## `useState`\r\n\r\n```jsx\r\nconst [state, setState] = useState(initialState);\r\n```\r\n\r\n> 변수 선언을 위한 Hook으로 바로바로 업데이트 할 수 있다.\r\n>\r\n> ```jsx\r\n> function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\r\n> ```\r\n>\r\n> 함수 컴포넌트가 다시 렌더링 되어도 그대로 유지되는 `state`와 `state` 값을 업데이트할 수 있는 함수를 반환한다.\r\n>\r\n> 인자로 첫 번째 렌더링에서 사용되는 초기 `state` (어떤 타입이든 가능)를 받는다.\r\n>\r\n> class의 `this.setState`와 거의 유사하지만 이전 `state`와 새로운 `state`를 합치지 않는다.\r\n\r\n```jsx\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Example() {\r\n  // \"count\"라는 새 상태 변수를 선언합니다\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n### `setState`\r\n\r\n> `Dispatch<SetStateAction<state의 type>>`\r\n> state를 다른 값으로 업데이트 되는데 사용되며 리렌더링을 유발한다.\r\n\r\n<aside>\r\n💡 리렌더링을 유발하는 함수는 updater function\r\n\r\nReact는 updater function들을 queue에 넣고 컴포넌트를 리렌더한다.\r\n\r\n리렌더링이 발생하는 동안, React는 prev state 들을 queue에 있는 updater function을 적용하여 next state를 계산한다.\r\n\r\n</aside>\r\n\r\n- nextState를 그냥 넣을 수도 있지만 prevState를 함수 형태로 넣어서 상태를 변경시킬 수도 있다.\r\n  만일 함수 형태로 nextState를 넘겨주는 경우, prevState만을 유일한 argument로 사용하며 nextState를 반환하는 함수여야한다.\r\n\r\n  ```jsx\r\n  const [name, setName] = useState(\"Prev Name\");\r\n\r\n  useEffect(\r\n    () =>\r\n      setName((prevState) =>\r\n        prevState === \"Prev Name\" ? \"Next Name\" : \"Different Name\"\r\n      ),\r\n    [setName]\r\n  );\r\n  ```\r\n\r\n- 리렌더링 이후에 state의 값이 업데이트 되는 것이기에 만일 setState 함수를 호출한 후 바로 state를 읽어보면 아직 값이 업데이트 되지 않은 것을 알 수 있다.\r\n\r\n## `useReducer`\r\n\r\n> reducer 함수의 로직으로 state를 선언하고 업데이트 하는 Hook\r\n\r\n# Context Hooks\r\n\r\n<aside>\r\n💡 context\r\n\r\nprops를 넘겨받지 않고 정보(변수 등등)들을 먼 부모 컴포넌트로 부터 받는 것\r\n\r\n얼마나 깊이 자식 컴포넌트가 있는지 관계 없다.\r\n\r\n</aside>\r\n\r\n## `useContext`\r\n\r\n> context를 읽고 구독하는 Hook\r\n\r\n# Ref Hooks\r\n\r\n<aside>\r\n💡 Refs\r\n\r\nRefs는 DOM node 나 timeout ID와 같은 렌더링에 사용되지 않는 `state`와는 다른 정보들을 컴포넌트가 보유할 수 있도록 한다.\r\n\r\n</aside>\r\n\r\n- refs가 제공하는 정보는 state와는 다른 정보이기에 refs의 변화를 react가 알지못하고 컴포넌트 리렌더링이 발생하지 않는다.\r\n- Refs는 Browser APIs와 같은 non-React system 등과 일해야할 때 매우 유용하다.\r\n\r\n## `useRef`\r\n\r\n> ref를 정의하고 어떤 value 등 가능하다. 다만 주로 DOM node 로 자주 쓰인다.\r\n\r\n## `useImperativeHandle`\r\n\r\n> ref를 컴포넌트에 노출시킬 때 사용된다. 아주 드물게 사용된다.\r\n\r\n# Effect Hooks\r\n\r\n<aside>\r\n💡 Effects는 컴포넌트를 외부의 시스템(네트워크, 브라우저 DOM, 애니메이션, 다른 UI 라이브러리로 만들어진 위젯과 리액트 코드로 작성되지 않은 것)들과 연결하고 동기화하도록 한다.\r\n\r\n</aside>\r\n\r\n## `useEffect`\r\n\r\n> 함수 컴포넌트 내에서 Side Effects를 수행할 수 있게 해주는 Hook\r\n>\r\n> <aside>\r\n> 💡 Side Effects\r\n> React 컴포넌트 안에서 데이터를 가져오거나 구독하고, DOM을 직접 조작하는 작업으로 다른 컴포넌트에 영향을 주거나 렌더링 과정에서는 구현할 수 없는 작업\r\n>\r\n> </aside>\r\n>\r\n> class의 `componentDidMount`나 `componentDidUpdate`, `componentWillUnmount`와 같은 목적으로 하나의 API로 통합된 것이다.\r\n>\r\n> - 기본적으로 React는 첫번째 렌더링을 포함하여 매 렌더링 이후에 effects를 실행한다.\r\n\r\n```jsx\r\n// React가 DOM으로 업데이트한 뒤에 문서의 타이틀을 바꾸는 컴포넌트\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // componentDidMount, componentDidUpdate와 비슷합니다\r\n  useEffect(() => {\r\n    // 브라우저 API를 이용해 문서의 타이틀을 업데이트합니다\r\n    document.title = `You clicked ${count} times`;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## `useLayoutEffect`\r\n\r\n## `useInsertionEffect`\r\n\r\n# Performance Hooks\r\n\r\n## `useMemo`\r\n\r\n## `useCallback`\r\n\r\n# Other Hooks\r\n\r\n## `useDebugValue`\r\n\r\n> React DevTools가 표시하는 label을 커스텀 하는 Hook\r\n\r\n## `useId`\r\n\r\n> 컴포넌트와 고유한 ID를 연결할 때 사용하는 Hook으로 주로 API와 연결할 때 사용\r\n\r\n## `useSyncExternalStore`\r\n\r\n> 컴포넌트가 외부 저장소를 구독하게 하는 Hook\r\n\r\n# 참조\r\n\r\n- [리액트 공식 문서 Hook](https://ko.reactjs.org/docs/hooks-intro.html)\r\n- [리액트 공식 문서 Beta Hook](https://beta.reactjs.org/reference/react)\r\n","fields":{"slug":"blog/react/hook"},"path":"C:/Users/dayeo/YODA/git/Personal Project/coyo-log/content/blog/react/hook.md"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"hook\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hook\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Hook\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"“Hook은 함수 컴포넌트에서 React state와 생명주기 기능을 연동할 수 있게 해주는 함수”\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"React Docs Hook\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Hook은 class 안에서 동작하지 않는다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Hook은 컴포넌트 혹은 커스텀 훅의 최상위 상단에만 호출할 수 있으며, 반복문(loops)이나 조건문(conditions) 안에서 호출할 수 없다.\\r\\n만일 반복문이나 조건문 안에서 호출하고 싶다면, 새 컴포넌트를 생성하고 state를 해당 컴포넌트로 옮긴다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hook을-사용하는-이유\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hook을-사용하는-이유\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Hook을 사용하는 이유\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"상태 관련 로직을 추상화하여 컴포넌트 사이의 상태 로직의 재사용성을 높일 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"생명 주기 메서드 기반이 아닌 유사 동작을 기반으로 컴포넌트를 작은 함수로 쪼개어 로직 추적 및 테스트 등을 보다 더 용이하게 할 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"state-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#state-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"State Hooks\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"state\"\n        }), \"를 선언하고 업데이트 하는 Hook\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsxs(_components.p, {\n        children: [\"💡 \", _jsx(_components.code, {\n          children: \"state\"\n        })]\n      }), _jsx(_components.p, {\n        children: \"컴포넌트가 기억하고 있는 정보\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usestate\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usestate\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useState\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsx(_components.code, {\n        className: \"language-jsx code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"state\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" setState\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"useState\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"initialState\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"변수 선언을 위한 Hook으로 바로바로 업데이트 할 수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-jsx\",\n        children: _jsx(_components.code, {\n          className: \"language-jsx code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"function\"\n            }), \" useState\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token constant\",\n              children: \"S\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword nil\",\n              children: \"undefined\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \">\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"[\"\n            }), _jsx(_components.span, {\n              className: \"token constant\",\n              children: \"S\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"|\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword nil\",\n              children: \"undefined\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"Dispatch\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"SetStateAction\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token constant\",\n              children: \"S\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"|\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword nil\",\n              children: \"undefined\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \">>\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"]\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"함수 컴포넌트가 다시 렌더링 되어도 그대로 유지되는 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \" 값을 업데이트할 수 있는 함수를 반환한다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"인자로 첫 번째 렌더링에서 사용되는 초기 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \" (어떤 타입이든 가능)를 받는다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"class의 \", _jsx(_components.code, {\n          children: \"this.setState\"\n        }), \"와 거의 유사하지만 이전 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \"와 새로운 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \"를 합치지 않는다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"React\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" useState \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"react\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\r\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"Example\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// \\\"count\\\"라는 새 상태 변수를 선언합니다\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"count\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" setCount\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"useState\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\r\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"div\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"      \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"p\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"You clicked \"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"count\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \" times\"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"p\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"      \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"button\"]\n            }), \" \", _jsx(_components.span, {\n              className: \"token attr-name\",\n              children: \"onClick\"\n            }), _jsxs(_components.span, {\n              className: \"token script language-javascript\",\n              children: [_jsx(_components.span, {\n                className: \"token script-punctuation punctuation\",\n                children: \"=\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token arrow operator\",\n                children: \"=>\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token function\",\n                children: \"setCount\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), \"count \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"+\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token number\",\n                children: \"1\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"Click me\"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"button\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"    \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"div\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"setstate\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#setstate\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"setState\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Dispatch<SetStateAction<state의 type>>\"\n        }), \"\\r\\nstate를 다른 값으로 업데이트 되는데 사용되며 리렌더링을 유발한다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"💡 리렌더링을 유발하는 함수는 updater function\"\n      }), _jsx(_components.p, {\n        children: \"React는 updater function들을 queue에 넣고 컴포넌트를 리렌더한다.\"\n      }), _jsx(_components.p, {\n        children: \"리렌더링이 발생하는 동안, React는 prev state 들을 queue에 있는 updater function을 적용하여 next state를 계산한다.\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"nextState를 그냥 넣을 수도 있지만 prevState를 함수 형태로 넣어서 상태를 변경시킬 수도 있다.\\r\\n만일 함수 형태로 nextState를 넘겨주는 경우, prevState만을 유일한 argument로 사용하며 nextState를 반환하는 함수여야한다.\"\n        }), \"\\n\", _jsx(_components.pre, {\n          className: \"language-jsx\",\n          children: _jsxs(_components.code, {\n            className: \"language-jsx code-highlight\",\n            children: [_jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"const\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"[\"\n              }), \"name\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \" setName\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"]\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token function\",\n                children: \"useState\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token string\",\n                children: \"\\\"Prev Name\\\"\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \";\"\n              }), \"\\r\\n\"]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"\\r\\n\"\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token function\",\n                children: \"useEffect\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token arrow operator\",\n                children: \"=>\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"    \", _jsx(_components.span, {\n                className: \"token function\",\n                children: \"setName\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token parameter\",\n                children: \"prevState\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token arrow operator\",\n                children: \"=>\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"      prevState \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"===\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token string\",\n                children: \"\\\"Prev Name\\\"\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"?\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token string\",\n                children: \"\\\"Next Name\\\"\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \":\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token string\",\n                children: \"\\\"Different Name\\\"\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"    \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"[\"\n              }), \"setName\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"]\"\n              }), \"\\r\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \";\"\n              }), \"\\n\"]\n            })]\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"리렌더링 이후에 state의 값이 업데이트 되는 것이기에 만일 setState 함수를 호출한 후 바로 state를 읽어보면 아직 값이 업데이트 되지 않은 것을 알 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usereducer\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usereducer\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useReducer\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"reducer 함수의 로직으로 state를 선언하고 업데이트 하는 Hook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"context-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#context-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Context Hooks\"]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"💡 context\"\n      }), _jsx(_components.p, {\n        children: \"props를 넘겨받지 않고 정보(변수 등등)들을 먼 부모 컴포넌트로 부터 받는 것\"\n      }), _jsx(_components.p, {\n        children: \"얼마나 깊이 자식 컴포넌트가 있는지 관계 없다.\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usecontext\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usecontext\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useContext\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"context를 읽고 구독하는 Hook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"ref-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ref-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Ref Hooks\"]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"💡 Refs\"\n      }), _jsxs(_components.p, {\n        children: [\"Refs는 DOM node 나 timeout ID와 같은 렌더링에 사용되지 않는 \", _jsx(_components.code, {\n          children: \"state\"\n        }), \"와는 다른 정보들을 컴포넌트가 보유할 수 있도록 한다.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"refs가 제공하는 정보는 state와는 다른 정보이기에 refs의 변화를 react가 알지못하고 컴포넌트 리렌더링이 발생하지 않는다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Refs는 Browser APIs와 같은 non-React system 등과 일해야할 때 매우 유용하다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"useref\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#useref\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useRef\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"ref를 정의하고 어떤 value 등 가능하다. 다만 주로 DOM node 로 자주 쓰인다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"useimperativehandle\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#useimperativehandle\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useImperativeHandle\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"ref를 컴포넌트에 노출시킬 때 사용된다. 아주 드물게 사용된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"effect-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#effect-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Effect Hooks\"]\n    }), \"\\n\", _jsx(\"aside\", {\n      children: _jsx(_components.p, {\n        children: \"💡 Effects는 컴포넌트를 외부의 시스템(네트워크, 브라우저 DOM, 애니메이션, 다른 UI 라이브러리로 만들어진 위젯과 리액트 코드로 작성되지 않은 것)들과 연결하고 동기화하도록 한다.\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"useeffect\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#useeffect\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useEffect\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"함수 컴포넌트 내에서 Side Effects를 수행할 수 있게 해주는 Hook\"\n      }), \"\\n\", _jsx(\"aside\", {\n        children: _jsx(_components.p, {\n          children: \"💡 Side Effects\\r\\nReact 컴포넌트 안에서 데이터를 가져오거나 구독하고, DOM을 직접 조작하는 작업으로 다른 컴포넌트에 영향을 주거나 렌더링 과정에서는 구현할 수 없는 작업\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"class의 \", _jsx(_components.code, {\n          children: \"componentDidMount\"\n        }), \"나 \", _jsx(_components.code, {\n          children: \"componentDidUpdate\"\n        }), \", \", _jsx(_components.code, {\n          children: \"componentWillUnmount\"\n        }), \"와 같은 목적으로 하나의 API로 통합된 것이다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"기본적으로 React는 첫번째 렌더링을 포함하여 매 렌더링 이후에 effects를 실행한다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// React가 DOM으로 업데이트한 뒤에 문서의 타이틀을 바꾸는 컴포넌트\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"React\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" useState\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" useEffect \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"react\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\r\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"Example\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"count\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" setCount\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"useState\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\r\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// componentDidMount, componentDidUpdate와 비슷합니다\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"useEffect\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 브라우저 API를 이용해 문서의 타이틀을 업데이트합니다\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token dom variable\",\n            children: \"document\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"title\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"You clicked \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"${\"\n              }), \"count\", _jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \" times\"\n            }), _jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\r\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"div\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"      \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"p\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"You clicked \"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"count\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \" times\"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"p\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"      \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<\"\n              }), \"button\"]\n            }), \" \", _jsx(_components.span, {\n              className: \"token attr-name\",\n              children: \"onClick\"\n            }), _jsxs(_components.span, {\n              className: \"token script language-javascript\",\n              children: [_jsx(_components.span, {\n                className: \"token script-punctuation punctuation\",\n                children: \"=\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token arrow operator\",\n                children: \"=>\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token function\",\n                children: \"setCount\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), \"count \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"+\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token number\",\n                children: \"1\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"Click me\"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"button\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"\\r\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token plain-text\",\n            children: \"    \"\n          }), _jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"</\"\n              }), \"div\"]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\r\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"uselayouteffect\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#uselayouteffect\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useLayoutEffect\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"useinsertioneffect\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#useinsertioneffect\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useInsertionEffect\"\n      })]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"performance-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#performance-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Performance Hooks\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usememo\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usememo\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useMemo\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usecallback\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usecallback\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useCallback\"\n      })]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"other-hooks\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#other-hooks\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Other Hooks\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usedebugvalue\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usedebugvalue\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useDebugValue\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"React DevTools가 표시하는 label을 커스텀 하는 Hook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"useid\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#useid\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useId\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"컴포넌트와 고유한 ID를 연결할 때 사용하는 Hook으로 주로 API와 연결할 때 사용\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"usesyncexternalstore\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#usesyncexternalstore\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.code, {\n        children: \"useSyncExternalStore\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"컴포넌트가 외부 저장소를 구독하게 하는 Hook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"참조\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#참조\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"참조\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://ko.reactjs.org/docs/hooks-intro.html\",\n          children: \"리액트 공식 문서 Hook\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://beta.reactjs.org/reference/react\",\n          children: \"리액트 공식 문서 Beta Hook\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"React","count":10},{"tag":"JavaScript","count":9},{"tag":"TypeScript","count":8},{"tag":"Network","count":6},{"tag":"NextJS","count":2},{"tag":"Redux","count":2},{"tag":"recoil","count":2},{"tag":"styled-components","count":2},{"tag":"Git","count":2},{"tag":"GithubPage","count":1},{"tag":"Algorithm","count":1},{"tag":"npm","count":1},{"tag":"SCSS","count":1},{"tag":"CSS","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"react-beautiful-dnd","count":1},{"tag":"react-hook-form","count":1},{"tag":"react-helmet","count":1},{"tag":"react-query","count":1},{"tag":"react-apexcharts","count":1},{"tag":"Jest","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}