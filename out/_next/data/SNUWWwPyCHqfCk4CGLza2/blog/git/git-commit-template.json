{"pageProps":{"post":{"frontMatter":{"date":"2023-09-25T00:00:00","title":"git commit template 등록하기","tags":["Git","IntelliJ"],"description":"git commit template 등록하고 IntelliJ에서 사용해보기","published":true,"thumbnail":"./thumbnail/git-commit-template.png"},"body":"> **git commit template**\n>\n> commit 시에 등록한 commit template을 보여주어 commit message를 작성할 때 일정한 스타일을 유지할 수 있도록 도와준다.\n\n# git commit template 등록하기\n\n## template 파일 생성하고 작성하기\n\n1. `.git` 폴더가 있는 위치에 `.gitmessage.txt` 파일을 생성한다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_message_txt\"} src={\"https://user-images.githubusercontent.com/56423604/270172830-eca18299-d8a3-4aee-9e0f-9c1323305df9.png\"}/>\n\n2. 생성한 .gitmessage.txt 에 내용을 작성하면 된다.\n - `#` 으로 시작하면 주석 처리되어 커밋에 보이지 않는다.\n - 다음 사이트를 참고하여 본인에 맞게 룰을 작성하면 된다.\n\n<aside>\n  🔗 Commit message rule\n\n  - [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)\n  - [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n  - [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n</aside>\n\n  ```\n  # <타입> : <제목> 형식으로 작성하며 제목은 최대 50글자 정도로만 입력한다.\n\n  ################\n  # 본문(추가 설명)을 아랫줄에 작성한다.\n\n  ################\n  # 꼬리말(footer)을 아랫줄에 작성한다.\n\n  ################\n  # FEAT : 새로운 기능 추가\n  # FIX : 버그 수정\n  # DOCS : 문서 수정\n  # TEST : 테스트 코드 추가\n  # REFACTOR : 코드 리팩토링\n  # STYLE : 코드 의미에 영향을 주지 않는 변경사항\n  # CHORE : 빌드 부분 혹은 패키지 매니저 수정사항\n  ################\n        ```\n\n\n## commit message template 설정하기\n\n아래 명령어를 terminal 에 입력한다.\n\n```bash\ngit config --global commit.template .gitmessage.txt\n```\n\ntemplate을 적용하면 git commit 할때마다 지정한 파일이 `vi` 로 나온다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_template_vim\"} src={\"https://user-images.githubusercontent.com/56423604/270172961-313f6ee3-20ab-450a-a758-581a0be2e384.png\"}/>\n\n`i` 를 눌러 제목 본문 꼬리말을 작성하고 `esc`를 누른 후에 `:wq!`를 입력한 후 `enter`를 눌러 작성한 것을 저장하여 커밋한다.\n\n# IntelliJ에서 사용해보기\n\n## Custom commit template 사용하기\n\n위에서 설정한 commit message template을 IntelliJ에서 commit 할때 사용할 수 있다.\n\n1. Settings > Plugins > MarketPlace 에서 해당 plugin 을 찾아 설치해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template\"} src={\"https://user-images.githubusercontent.com/56423604/270173032-c1b65887-c651-45fa-b573-c2c35b479e54.png\"}/>\n\n\n1. 설정한 commit message template 적용하기\n - Settings > Tools > Commit Message Template 에서 template을 적용한다.\n - 위에 text를 직접 입력해도 되고, Load Template File에 만들어둔 text 파일 directory 주소를 입력해도 된다.\n\n맥의 경우 파일을 찾을 때, `.gitmessage.txt` 파일의 경우 숨겨질 수 있기에 `command` + `shift` + `.` 을 눌러 숨김 파일도 볼 수 있도록 해주자.\n\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"commit_message_template_tools\"} src={\"https://user-images.githubusercontent.com/56423604/270173233-597e3a7d-19b5-4c73-a3a7-88957668d1be.png\"}/>\n\n    적용해주면 commit 할때, 다음과 같이 입력한 template 이 나온다.\n\n    <img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_example\"} src={\"https://user-images.githubusercontent.com/56423604/270173232-c39ce874-df0c-487f-94a9-6e706cad0c1c.png\"}/>\n\n\n## ****Conventional**** commit template 사용하기\n\ntemplate 설정 없이 기존의 conventional commit template을 사용하는 plugin도 있다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_plugin\"} src={\"https://user-images.githubusercontent.com/56423604/270173230-205f29af-127d-45d0-a2a9-cadc27cad49c.png\"}/>\n\n해당 plugin은 설치한 후에 commit 할때 create commit message 버튼 (아래 사진에 동그라미 쳐진 버튼) 을 클릭하면\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit1\"} src={\"https://user-images.githubusercontent.com/56423604/270173229-5e16e8a9-67e0-427b-91d8-482f01b8f78a.png\"}/>\n\n다음과 같은 창이  나온다. 해당 창에서 내용을 입력하고 OK 버튼을 누르면,\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit2\"} src={\"https://user-images.githubusercontent.com/56423604/270173227-92414cb3-8b8f-4366-ae11-95a81c3c8efe.png\"}/>\n\n다음과 같이 커밋 메세지를 작성해준다.\n\n<img style={{margin:\"0 auto 10px\"}} alt={\"git_commit_template_commit3\"} src={\"https://user-images.githubusercontent.com/56423604/270173223-83358c13-96c8-4d27-9fa2-7f86d2ae76ff.png\"}/>\n\n# 참조\n\n- [좋은 git 커밋 메시지를 작성하기 위한 7가지 약속](https://meetup.nhncloud.com/posts/106)\n- [Writing Meaningful Git Commit Messages](https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81)\n- [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)","fields":{"slug":"blog/git/git-commit-template"},"path":"/Users/yoda/Workspace/COYO-HM.github.io/content/blog/git/git-commit-template.mdx"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    strong: \"strong\",\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    ul: \"ul\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"git commit template\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"commit 시에 등록한 commit template을 보여주어 commit message를 작성할 때 일정한 스타일을 유지할 수 있도록 도와준다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"git-commit-template-등록하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#git-commit-template-등록하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"git commit template 등록하기\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"template-파일-생성하고-작성하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#template-파일-생성하고-작성하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"template 파일 생성하고 작성하기\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \".git\"\n        }), \" 폴더가 있는 위치에 \", _jsx(_components.code, {\n          children: \".gitmessage.txt\"\n        }), \" 파일을 생성한다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_message_txt\",\n      src: \"https://user-images.githubusercontent.com/56423604/270172830-eca18299-d8a3-4aee-9e0f-9c1323305df9.png\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"생성한 .gitmessage.txt 에 내용을 작성하면 된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"#\"\n        }), \" 으로 시작하면 주석 처리되어 커밋에 보이지 않는다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다음 사이트를 참고하여 본인에 맞게 룰을 작성하면 된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"🔗 Commit message rule\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://www.conventionalcommits.org/en/v1.0.0/\",\n            children: \"Conventional Commits 1.0.0\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://meetup.nhncloud.com/posts/106\",\n            children: \"좋은 git 커밋 메시지를 작성하기 위한 7가지 약속\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81\",\n            children: \"Writing Meaningful Git Commit Messages\"\n          })\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# <타입> : <제목> 형식으로 작성하며 제목은 최대 50글자 정도로만 입력한다.\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"################\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# 본문(추가 설명)을 아랫줄에 작성한다.\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"################\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# 꼬리말(footer)을 아랫줄에 작성한다.\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"################\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# FEAT : 새로운 기능 추가\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# FIX : 버그 수정\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# DOCS : 문서 수정\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# TEST : 테스트 코드 추가\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# REFACTOR : 코드 리팩토링\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# STYLE : 코드 의미에 영향을 주지 않는 변경사항\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# CHORE : 빌드 부분 혹은 패키지 매니저 수정사항\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"################\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"commit-message-template-설정하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#commit-message-template-설정하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"commit message template 설정하기\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 명령어를 terminal 에 입력한다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"git\"\n          }), \" config \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--global\"\n          }), \" commit.template .gitmessage.txt\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"template을 적용하면 git commit 할때마다 지정한 파일이 \", _jsx(_components.code, {\n        children: \"vi\"\n      }), \" 로 나온다.\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_template_vim\",\n      src: \"https://user-images.githubusercontent.com/56423604/270172961-313f6ee3-20ab-450a-a758-581a0be2e384.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"i\"\n      }), \" 를 눌러 제목 본문 꼬리말을 작성하고 \", _jsx(_components.code, {\n        children: \"esc\"\n      }), \"를 누른 후에 \", _jsx(_components.code, {\n        children: \":wq!\"\n      }), \"를 입력한 후 \", _jsx(_components.code, {\n        children: \"enter\"\n      }), \"를 눌러 작성한 것을 저장하여 커밋한다.\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"intellij에서-사용해보기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#intellij에서-사용해보기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"IntelliJ에서 사용해보기\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"custom-commit-template-사용하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#custom-commit-template-사용하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Custom commit template 사용하기\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 설정한 commit message template을 IntelliJ에서 commit 할때 사용할 수 있다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Settings > Plugins > MarketPlace 에서 해당 plugin 을 찾아 설치해준다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"commit_message_template\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173032-c1b65887-c651-45fa-b573-c2c35b479e54.png\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"설정한 commit message template 적용하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Settings > Tools > Commit Message Template 에서 template을 적용한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"위에 text를 직접 입력해도 되고, Load Template File에 만들어둔 text 파일 directory 주소를 입력해도 된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"맥의 경우 파일을 찾을 때, \", _jsx(_components.code, {\n        children: \".gitmessage.txt\"\n      }), \" 파일의 경우 숨겨질 수 있기에 \", _jsx(_components.code, {\n        children: \"command\"\n      }), \" + \", _jsx(_components.code, {\n        children: \"shift\"\n      }), \" + \", _jsx(_components.code, {\n        children: \".\"\n      }), \" 을 눌러 숨김 파일도 볼 수 있도록 해주자.\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"commit_message_template_tools\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173233-597e3a7d-19b5-4c73-a3a7-88957668d1be.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"적용해주면 commit 할때, 다음과 같이 입력한 template 이 나온다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_commit_template_example\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173232-c39ce874-df0c-487f-94a9-6e706cad0c1c.png\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"conventional-commit-template-사용하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#conventional-commit-template-사용하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: _jsx(_components.strong, {\n          children: \"Conventional\"\n        })\n      }), \" commit template 사용하기\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"template 설정 없이 기존의 conventional commit template을 사용하는 plugin도 있다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_commit_template_plugin\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173230-205f29af-127d-45d0-a2a9-cadc27cad49c.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"해당 plugin은 설치한 후에 commit 할때 create commit message 버튼 (아래 사진에 동그라미 쳐진 버튼) 을 클릭하면\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_commit_template_commit1\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173229-5e16e8a9-67e0-427b-91d8-482f01b8f78a.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같은 창이  나온다. 해당 창에서 내용을 입력하고 OK 버튼을 누르면,\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_commit_template_commit2\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173227-92414cb3-8b8f-4366-ae11-95a81c3c8efe.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 커밋 메세지를 작성해준다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        margin: \"0 auto 10px\"\n      },\n      alt: \"git_commit_template_commit3\",\n      src: \"https://user-images.githubusercontent.com/56423604/270173223-83358c13-96c8-4d27-9fa2-7f86d2ae76ff.png\"\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"참조\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#참조\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"참조\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://meetup.nhncloud.com/posts/106\",\n          children: \"좋은 git 커밋 메시지를 작성하기 위한 7가지 약속\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@menuka/writing-meaningful-git-commit-messages-a62756b65c81\",\n          children: \"Writing Meaningful Git Commit Messages\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.conventionalcommits.org/en/v1.0.0/\",\n          children: \"Conventional Commits 1.0.0\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tags":[{"tag":"JavaScript","count":9},{"tag":"React","count":8},{"tag":"TypeScript","count":6},{"tag":"Network","count":4},{"tag":"CSS","count":2},{"tag":"Redux","count":2},{"tag":"Axios","count":2},{"tag":"Git","count":1},{"tag":"IntelliJ","count":1},{"tag":"npm","count":1},{"tag":"yarn","count":1},{"tag":"yarn berry","count":1},{"tag":"GithubPage","count":1},{"tag":"Emotion","count":1},{"tag":"Gatsby","count":1},{"tag":"Redux-Persist","count":1},{"tag":"CS","count":1},{"tag":"Styled-Components","count":1},{"tag":"Python3","count":1},{"tag":"Lodash","count":1}]},"__N_SSG":true}