{"pageProps":{"post":{"frontMatter":{"date":"2023-10-25T15:00:00","title":"commitlint로 commit-message 관리하기","tags":["husky","git","commitlint"],"series":[],"description":"commitlint로 규칙 커스텀해서 커밋 메세지 관리해보자","published":true,"thumbnail":"https://user-images.githubusercontent.com/56423604/278075494-8932e44f-b2ea-49d8-8c5d-c1b2805fd0ab.png"},"body":"husky 설치 및 git hook에 관련한 내용은 [링크된 포스트](https://coyo-hm.github.io/blog/post/husky-git-hook)를 참고하자.\n\n이전 포스트에서 git template을 사용하여 git commit message를 작성할 때 가이드 라인을 생성해주었다. 그런데 이는 말그대로 가이드 라인이기에 규칙을 어기더라도 아무런 일이 일어나지 않는다. 규칙을 강제하지 않는다.\n\n그래서 오타가 나거나 규칙이 어긋나더라도 그대로 commit message가 올라간다. 이러한 불상사를 방지하기 위해서 git hook을 사용하여 만일 commit message가 설정한 규칙에 벗어나면 commit 되지 않도록 해주도록 해보자.\n\n# commitlint\n\n직접 스크립트를 작성하는 방법도 있지만 [`commitlint`](https://commitlint.js.org/#/) 를 사용해주었다. `commitlint` 는 `commitlint.config.js` 파일을 생성해서 적용해주면 규칙을 커스텀할 수 있다.\n\n## 설치\n\n```bash\n# npm을 사용하는 경우\nnpm install --dev @commitlint/config-conventional @commitlint/cli\n\n# yarn을 사용하는 경우\nyarn add --dev @commitlint/config-conventional @commitlint/cli\n```\n\n설치 후 프로젝트 루트 디렉토리에 `commitlint.config.js` 생성하고 `@commitlint/config-conventional`를 extends 추가해주어 [Conventional Commits Rule](https://www.conventionalcommits.org/en/v1.0.0/)을 따를 수 있도록 해준다.\n\n```json\n{\n  \"extends\": [\"@commitlint/config-conventional\"],\n}\n```\n\n## 적용\n\n`commlint`를 commit-msg hook 에 축가해준다.\n\n```bash\n# 스크립트 생성 없이 하는 방법\nnpx husky add .husky/commit-msg \"npx commitlint --edit \"$1\"\"\n\nor\n\n# 스크립트 생성하는 방법\nnpm pkg set scripts.commitlint=\"commitlint --edit\"\nnpx husky add .husky/commit-msg 'npm run commitlint ${1}'\n```\n\n<aside>\n  💡 다음과 같이 패키지 설치 없이 바로 적용할 수 있다.\n\n  ```bash\n  #!/bin/sh\n  . \"$(dirname \"$0\")/_/husky.sh\"\n\n  npx --no -- commitlint --edit ${1}\n  ```\n\n</aside>\n\n다음과 같이 commit-msg 에 commlint 스크립트가 생성된 것을 확인할 수 있다.\n\n![commit-msg-hook](https://user-images.githubusercontent.com/56423604/278076031-666343a5-4391-465c-a204-7508df2fe80a.png)\n\n## 규칙 커스텀하기\n\n[commlint docs](https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md)에 보면 자세한 규칙 설정 방법과 지원하는 규칙을 확인할 수 있다. `rules`에 커스텀 규칙을 추가하면 된다.\n\n```json\n \"subject-case\": [\n      2,\n      \"always\",\n      [\"sentence-case\", \"start-case\", \"pascal-case\", \"upper-case\", \"lower-case\"]\n    ],\n```\n\n위의 규칙을 살펴보면 `subject-case` 라는 규칙에 적용 방식이 배열로 들어간다. 순서대로 level, applicable, value를 지정할 수 있다.\n\n- level (`0`, `1`, `2`): 규칙을 어떤식으로 처리할 지 지정한다. `0`은 비활성화, `1`은 경고, `2`는 오류로 처리한다.\n- applicable (`always`, `never`): `always`는 규칙 허용, `never`은 해당 규칙 비허용(규칙 반대 적용)이란 의미로\n\n만일, `subject-empty` 규칙이 비허용이란 말은 subject 부분이 비면 안된다는 규칙이다.\n\n- value는 각각 규칙에 적용되는 값으로, 대문자 허용 여부 등등의 각각의 규칙마다 다르지만 보통 아래의 규칙 등을 적용할 수 있고, 실제로 포함되어야 하는 값들을 설정할 수도 있다.\n\n  ```\n  [\n    'lower-case', // default\n    'upper-case', // UPPERCASE\n    'camel-case', // camelCase\n    'kebab-case', // kebab-case\n    'pascal-case', // PascalCase\n    'sentence-case', // Sentence case\n    'snake-case', // snake_case\n    'start-case', // Start Case\n  ];\n    ```\n\n\n```json\n{\n  \"extends\": [\"@commitlint/config-conventional\"],\n  \"rules\": {\n    \"subject-case\": [\n      2,\n      \"always\",\n      [\"sentence-case\", \"start-case\", \"pascal-case\", \"upper-case\", \"lower-case\"]\n    ],\n    \"type-enum\": [\n      2,\n      \"always\",\n      [\n        \"BUILD\",\n        \"CHORE\",\n        \"CONTENT\",\n        \"DOCS\",\n        \"FEAT\",\n        \"FIX\",\n        \"REFACTOR\",\n        \"STYLE\",\n        \"TEST\",\n        \"DEPLOY\"\n      ]\n    ],\n    \"type-case\": [2, \"always\",\"upper-case\"]\n  }\n}\n```\n\n[Conventional Commits Rule](https://www.conventionalcommits.org/en/v1.0.0/) 에 이전에 커스텀한 type-enum을 적용해주었다. 또한 type의 경우 개인의 취향이 대문자여서 모두 대문자로 처리하였고 만일 규칙에 어긋날 경우 모두 오류가 발생하도록 처리해주었다.\n\n## 테스트\n\n잘 적용되었는지 확인해보기 위해 고의적으로 규칙에 맞지 않게 ‘committest’라고 commit message를 적었다.\n\n![image](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/059bcd54-0e45-46db-8da4-7a0c5f138c5c)\n\nerror가 발생하여 commit 에 실패한 것을 확인할 수 있었다. error message를 살펴보면 어떤 오류가 발생했는지 알 수 있다.\n\n![image](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/983f5eb4-a355-4f50-9fa0-481f79c8e4fa)\n\ntype과 subject를 적지 않았음을 알 수 있다.\n\n이번엔 규칙에 맞게 commit message를 작성해보았다.\n\n![image](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/15369756-b994-4e47-9e93-c132fc745d82)\n\n아무 문제 없이 커밋되는 것을 확인할 수 있었다.\n\n![image](https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/aabfb190-5ab3-4a26-b330-6af0002dbcd5)\n\n\n# 참조\n\n- [효율적인 커밋 메세지 관리를 위한 Conventional Commits 적용하기](https://blog.flynnpark.dev/13)\n- [Github: commitlint > docs > reference-rules](https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md)\n- [Conventional Commits Rule](https://www.conventionalcommits.org/en/v1.0.0/)","fields":{"slug":"husky-commlint"},"path":"husky-commlint.mdx"},"allSeriesInfo":[],"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    span: \"span\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"husky 설치 및 git hook에 관련한 내용은 \", _jsx(_components.a, {\n        href: \"https://coyo-hm.github.io/blog/post/husky-git-hook\",\n        children: \"링크된 포스트\"\n      }), \"를 참고하자.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전 포스트에서 git template을 사용하여 git commit message를 작성할 때 가이드 라인을 생성해주었다. 그런데 이는 말그대로 가이드 라인이기에 규칙을 어기더라도 아무런 일이 일어나지 않는다. 규칙을 강제하지 않는다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 오타가 나거나 규칙이 어긋나더라도 그대로 commit message가 올라간다. 이러한 불상사를 방지하기 위해서 git hook을 사용하여 만일 commit message가 설정한 규칙에 벗어나면 commit 되지 않도록 해주도록 해보자.\"\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"commitlint\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#commitlint\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"commitlint\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"직접 스크립트를 작성하는 방법도 있지만 \", _jsx(_components.a, {\n        href: \"https://commitlint.js.org/#/\",\n        children: _jsx(_components.code, {\n          children: \"commitlint\"\n        })\n      }), \" 를 사용해주었다. \", _jsx(_components.code, {\n        children: \"commitlint\"\n      }), \" 는 \", _jsx(_components.code, {\n        children: \"commitlint.config.js\"\n      }), \" 파일을 생성해서 적용해주면 규칙을 커스텀할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"설치\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#설치\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"설치\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# npm을 사용하는 경우\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"npm\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"install\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--dev\"\n          }), \" @commitlint/config-conventional @commitlint/cli\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# yarn을 사용하는 경우\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--dev\"\n          }), \" @commitlint/config-conventional @commitlint/cli\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"설치 후 프로젝트 루트 디렉토리에 \", _jsx(_components.code, {\n        children: \"commitlint.config.js\"\n      }), \" 생성하고 \", _jsx(_components.code, {\n        children: \"@commitlint/config-conventional\"\n      }), \"를 extends 추가해주어 \", _jsx(_components.a, {\n        href: \"https://www.conventionalcommits.org/en/v1.0.0/\",\n        children: \"Conventional Commits Rule\"\n      }), \"을 따를 수 있도록 해준다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"extends\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"@commitlint/config-conventional\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"적용\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#적용\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"적용\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"commlint\"\n      }), \"를 commit-msg hook 에 축가해준다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# 스크립트 생성 없이 하는 방법\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"npx husky \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), \" .husky/commit-msg \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"npx commitlint --edit \\\"\"\n          }), _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"$1\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"\\\"\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"or\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# 스크립트 생성하는 방법\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"npm\"\n          }), \" pkg \", _jsx(_components.span, {\n            className: \"token builtin class-name\",\n            children: \"set\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"scripts.commitlint\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"commitlint --edit\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"npx husky \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), \" .husky/commit-msg \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'npm run commitlint ${1}'\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(\"aside\", {\n      children: [_jsx(_components.p, {\n        children: \"💡 다음과 같이 패키지 설치 없이 바로 적용할 수 있다.\"\n      }), _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token shebang important\",\n              children: \"#!/bin/sh\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token builtin class-name\",\n              children: \".\"\n            }), \" \", _jsxs(_components.span, {\n              className: \"token string\",\n              children: [\"\\\"\", _jsxs(_components.span, {\n                className: \"token variable\",\n                children: [_jsx(_components.span, {\n                  className: \"token variable\",\n                  children: \"$(\"\n                }), _jsx(_components.span, {\n                  className: \"token function\",\n                  children: \"dirname\"\n                }), \" \", _jsxs(_components.span, {\n                  className: \"token string\",\n                  children: [\"\\\"\", _jsx(_components.span, {\n                    className: \"token variable\",\n                    children: \"$0\"\n                  }), \"\\\"\"]\n                }), _jsx(_components.span, {\n                  className: \"token variable\",\n                  children: \")\"\n                })]\n              }), \"/_/husky.sh\\\"\"]\n            }), \"\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"npx \", _jsx(_components.span, {\n              className: \"token parameter variable\",\n              children: \"--no\"\n            }), \" -- commitlint \", _jsx(_components.span, {\n              className: \"token parameter variable\",\n              children: \"--edit\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token variable\",\n              children: \"${1}\"\n            }), \"\\n\"]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 commit-msg 에 commlint 스크립트가 생성된 것을 확인할 수 있다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://user-images.githubusercontent.com/56423604/278076031-666343a5-4391-465c-a204-7508df2fe80a.png\",\n        alt: \"commit-msg-hook\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"규칙-커스텀하기\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-커스텀하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 커스텀하기\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md\",\n        children: \"commlint docs\"\n      }), \"에 보면 자세한 규칙 설정 방법과 지원하는 규칙을 확인할 수 있다. \", _jsx(_components.code, {\n        children: \"rules\"\n      }), \"에 커스텀 규칙을 추가하면 된다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\" \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"subject-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"always\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sentence-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"start-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"pascal-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"upper-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"lower-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위의 규칙을 살펴보면 \", _jsx(_components.code, {\n        children: \"subject-case\"\n      }), \" 라는 규칙에 적용 방식이 배열로 들어간다. 순서대로 level, applicable, value를 지정할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"level (\", _jsx(_components.code, {\n          children: \"0\"\n        }), \", \", _jsx(_components.code, {\n          children: \"1\"\n        }), \", \", _jsx(_components.code, {\n          children: \"2\"\n        }), \"): 규칙을 어떤식으로 처리할 지 지정한다. \", _jsx(_components.code, {\n          children: \"0\"\n        }), \"은 비활성화, \", _jsx(_components.code, {\n          children: \"1\"\n        }), \"은 경고, \", _jsx(_components.code, {\n          children: \"2\"\n        }), \"는 오류로 처리한다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"applicable (\", _jsx(_components.code, {\n          children: \"always\"\n        }), \", \", _jsx(_components.code, {\n          children: \"never\"\n        }), \"): \", _jsx(_components.code, {\n          children: \"always\"\n        }), \"는 규칙 허용, \", _jsx(_components.code, {\n          children: \"never\"\n        }), \"은 해당 규칙 비허용(규칙 반대 적용)이란 의미로\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"만일, \", _jsx(_components.code, {\n        children: \"subject-empty\"\n      }), \" 규칙이 비허용이란 말은 subject 부분이 비면 안된다는 규칙이다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"value는 각각 규칙에 적용되는 값으로, 대문자 허용 여부 등등의 각각의 규칙마다 다르지만 보통 아래의 규칙 등을 적용할 수 있고, 실제로 포함되어야 하는 값들을 설정할 수도 있다.\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsxs(_components.code, {\n            className: \"code-highlight\",\n            children: [_jsx(_components.span, {\n              className: \"code-line\",\n              children: \"[\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'lower-case', // default\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'upper-case', // UPPERCASE\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'camel-case', // camelCase\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'kebab-case', // kebab-case\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'pascal-case', // PascalCase\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'sentence-case', // Sentence case\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'snake-case', // snake_case\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  'start-case', // Start Case\\n\"\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"];\\n\"\n            })]\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"extends\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"@commitlint/config-conventional\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"rules\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"subject-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"always\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sentence-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"start-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"pascal-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"upper-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"lower-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"type-enum\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"always\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"BUILD\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"CHORE\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"CONTENT\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"DOCS\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"FEAT\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"FIX\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"REFACTOR\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"STYLE\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"TEST\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"DEPLOY\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"type-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"always\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"upper-case\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://www.conventionalcommits.org/en/v1.0.0/\",\n        children: \"Conventional Commits Rule\"\n      }), \" 에 이전에 커스텀한 type-enum을 적용해주었다. 또한 type의 경우 개인의 취향이 대문자여서 모두 대문자로 처리하였고 만일 규칙에 어긋날 경우 모두 오류가 발생하도록 처리해주었다.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"테스트\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#테스트\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"테스트\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"잘 적용되었는지 확인해보기 위해 고의적으로 규칙에 맞지 않게 ‘committest’라고 commit message를 적었다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/059bcd54-0e45-46db-8da4-7a0c5f138c5c\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"error가 발생하여 commit 에 실패한 것을 확인할 수 있었다. error message를 살펴보면 어떤 오류가 발생했는지 알 수 있다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/983f5eb4-a355-4f50-9fa0-481f79c8e4fa\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"type과 subject를 적지 않았음을 알 수 있다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이번엔 규칙에 맞게 commit message를 작성해보았다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/15369756-b994-4e47-9e93-c132fc745d82\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아무 문제 없이 커밋되는 것을 확인할 수 있었다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/COYO-HM/COYO-HM.github.io/assets/56423604/aabfb190-5ab3-4a26-b330-6af0002dbcd5\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"참조\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#참조\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"참조\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://blog.flynnpark.dev/13\",\n          children: \"효율적인 커밋 메세지 관리를 위한 Conventional Commits 적용하기\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md\",\n          children: \"Github: commitlint > docs > reference-rules\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.conventionalcommits.org/en/v1.0.0/\",\n          children: \"Conventional Commits Rule\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}